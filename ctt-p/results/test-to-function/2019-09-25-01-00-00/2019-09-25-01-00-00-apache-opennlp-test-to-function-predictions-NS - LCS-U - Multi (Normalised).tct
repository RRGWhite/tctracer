test-class;tested-class;score
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory();opennlp.tools.langdetect.LanguageDetectorModel.getFactory();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9545454978942871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7982208728790283
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractTrainer.<init>();0.7972475290298462
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7889610528945923
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractEventTrainer.<init>();0.7614433169364929
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9545454978942871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7982208728790283
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractTrainer.<init>();0.7972475290298462
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7889610528945923
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractEventTrainer.<init>();0.7614433169364929
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8785814642906189
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.83030766248703
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();0.8300221562385559
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8160452246665955
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.7972504496574402
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.<init>(opennlp.tools.ml.model.DataReader);0.7817484140396118
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.<init>(opennlp.tools.doccat.DoccatModel);0.75
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.8681740164756775
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8624933362007141
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8624933362007141
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.8411391377449036
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9504825472831726
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8968623280525208
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8417980074882507
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractTrainer.<init>();0.8265178203582764
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8144566416740417
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.8064283728599548
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7700972557067871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9545454978942871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7982208728790283
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractTrainer.<init>();0.7972475290298462
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7889610528945923
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractEventTrainer.<init>();0.7614433169364929
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.8681740164756775
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8624933362007141
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8624933362007141
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.8411391377449036
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9504825472831726
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8968623280525208
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8417980074882507
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractTrainer.<init>();0.8265178203582764
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8144566416740417
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.8064283728599548
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7700972557067871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9545454978942871
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7982208728790283
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractTrainer.<init>();0.7972475290298462
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7889610528945923
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractEventTrainer.<init>();0.7614433169364929
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9090909957885742
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.855266809463501
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.8148627877235413
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8057994842529297
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7535543441772461
opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);1.0
opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample();opennlp.tools.langdetect.LanguageDetectorEvaluator.processSample(opennlp.tools.langdetect.LanguageSample);1.0
opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.8307105302810669
opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample();opennlp.tools.langdetect.LanguageDetectorEvaluator.getDocumentCount();0.75
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory();opennlp.tools.langdetect.LanguageDetectorModel.getFactory();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9504825472831726
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8968623280525208
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8417980074882507
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractTrainer.<init>();0.8265178203582764
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8144566416740417
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.8064283728599548
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7700972557067871
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.9999999403953552
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.checkModelType();0.8633156418800354
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();0.8240740299224854
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.9504825472831726
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8968623280525208
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8417980074882507
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractTrainer.<init>();0.8265178203582764
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8144566416740417
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.8064283728599548
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.7700972557067871
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.9999999403953552
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.<init>(java.io.File);0.9156378507614136
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.checkModelType();0.8240740299224854
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();0.8240740299224854
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8168723583221436
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelReader.<init>(java.io.File);0.7822194695472717
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel, java.io.File);0.7630478739738464
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.7568926215171814
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderFactory.create(java.lang.String, byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.util.SequenceCodec<java.lang.String>);1.0
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9557273387908936
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.model.BaseModel.serialize(java.io.File);0.9019899964332581
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.9019899964332581
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.8950044512748718
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderFactory.init(byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.util.SequenceCodec<java.lang.String>);0.886363685131073
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderModel.init(java.lang.Object, byte[], java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.String>, opennlp.tools.util.SequenceCodec<java.lang.String>);0.8251802921295166
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool.loadResources(java.io.File, java.io.File);0.8143276572227478
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.7910181283950806
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.PlainTextByLineStream.reset();0.7815266847610474
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderFactory.<init>();0.7727272510528564
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.7569675445556641
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.BioCodec.<init>();0.755532443523407
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getTagDictionary();1.0
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator();0.9230769872665405
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getSequenceValidator();0.9230769872665405
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.loadDefaultFeatureGeneratorBytes();0.9038462042808533
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8665429949760437
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.<init>(byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.postag.TagDictionary);0.8205128908157349
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSModel.getFactory();0.8002655506134033
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator(int);0.7692307829856873
opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining();opennlp.tools.parser.chunking.Parser.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.parser.Parse>, opennlp.tools.parser.HeadRules, opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.POSTaggerNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.POSTaggerNameFeatureGenerator.<init>(opennlp.tools.postag.POSModel);0.8571429252624512
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.treeinsert.Parser.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.parser.Parse>, opennlp.tools.parser.HeadRules, int, int);1.0
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.Parse.parseParse(java.lang.String);0.7692267894744873
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.treeinsert.Parser.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.parser.Parse>, opennlp.tools.parser.HeadRules, opennlp.tools.util.TrainingParameters);0.75
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerME.tag(java.lang.String[]);1.0
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerME.tag(java.lang.String[], java.lang.Object[]);0.75
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.util.AbstractEventStream.close();0.9999999403953552
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.ml.model.Event.getOutcome();0.9575761556625366
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.namefind.NameFinderEventStream.createEvents(opennlp.tools.namefind.NameSample);0.8119096755981445
opennlp.tools.cmdline.TokenNameFinderToolTest.run();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.956250011920929
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);0.8906249403953552
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.AbstractDataIndexer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8344744443893433
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.TwoPassDataIndexer.<init>();0.8333333730697632
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.namefind.TokenNameFinderCrossValidator.getFMeasure();1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9292179942131042
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, int);0.8897058963775635
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.namefind.TokenNameFinderCrossValidator.<init>(java.lang.String, java.lang.String, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);0.8627451658248901
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.postag.POSTaggerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.postag.POSTaggerFactory);1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.postag.POSTaggerFactory.<init>();0.8804756999015808
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.postag.WordTagSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8289625644683838
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.<init>();0.7718960046768188
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.7718960046768188
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.7718960046768188
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.BaseToolFactory.<init>();0.770612359046936
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.7546302080154419
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.7533276677131653
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.7510311007499695
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.postag.POSModel.<init>(java.io.InputStream);1.0
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.9831891059875488
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.7609668970108032
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.postag.POSModel.<init>(java.lang.String, opennlp.tools.ml.model.MaxentModel, int, java.util.Map<java.lang.String, java.lang.String>, opennlp.tools.postag.POSTaggerFactory);0.75
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.postag.POSModel.<init>(java.io.InputStream);1.0
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9883522987365723
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.9831891059875488
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.8406438827514648
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.7609668970108032
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.postag.POSModel.<init>(java.lang.String, opennlp.tools.ml.model.MaxentModel, int, java.util.Map<java.lang.String, java.lang.String>, opennlp.tools.postag.POSTaggerFactory);0.75
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.util.AbstractEventStream.close();0.9999999403953552
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.ml.model.Event.getOutcome();0.9575761556625366
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.namefind.NameFinderEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, java.lang.String, opennlp.tools.namefind.NameContextGenerator, opennlp.tools.util.SequenceCodec<java.lang.String>);0.876347005367279
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);0.8333333730697632
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.800000011920929
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[], java.lang.String[][]);0.75
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.800000011920929
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.find(java.lang.String[], java.lang.String[][]);0.75
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.setTagDictionary(opennlp.tools.postag.TagDictionary);0.9519517421722412
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSModel.getFactory();0.9150771498680115
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.getTagDictionary();0.9095652103424072
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.<init>();0.9042460918426514
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);0.8764917850494385
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.createTagDictionary(java.io.File);0.8426392078399658
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator();0.7629576325416565
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.getResources();0.7629576325416565
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.getFeatureGenerator();0.7584959268569946
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);0.8333333730697632
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.800000011920929
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[], java.lang.String[][]);0.75
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.namefind.NameFinderEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.namefind.NameFinderEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, java.lang.String, opennlp.tools.namefind.NameContextGenerator, opennlp.tools.util.SequenceCodec<java.lang.String>);1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.util.AbstractEventStream.close();0.9948055744171143
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.ml.model.Event.getOutcome();0.9526021480560303
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.namefind.NameFinderEventStream.createEvents(opennlp.tools.namefind.NameSample);0.8717949390411377
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.util.AbstractEventStream.<init>(opennlp.tools.util.ObjectStream<T>);0.7640363574028015
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.util.AbstractEventStream.read();0.7640363574028015
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, int);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.<init>(java.lang.String, java.lang.String, opennlp.tools.util.TrainingParameters, byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);0.8666666150093079
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.<init>(java.lang.String, java.lang.String, opennlp.tools.util.TrainingParameters, byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.util.SequenceCodec<java.lang.String>, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);0.8666666150093079
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8616384267807007
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.getFMeasure();0.8545454740524292
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.util.AbstractEventStream.close();0.9999999403953552
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.util.AbstractEventStream.read();0.9613376259803772
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.ml.model.Event.getOutcome();0.9575761556625366
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.namefind.NameFinderEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, java.lang.String, opennlp.tools.namefind.NameContextGenerator, opennlp.tools.util.SequenceCodec<java.lang.String>);0.876347005367279
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.namefind.NameFinderEventStream.createEvents(opennlp.tools.namefind.NameSample);0.8119096755981445
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);0.8906249403953552
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.8250000476837158
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.9000000357627869
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);0.8333333730697632
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.NameFinderME.find(java.lang.String[], java.lang.String[][]);0.75
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.8999999761581421
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.find(java.lang.String[], java.lang.String[][]);0.75
opennlp.tools.cmdline.CLITest.testHelpMessageOfTools();opennlp.tools.cmdline.CLI.getToolNames();1.0
opennlp.tools.cmdline.CLITest.testHelpMessageOfTools();opennlp.tools.cmdline.CLI.main(java.lang.String[]);0.9285714626312256
opennlp.tools.cmdline.CLITest.testToolParameterMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorME.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorME.sentPosDetect(java.lang.String);0.884615421295166
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.parse(java.io.InputStream);1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerModel.getFactory();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerFactory.getLanguageCode();0.9576590061187744
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.9186321496963501
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.9057661294937134
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerFactory.<init>(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8585907816886902
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8173123598098755
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.7917498350143433
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.tokenize.TokenizerFactory.<init>(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8571429252624512
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8156710267066956
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.9340834021568298
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getContextGenerator();0.8972116708755493
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.8916251063346863
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.8840432167053223
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.<init>(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8562431931495667
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getLanguageCode();0.8562431931495667
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getAbbreviationDictionary();0.8313342332839966
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.createArtifactMap();0.7555086612701416
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8757032155990601
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.getLanguageCode();0.8406750559806824
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.8279376029968262
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.<init>(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.8173230290412903
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.getContextGenerator();0.811177670955658
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.8006429076194763
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerFactory.getAbbreviationDictionary();0.7846300005912781
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.tokenize.TokenizerModel.<init>(java.io.InputStream);0.9070400595664978
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPTextDocument.parse(java.io.InputStream);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsAtMinimum1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsAtMinimum2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection3();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection4();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>();1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int, boolean);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[]);0.875
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(opennlp.tools.ml.maxent.quasinewton.Function);0.875
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.isConverged(opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult);0.7727272510528564
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.905255138874054
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, double);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7919238805770874
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>();1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int, boolean);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(opennlp.tools.ml.maxent.quasinewton.Function);0.875
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[]);0.75
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs();opennlp.tools.formats.nkjp.NKJPTextDocument.getParagraphs();1.0
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs();opennlp.tools.formats.nkjp.NKJPTextDocument.parse(java.io.InputStream);0.8999999761581421
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.doccat.DoccatFactory.getFeatureGenerators();0.8699972033500671
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.doccat.DoccatFactory.loadFeatureGenerators(java.lang.String);0.7788546681404114
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.doccat.DoccatFactory.<init>();0.7539976239204407
opennlp.tools.doccat.DocumentSampleTest.testEquals();opennlp.tools.doccat.DocumentSample.equals(java.lang.Object);1.0
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.doccat.DoccatFactory.<init>(opennlp.tools.doccat.FeatureGenerator[]);0.9279970526695251
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.doccat.DoccatFactory.getFeatureGenerators();0.9047970771789551
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.doccat.DoccatModel.getFactory();0.7999210357666016
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.doccat.DoccatFactory.loadFeatureGenerators(java.lang.String);0.795426070690155
opennlp.tools.doccat.DocumentSampleTest.testDocumentSampleSerDe();opennlp.tools.doccat.DocumentSample.getCategory();1.0
opennlp.tools.doccat.DocumentSampleTest.testDocumentSampleSerDe();opennlp.tools.doccat.DocumentSample.getText();0.9714285731315613
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[]);0.8946906328201294
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.8946906328201294
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DoccatFactory.<init>();0.8626496195793152
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();0.8135748505592346
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);0.8135748505592346
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.BaseToolFactory.<init>();0.7738410234451294
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.<init>();0.7606022357940674
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.7606022357940674
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.<init>(opennlp.tools.doccat.DoccatModel);0.75
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.namefind.TokenNameFinderEvaluator.<init>(opennlp.tools.namefind.TokenNameFinder, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.namefind.TokenNameFinderEvaluator.getFMeasure();0.9144384860992432
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8018469214439392
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.<init>();0.7513000965118408
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluator();opennlp.tools.chunker.ChunkerEvaluator.getFMeasure();0.8470990657806396
opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator();opennlp.tools.lemmatizer.LemmatizerEvaluator.getWordAccuracy();0.8397919535636902
opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator();opennlp.tools.lemmatizer.LemmatizerEvaluator.<init>(opennlp.tools.lemmatizer.Lemmatizer, opennlp.tools.lemmatizer.LemmatizerEvaluationMonitor[]);0.766233503818512
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.lemmatizer.LemmatizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.lemmatizer.LemmaSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.lemmatizer.LemmatizerFactory);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.lemmatizer.LemmatizerFactory.<init>();0.9191176295280457
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.lemmatizer.LemmaSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8869485855102539
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);0.7922183275222778
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);0.781623125076294
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.781623125076294
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.BaseToolFactory.<init>();0.770920991897583
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.7705678939819336
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();0.769132673740387
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.769132673740387
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.perceptron.PerceptronTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer, int);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9770858883857727
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9722248315811157
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);0.8845738172531128
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8845738172531128
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.perceptron.PerceptronTrainer.<init>();0.8541662693023682
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7821990251541138
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.perceptron.PerceptronTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer, int, boolean);0.7812494039535522
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals();opennlp.tools.ml.model.AbstractModel.equals(java.lang.Object);0.9999999403953552
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9925689697265625
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.PerceptronModelWriter.persist();0.9447468519210815
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.PerceptronModelReader.<init>(opennlp.tools.ml.model.DataReader);0.9171427488327026
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.BinaryPerceptronModelWriter.close();0.8952952027320862
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.PerceptronModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.8924452662467957
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.BinaryPerceptronModelReader.<init>(java.io.DataInputStream);0.8691345453262329
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.8420564532279968
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.BinaryPerceptronModelWriter.<init>(opennlp.tools.ml.model.AbstractModel, java.io.DataOutputStream);0.8220728635787964
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.PerceptronTrainer.validate();0.7936748266220093
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.model.AbstractModelReader.getModel();0.7861602902412415
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9562068581581116
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8619909882545471
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.8393037915229797
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.perceptron.PerceptronTrainer.validate();0.8213692307472229
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7685686349868774
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9112108945846558
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9079565405845642
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7987887263298035
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9112108945846558
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9079565405845642
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7987887263298035
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9886363744735718
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9311619400978088
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7623966932296753
opennlp.tools.cmdline.CLITest.testUnknownToolMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.namefind.TokenNameFinderCrossValidator.<init>(java.lang.String, java.lang.String, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, int);0.78125
opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory();opennlp.tools.chunker.ChunkerModel.getFactory();1.0
opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory();opennlp.tools.chunker.ChunkerFactory.<init>();0.8676875233650208
opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.7691258788108826
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.chunker.ChunkerModel.<init>(java.io.InputStream);1.0
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, boolean);0.7935036420822144
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, java.io.InputStream);0.7935036420822144
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);1.0
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.chunker.ChunkerModel.<init>(java.io.InputStream);0.9451752305030823
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.initializeFactory();0.8146714568138123
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.chunker.ChunkerModel.validateArtifactMap();0.7544819712638855
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ConllXPOSSampleStream.read();1.0
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ConllXPOSSampleStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.8484848737716675
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluStream.close();1.0
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluStream.read();0.9375
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluStream.<init>(opennlp.tools.util.InputStreamFactory);0.8333333730697632
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.util.PlainTextByLineStream.reset();0.8109848499298096
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluLemmaSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluPOSSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.postag.POSSample.parse(java.lang.String);0.8762701153755188
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluPOSSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>, opennlp.tools.formats.conllu.ConlluTagset);0.7619048357009888
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluTokenSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);0.8899511098861694
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluTokenSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>);0.7619048357009888
opennlp.tools.util.ParagraphStreamTest.testReset();opennlp.tools.util.ParagraphStream.read();1.0
opennlp.tools.util.ParagraphStreamTest.testReset();opennlp.tools.util.FilterObjectStream.reset();0.8694348335266113
opennlp.tools.util.ParagraphStreamTest.testReset();opennlp.tools.util.ParagraphStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.7777777910232544
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentenceSampleStream.read();0.9219337701797485
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentenceSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>, int);0.819496750831604
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.util.PlainTextByLineStream.reset();0.8109989762306213
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.sentdetect.SentenceSample.getDocument();0.771844744682312
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluTokenSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);0.8899511098861694
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluTokenSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>);0.7619048357009888
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluTokenSampleStream.read();0.963134765625
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluTokenSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>);0.8561198115348816
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.util.PlainTextByLineStream.reset();0.8387227058410645
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluPOSSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.postag.POSSample.parse(java.lang.String);0.8762701153755188
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluPOSSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>, opennlp.tools.formats.conllu.ConlluTagset);0.7619048357009888
opennlp.tools.util.ParagraphStreamTest.testSimpleReading();opennlp.tools.util.ParagraphStream.read();1.0
opennlp.tools.formats.ad.ADParagraphStreamTest.testSimpleReading();opennlp.tools.formats.ad.ADSentenceStream.read();1.0
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.read();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.close();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, boolean, boolean);0.9166666269302368
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.read();0.9166666269302368
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple();opennlp.tools.formats.ad.ADPOSSampleStream.close();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple();opennlp.tools.formats.ad.ADPOSSampleStream.read();0.8125
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME();opennlp.tools.formats.ad.ADPOSSampleStream.read();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.create(java.lang.String, java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);1.0
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.chunker.ChunkerFactory.getSequenceValidator();0.9760169386863708
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.chunker.ChunkerModel.getFactory();0.959309458732605
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.chunker.ChunkerFactory.getContextGenerator();0.9512835144996643
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.chunker.ChunkerFactory.<init>();0.8434714078903198
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.chunker.ChunkerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.chunker.ChunkSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.chunker.ChunkerFactory);1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.chunker.ChunkerFactory.<init>();0.8906610012054443
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.chunker.ChunkSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8893585205078125
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();0.772735595703125
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.772735595703125
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.767370343208313
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.7594180703163147
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.BaseToolFactory.<init>();0.7544765472412109
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.7518464922904968
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.typeSystemInit(org.apache.uima.cas.TypeSystem);1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.DictionaryNameFinder.find(org.apache.uima.cas.CAS, java.lang.String[]);0.9675824642181396
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.documentDone(org.apache.uima.cas.CAS);0.9064109325408936
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.process(org.apache.uima.cas.CAS);0.8979029059410095
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.8486821055412292
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.util.CasUtil.deserializeXmiCAS(org.apache.uima.cas.CAS, java.io.InputStream);0.7966446876525879
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.759347140789032
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.next();1.0
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.<init>(org.apache.uima.cas.CAS, org.apache.uima.cas.Type, org.apache.uima.cas.Type);0.8333333730697632
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.hasNext();0.7857142686843872
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.AnnotationIterator.next();0.7853261232376099
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.iterator();0.75
opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate();opennlp.tools.langdetect.LanguageDetectorCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.langdetect.LanguageSample>, int);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);1.0
opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary();opennlp.tools.postag.POSDictionary.create(java.io.InputStream);0.7916666269302368
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.equals(java.lang.Object);1.0
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.hashCode();1.0
opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);1.0
opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute();opennlp.tools.postag.POSDictionary.create(java.io.InputStream);0.8500000238418579
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.loadDefaultFeatureGeneratorBytes();0.9542782306671143
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.<init>(byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.postag.TagDictionary);0.9468807578086853
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getTagDictionary();0.9249658584594727
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSModel.getFactory();0.9235151410102844
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getPOSContextGenerator();0.8361957669258118
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.getResources();0.7989306449890137
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.getFeatureGenerator();0.7942585349082947
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getSequenceValidator();0.7651796936988831
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.createArtifactMap();0.7519347667694092
opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);1.0
opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary();opennlp.tools.postag.POSDictionary.create(java.io.InputStream);0.7916666269302368
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.<init>();1.0
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.<init>(boolean);1.0
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.equals(java.lang.Object);1.0
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.serialize(java.io.OutputStream);0.9444444179534912
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.put(java.lang.String, java.lang.String[]);0.8333333730697632
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.iterator();0.8125
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.create(java.io.InputStream);0.75
opennlp.tools.chunker.ChunkSampleTest.testNicePrint();opennlp.tools.chunker.ChunkSample.nicePrint();1.0
opennlp.tools.chunker.ChunkSampleTest.testNicePrint();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.75
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getTags();1.0
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getPreds();0.9375
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getSentence();0.8181818127632141
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.equals(java.lang.Object);1.0
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.getPreds();0.78125
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.getSentence();0.7727272510528564
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.getPhrasesAsSpanList();1.0
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);0.8049535155296326
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);0.8049535155296326
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.7894736528396606
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.getTags();0.7518796324729919
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.getSentence();1.0
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.8928571939468384
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.getPreds();0.8928571939468384
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.getTags();0.8367347121238708
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);0.7773109674453735
opennlp.tools.chunker.ChunkSampleTest.testEquals();opennlp.tools.chunker.ChunkSample.equals(java.lang.Object);1.0
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.parser.ChunkSampleStream.read();1.0
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.chunker.ChunkSample.getPreds();0.8694354295730591
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.chunker.ChunkSample.getTags();0.7542280554771423
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSampleStream.read();1.0
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.75
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.chunker.ChunkerEvaluator.getFMeasure();0.8704137206077576
opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator();opennlp.tools.cmdline.DetailedFMeasureListener.createReport(java.util.Locale);1.0
opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);0.9649916887283325
opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator();opennlp.tools.cmdline.chunker.ChunkerDetailedFMeasureListener.<init>();0.8433080315589905
opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator();opennlp.tools.cmdline.DetailedFMeasureListener.<init>();0.7976061105728149
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.getTags();1.0
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.getPhrasesAsSpanList();0.9824561476707458
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.getPreds();0.9671052694320679
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.getSentence();0.9601275324821472
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.DummyChunkSampleStream.read();0.949742317199707
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.9415204524993896
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.PlainTextByLineStream.reset();0.9003666639328003
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);0.8813209533691406
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);0.8813209533691406
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.cmdline.CLITest.testMainHelpMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFail();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCr();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCr();opennlp.tools.sentdetect.NewlineSentenceDetector.<init>();0.9166666865348816
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineLf();opennlp.tools.sentdetect.NewlineSentenceDetector.<init>();1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineLf();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);0.9500000476837158
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCrLf();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCrLf();opennlp.tools.sentdetect.NewlineSentenceDetector.<init>();0.9166666865348816
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFilter();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.formats.brat.BratDocumentParserTest.testParse();opennlp.tools.formats.brat.BratDocumentParser.parse(opennlp.tools.formats.brat.BratDocument);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readNoOverlap();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.util.Span.getEnd();0.7640558481216431
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenizerME.train(opennlp.tools.util.ObjectStream<opennlp.tools.tokenize.TokenSample>, opennlp.tools.tokenize.TokenizerFactory, opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenizerFactory.create(java.lang.String, java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.9296864867210388
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8910692930221558
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, java.lang.String);0.8910692930221558
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();0.7989329695701599
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.7989329695701599
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.7742582559585571
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.773963451385498
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.7734364867210388
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.758484959602356
opennlp.tools.namefind.NameSampleTest.testMissingType();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testMissingType();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.postag.POSSampleTest.testParseEmtpyTag();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyTag();opennlp.tools.postag.POSSample.getTags();0.8571428656578064
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.postag.WordTagSampleStream.read();1.0
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.tokenize.TokSpanEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.tokenize.TokenSample>, boolean);0.8170491456985474
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.tokenize.TokSpanEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.tokenize.TokenSample>, boolean, opennlp.tools.tokenize.TokenContextGenerator);0.8170491456985474
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.util.AbstractEventStream.close();0.7702593803405762
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.tokenize.TokSpanEventStream.createEvents(opennlp.tools.tokenize.TokenSample);0.7618430852890015
opennlp.tools.tokenize.SimpleTokenizerTest.testWordDotTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotationStream.read();1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotation.toString();0.8640483021736145
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotationStream.<init>(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.io.InputStream);0.8571429252624512
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.AnnotationConfiguration.<init>(java.util.Map<java.lang.String, java.lang.String>);0.8325323462486267
opennlp.tools.namefind.NameSampleDataStreamTest.testClearAdaptiveData();opennlp.tools.namefind.NameSampleDataStream.read();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testClearAdaptiveData();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();0.8658753037452698
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContext();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.util.Span.getStart();0.8913984298706055
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.util.Span.getEnd();0.7802873849868774
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.sentdetect.SentenceModel.getFactory();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.getEOSCharacters();0.8804836273193359
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8032481670379639
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.7646304965019226
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.7571910619735718
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8571429252624512
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8301822543144226
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.read();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.944444477558136
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes();opennlp.tools.namefind.NameSample.getNames();0.9999999403953552
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.9767816662788391
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes();opennlp.tools.namefind.NameSampleDataStream.read();0.7814253568649292
opennlp.tools.namefind.NameSampleTest.testTypeWithSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary();opennlp.tools.postag.POSTaggerME.buildNGramDictionary(opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>, int);1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.BratAnnotationStream.read();1.0
opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe();opennlp.tools.postag.POSSample.getSentence();0.9545454978942871
opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe();opennlp.tools.postag.POSSample.getTags();0.8571428656578064
opennlp.tools.namefind.RegexNameFinderFactoryTest.testPhoneNumber();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testPhoneNumber();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.9303722381591797
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.sentdetect.SentenceDetectorEvaluator.<init>(opennlp.tools.sentdetect.SentenceDetector, opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor[]);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.800143837928772
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.sentdetect.SentenceDetectorEvaluator.getFMeasure();0.7727272510528564
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.cmdline.sentdetect.SentenceEvaluationErrorListener.<init>(java.io.OutputStream);0.7534562349319458
opennlp.tools.postag.POSSampleTest.testParseEmtpyToken();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.sentdetect.SDEventStreamTest.testEventOutcomes();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.sentdetect.SDEventStreamTest.testEventOutcomes();opennlp.tools.sentdetect.SDEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.sentdetect.SentenceSample>, opennlp.tools.sentdetect.SDContextGenerator, opennlp.tools.sentdetect.EndOfSentenceScanner);0.8043777942657471
opennlp.tools.sentdetect.SDEventStreamTest.testEventOutcomes();opennlp.tools.sentdetect.SDEventStream.createEvents(opennlp.tools.sentdetect.SentenceSample);0.7500279545783997
opennlp.tools.tokenize.SimpleTokenizerTest.testWordNumericTokeniztation();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testEquals();opennlp.tools.postag.POSSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testEmail();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testEmail();opennlp.tools.util.Span.equals(java.lang.Object);0.9709023237228394
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar2();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar2();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.tokenize.TokenSampleStream.read();1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8333333730697632
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, java.lang.String);0.8333333730697632
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.7750425934791565
opennlp.tools.formats.muc.SgmlParserTest.testParse1();opennlp.tools.formats.muc.SgmlParser.parse(java.io.Reader, opennlp.tools.formats.muc.SgmlParser$ContentHandler);1.0
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator();opennlp.tools.langdetect.LanguageDetectorModel.getFactory();1.0
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator();opennlp.tools.langdetect.DummyFactory.MyContectGenerator.getContext(java.lang.CharSequence);0.9634263515472412
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator();opennlp.tools.langdetect.DummyFactory.getContextGenerator();0.9328789710998535
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>(opennlp.tools.tokenize.Tokenizer);1.0
opennlp.tools.namefind.NameSampleTest.testNestedNameSpans();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testNestedNameSpans();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.tokenize.WhitespaceTokenizerTest.testTokenizationOfStringWithoutTokens();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSampleStream.read();1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.8333333730697632
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, java.lang.String);0.8333333730697632
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSample.getText();0.7860316038131714
opennlp.tools.postag.POSSampleTest.testParse();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8603963255882263
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceDetectorFactory.getSDContextGenerator();0.8194250464439392
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceDetectorFactory.getEOSCharacters();0.8173764944076538
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8030365705490112
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceDetectorFactory.getEndOfSentenceScanner();0.7780975103378296
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.9999999403953552
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.TokenizerME.<init>(opennlp.tools.tokenize.TokenizerModel);0.8761372566223145
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.TokenizerME.train(opennlp.tools.util.ObjectStream<opennlp.tools.tokenize.TokenSample>, opennlp.tools.tokenize.TokenizerFactory, opennlp.tools.util.TrainingParameters);0.7885235548019409
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.TokenizerME.tokenizePos(java.lang.String);0.7765762209892273
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.sentdetect.SentenceSample>, opennlp.tools.sentdetect.SentenceDetectorFactory, opennlp.tools.util.TrainingParameters);0.9446903467178345
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.775073766708374
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getText();1.0
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.parseDocument(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.io.InputStream, java.io.InputStream);0.9307692050933838
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getId();0.9200000166893005
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getAnnotation(java.lang.String);0.8769230842590332
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getAnnotations();0.8500000238418579
opennlp.tools.namefind.RegexNameFinderFactoryTest.testURL();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameSampleTest.testWithTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.namefind.NameSample.getNames();0.9999999403953552
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.9767816662788391
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.util.Span.getType();0.7869821786880493
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.namefind.NameSampleDataStream.read();0.7814253568649292
opennlp.tools.namefind.RegexNameFinderFactoryTest.testMgrs();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testMgrs();opennlp.tools.util.Span.equals(java.lang.Object);0.7711178064346313
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.util.Span.getEnd();0.7640558481216431
opennlp.tools.util.SpanTest.testTrim();opennlp.tools.util.Span.trim(java.lang.CharSequence);1.0
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.postag.POSEvaluator.<init>(opennlp.tools.postag.POSTagger, opennlp.tools.postag.POSTaggerEvaluationMonitor[]);1.0
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8113758563995361
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.8373349905014038
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.util.Span.equals(java.lang.Object);0.8071452975273132
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.namefind.NameSample.getNames();0.7582690119743347
opennlp.tools.util.StringUtilTest.testNoBreakSpace();opennlp.tools.util.StringUtil.isWhitespace(char);1.0
opennlp.tools.util.StringUtilTest.testNoBreakSpace();opennlp.tools.util.StringUtil.isWhitespace(int);1.0
opennlp.tools.postag.POSSampleTest.testParseWithError();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.util.AbstractEventStream.close();1.0
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.postag.POSSampleEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>);0.992677628993988
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.postag.POSSampleEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>, opennlp.tools.postag.POSContextGenerator);0.992677628993988
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.ml.model.Event.getOutcome();0.9533313512802124
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.postag.POSSample.parse(java.lang.String);0.866921067237854
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.postag.POSSampleEventStream.createEvents(opennlp.tools.postag.POSSample);0.8017780780792236
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.util.AbstractEventStream.<init>(opennlp.tools.util.ObjectStream<T>);0.7709205746650696
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.util.AbstractEventStream.read();0.7709205746650696
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.namefind.NameSample.getNames();0.9999999403953552
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.namefind.NameSampleDataStream.read();0.9767816662788391
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.846544086933136
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar1();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar1();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.getSentence();0.7727272510528564
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.9999999403953552
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9659300446510315
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerME.<init>(opennlp.tools.tokenize.TokenizerModel);0.8761372566223145
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerME.train(opennlp.tools.util.ObjectStream<opennlp.tools.tokenize.TokenSample>, opennlp.tools.tokenize.TokenizerFactory, opennlp.tools.util.TrainingParameters);0.8542338013648987
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerME.tokenizePos(java.lang.String);0.806444525718689
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerModel.getMaxentModel();0.7639034986495972
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.sentdetect.SentenceDetectorEvaluator.<init>(opennlp.tools.sentdetect.SentenceDetector, opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor[]);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.sentdetect.SentenceDetectorEvaluator.getFMeasure();0.9090909361839294
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.800143837928772
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.cmdline.sentdetect.SentenceEvaluationErrorListener.<init>(java.io.OutputStream);0.7534562349319458
opennlp.tools.tokenize.WhitespaceTokenizerTest.testOneToken();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.tokenize.SimpleTokenizerTest.testWhitespaceTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>(opennlp.tools.tokenize.Tokenizer);1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.postag.POSEvaluator.<init>(opennlp.tools.postag.POSTagger, opennlp.tools.postag.POSTaggerEvaluationMonitor[]);1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8113758563995361
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSampleStream.read();1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSample.getText();0.7860316038131714
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.75
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, java.lang.String);0.75
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.BratDocument.parseDocument(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.io.InputStream, java.io.InputStream);1.0
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.BratDocument.getAnnotation(java.lang.String);0.9338842630386353
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.BratDocument.<init>(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.formats.brat.BratAnnotation>);0.7520660758018494
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.namefind.NameSampleTypeFilter.read();0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.getEOSCharacters();0.9034161567687988
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8603963255882263
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.getSDContextGenerator();0.8522019982337952
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.getEndOfSentenceScanner();0.8379511833190918
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8030365705490112
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.getAbbreviationDictionary();0.7984477877616882
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContextWithAbbreviations();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContextWithAbbreviations();opennlp.tools.sentdetect.DefaultSDContextGenerator.<init>(java.util.Set<java.lang.String>, char[]);0.75
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.namefind.NameSample.getNames();0.8125
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.namefind.NameSample.parse(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.read();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.944444477558136
opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter();opennlp.tools.namefind.NameSampleTypeFilter.read();0.75
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.trim(java.lang.CharSequence);1.0
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.<init>(int, int);0.75
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.75
opennlp.tools.tokenize.WhitespaceTokenizerTest.testWhitespaceTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.tokenize.SimpleTokenizerTest.testWordWithOtherTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage();opennlp.tools.langdetect.LanguageDetectorME.predictLanguage(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage();opennlp.tools.langdetect.Language.getLang();0.7854747176170349
opennlp.tools.langdetect.LanguageSampleTest.testHash();opennlp.tools.langdetect.LanguageSample.hashCode();1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.NegLLComputeTask.call();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.GradientComputeTask.call();0.9731526374816895
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, boolean);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, int, boolean);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);0.886363685131073
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);0.9323650598526001
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.9323650598526001
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9308509826660156
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.8208413124084473
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.905255138874054
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, double);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8068338632583618
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.7919238805770874
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9999999403953552
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.9288244843482971
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8138324022293091
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.784189760684967
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9228813648223877
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8912779092788696
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.readPpaFile(java.lang.String);0.799691915512085
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(boolean);0.75
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, boolean);0.75
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, int, boolean);0.75
opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault();opennlp.tools.util.featuregen.CharacterNgramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault();opennlp.tools.util.featuregen.CharacterNgramFeatureGenerator.<init>();0.7916666269302368
opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault();opennlp.tools.util.featuregen.CharacterNgramFeatureGenerator.<init>(int, int);0.7916666269302368
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.getText();1.0
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.<init>(opennlp.tools.tokenize.Detokenizer, java.lang.String[]);0.9722222089767456
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.8974359035491943
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.isMergeToRight(opennlp.tools.tokenize.Detokenizer$DetokenizationOperation);0.875
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.toString();0.875
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.isMergeToLeft(opennlp.tools.tokenize.Detokenizer$DetokenizationOperation);0.8525640368461609
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);0.7956082820892334
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);1.0
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization();opennlp.tools.tokenize.DetokenizationDictionary.serialize(java.io.OutputStream);1.0
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization();opennlp.tools.tokenize.DetokenizationDictionary.init(java.io.InputStream);0.921875
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization();opennlp.tools.tokenize.DetokenizationDictionary.<init>(java.io.InputStream);0.78125
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.create(java.lang.String, java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);0.942727267742157
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.<init>(java.io.InputStream, int);0.9272727370262146
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.stupidBackoff(opennlp.tools.util.StringList);0.7965035438537598
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);0.7848194241523743
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);1.0
opennlp.tools.ngram.NGramModelTest.testSerialize();opennlp.tools.ngram.NGramModel.serialize(java.io.OutputStream);1.0
opennlp.tools.ngram.NGramModelTest.testSerialize();opennlp.tools.ngram.NGramModel.size();1.0
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.dictionary.Dictionary.size();1.0
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);0.9631079435348511
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.toDictionary(boolean);0.9631079435348511
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.iterator();0.9029136896133423
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);0.7674766182899475
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.setCount(opennlp.tools.util.StringList, int);0.7674766182899475
opennlp.tools.dictionary.DictionaryTest.testSerialization();opennlp.tools.dictionary.Dictionary.serialize(java.io.OutputStream);1.0
opennlp.tools.dictionary.DictionaryTest.testSerialization();opennlp.tools.dictionary.Dictionary.<init>(java.io.InputStream);0.78125
opennlp.tools.dictionary.DictionaryTest.testSerialization();opennlp.tools.dictionary.Dictionary.equals(java.lang.Object);0.78125
opennlp.tools.postag.POSDictionaryTest.testToString();opennlp.tools.postag.POSDictionary.toString();1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);0.75
opennlp.tools.util.AbstractEventStreamTest.testStandardCase();opennlp.tools.util.AbstractEventStream.close();1.0
opennlp.tools.util.AbstractEventStreamTest.testStandardCase();opennlp.tools.util.AbstractEventStream.read();0.9166666269302368
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.AbstractEventStream.read();1.0
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.AbstractEventStream.close();0.7666666507720947
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);1.0
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.chunker.ChunkerModel.<init>(java.io.InputStream);0.9451752305030823
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.initializeFactory();0.8702700734138489
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.chunker.ChunkerModel.validateArtifactMap();0.8291010856628418
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.checkArtifactMap();0.7833973169326782
opennlp.tools.formats.brat.BratNameSampleStreamTest.emptySample();opennlp.tools.formats.brat.BratDocumentStream.reset();1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.emptySample();opennlp.tools.formats.brat.SegmenterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.8387388586997986
opennlp.tools.formats.brat.BratNameSampleStreamTest.emptySample();opennlp.tools.formats.brat.BratNameSampleStream.<init>(opennlp.tools.sentdetect.SentenceDetector, opennlp.tools.tokenize.Tokenizer, opennlp.tools.util.ObjectStream<opennlp.tools.formats.brat.BratDocument>, java.util.Set<java.lang.String>);0.7922677993774414
opennlp.tools.util.eval.CrossValidationPartitionerTest.test3FoldCV();opennlp.tools.util.eval.CrossValidationPartitioner.TrainingSampleStream.read();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.test3FoldCV();opennlp.tools.util.eval.CrossValidationPartitioner.TestSampleStream.read();0.9987071752548218
opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet();opennlp.tools.util.eval.CrossValidationPartitioner.hasNext();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet();opennlp.tools.util.eval.CrossValidationPartitioner.next();0.9479166269302368
opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet();opennlp.tools.util.CollectionObjectStream.reset();0.8032729625701904
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.hasNext();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.<init>(java.util.Collection<E>, int);0.8888888955116272
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.<init>(opennlp.tools.util.ObjectStream<E>, int);0.8888888955116272
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.next();0.7916666269302368
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9999999403953552
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8315951824188232
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8281397223472595
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISModel.eval(int[], float[], double[], opennlp.tools.ml.model.EvalParameters);0.8760581612586975
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISModel.eval(java.lang.String[]);0.8760581612586975
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISModel.eval(java.lang.String[], float[]);0.8760581612586975
opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9999999403953552
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8315951824188232
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8281397223472595
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9999999403953552
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8315951824188232
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8281397223472595
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9999999403953552
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.8315951824188232
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8281397223472595
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.trainModel(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.setGaussianSigma(double);0.9684913158416748
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9190976619720459
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.915976881980896
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7856574058532715
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9868149161338806
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9851669669151306
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.949724018573761
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.URLInputStreamFactory.<init>(java.net.URL);0.9034321904182434
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.<init>();0.8480441570281982
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.FootballEventStream.<init>();0.8416987657546997
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.7912472486495972
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7696301937103271
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.Context.getParameters();0.7546515464782715
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.FootballEventStream.reset();0.7505252957344055
opennlp.tools.ngram.NGramUtilsTest.testGetNGrams();opennlp.tools.ngram.NGramUtils.getNGrams(opennlp.tools.util.StringList, int);1.0
opennlp.tools.postag.DefaultPOSContextGeneratorTest.dictionaryMatch();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.util.StringList.size();0.847903847694397
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);0.8184335231781006
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.util.StringList.getToken(int);0.8079083561897278
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.util.StringList.toString();0.8079083561897278
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.util.StringList.<init>(java.lang.String);0.7679128646850586
opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.9090909361839294
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);0.8790581822395325
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.8735336661338806
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.util.StringList.size();0.855902910232544
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.util.StringList.toString();0.855902910232544
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.util.StringList.getToken(int);0.8119078874588013
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.7952231168746948
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.util.StringList.<init>(java.lang.String);0.7679128646850586
opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();opennlp.tools.util.StringList.<init>(java.lang.String);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.781338632106781
opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.9090909361839294
opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.<init>(java.lang.String);opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);1.0
opennlp.tools.util.StringList.<init>(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.9880456328392029
opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);opennlp.tools.util.StringList.<init>(java.lang.String);1.0
opennlp.tools.postag.DefaultPOSContextGeneratorTest.noDictionaryMatch();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
[ASSERT] org.junit.Assert.assertArrayEquals;opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
[ASSERT] org.junit.Assert.assertArrayEquals;opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);1.0
[ASSERT] org.junit.Assert.assertArrayEquals;opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();0.9144384860992432
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();null.size();0.7870417237281799
opennlp.tools.util.StringListTest.testCompareToIgnoreCase();opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseSensitivity();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseSensitivity();opennlp.tools.util.Span.getEnd();0.8913984298706055
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseSensitivity();opennlp.tools.util.Span.getStart();0.8913984298706055
opennlp.tools.ngram.NGramModelTest.testToDictionary();opennlp.tools.ngram.NGramModel.toDictionary();1.0
opennlp.tools.ngram.NGramModelTest.testToDictionary();opennlp.tools.ngram.NGramModel.toDictionary(boolean);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.9649122953414917
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.8684210777282715
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();null.contains(java.lang.Object);0.8606831431388855
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8968803882598877
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.asStringSet();0.856113076210022
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.7847703099250793
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred();opennlp.tools.util.Span.getEnd();0.8913984298706055
opennlp.tools.dictionary.DictionaryTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.asStringSet();0.927272617816925
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSet();null.size();0.8919806480407715
opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen();opennlp.tools.util.Span.getEnd();0.7640558481216431
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8333333730697632
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.asStringSet();0.8181817531585693
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);0.7805881500244141
opennlp.tools.dictionary.DictionaryTest.testEquals();opennlp.tools.dictionary.Dictionary.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryTest.testParseOneEntryPerLine();opennlp.tools.dictionary.Dictionary.parseOneEntryPerLine(java.io.Reader);1.0
opennlp.tools.dictionary.DictionaryTest.testParseOneEntryPerLine();opennlp.tools.dictionary.Dictionary.size();0.875
opennlp.tools.dictionary.DictionaryTest.testParseOneEntryPerLine();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.8125
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();null.size();0.925640344619751
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8993710279464722
opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseLongerEntry();opennlp.tools.namefind.DictionaryNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseLongerEntry();opennlp.tools.util.Span.length();0.9724346995353699
opennlp.tools.ml.model.OnePassDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.OnePassRealValueDataIndexer.getValues();1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8528070449829102
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithoutCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int, java.lang.String[], java.lang.String[], java.lang.Object[]);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithoutCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.<init>(int, opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.9166666865348816
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.<init>(int, opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int, java.lang.String[], java.lang.String[], java.lang.Object[]);0.9500000476837158
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>();0.7807682752609253
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>(boolean);0.7807682752609253
opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(java.io.InputStream);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray();opennlp.tools.lemmatizer.LemmatizerME.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.langdetect.LanguageSampleTest.testToString();opennlp.tools.langdetect.LanguageSample.toString();1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages();opennlp.tools.langdetect.LanguageDetectorME.predictLanguages(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages();opennlp.tools.langdetect.Language.getLang();0.7854747176170349
opennlp.tools.langdetect.LanguageTest.emptyLanguage();opennlp.tools.langdetect.Language.<init>(java.lang.String);1.0
opennlp.tools.langdetect.LanguageTest.emptyLanguage();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);1.0
opennlp.tools.langdetect.LanguageTest.emptyConfidence();opennlp.tools.langdetect.Language.getConfidence();1.0
opennlp.tools.langdetect.LanguageSampleTest.testEquals();opennlp.tools.langdetect.LanguageSample.equals(java.lang.Object);1.0
opennlp.tools.langdetect.LanguageTest.testHash();opennlp.tools.langdetect.Language.hashCode();1.0
opennlp.tools.langdetect.LanguageSampleTest.testLanguageSampleSerDe();opennlp.tools.langdetect.LanguageSample.getLanguage();1.0
opennlp.tools.langdetect.LanguageSampleTest.testLanguageSampleSerDe();opennlp.tools.langdetect.LanguageSample.equals(java.lang.Object);0.9583333730697632
opennlp.tools.langdetect.LanguageSampleTest.testLanguageSampleSerDe();opennlp.tools.langdetect.Language.equals(java.lang.Object);0.8352265954017639
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.LanguageSample.<init>(opennlp.tools.langdetect.Language, java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.Language.<init>(java.lang.String);0.8768932819366455
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);0.8768932819366455
opennlp.tools.langdetect.LanguageTest.nonEmptyConfidence();opennlp.tools.langdetect.Language.getConfidence();1.0
opennlp.tools.langdetect.LanguageTest.testToString();opennlp.tools.langdetect.Language.toString();1.0
opennlp.tools.langdetect.LanguageTest.testEquals();opennlp.tools.langdetect.Language.equals(java.lang.Object);1.0
opennlp.tools.langdetect.LanguageTest.emptyLanguageConfidence();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);1.0
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.read();1.0
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.reset();1.0
opennlp.tools.langdetect.LanguageSampleTest.testConstructor();opennlp.tools.langdetect.LanguageSample.getContext();1.0
opennlp.tools.langdetect.LanguageSampleTest.testConstructor();opennlp.tools.langdetect.LanguageSample.<init>(opennlp.tools.langdetect.Language, java.lang.CharSequence);0.8333333730697632
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.9880324006080627
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.AbstractEventTrainer.getDataIndexer(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9746779799461365
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.maxent.GISTrainer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.966614305973053
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.963271975517273
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.defaultParams();0.9049334526062012
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);0.8839460015296936
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8839460015296936
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8839460015296936
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.8806336522102356
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8555774688720703
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8076981902122498
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7850959300994873
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.maxent.GISTrainer.isSortAndMerge();0.761986255645752
opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore();opennlp.tools.chunker.ChunkerME.topKSequences(java.lang.String[], java.lang.String[], double);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore();opennlp.tools.util.Sequence.getProbs();0.8453827500343323
opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan();opennlp.tools.chunker.ChunkerME.chunkAsSpans(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan();opennlp.tools.chunker.ChunkerME.chunk(java.lang.String[], java.lang.String[]);0.7727272510528564
opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages();opennlp.tools.langdetect.LanguageDetectorME.getSupportedLanguages();1.0
opennlp.tools.chunker.ChunkerMETest.testChunkAsArray();opennlp.tools.chunker.ChunkerME.chunk(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbArray();opennlp.tools.chunker.ChunkerME.topKSequences(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbArray();opennlp.tools.util.Sequence.getProbs();0.899057924747467
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleList();opennlp.tools.chunker.ChunkSample.<init>(java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleList();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);0.8970588445663452
opennlp.tools.cmdline.CLITest.testUnknownFileMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.getCode();1.0
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.<init>(int);0.8888888955116272
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.<init>(int, java.lang.String);0.8888888955116272
opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel();opennlp.tools.cmdline.namefind.TokenNameFinderTool.<init>();1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getDimension();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.9462365508079529
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();0.9666666984558105
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testInitialSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testInitialSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();0.9500000476837158
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.8333333730697632
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.TokenizerEvaluator.<init>(opennlp.tools.tokenize.Tokenizer, opennlp.tools.tokenize.TokenizerEvaluationMonitor[]);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8201438188552856
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.TokenizerEvaluator.getFMeasure();0.7727272510528564
opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences();opennlp.tools.tokenize.TokenSample.getText();1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.DetokenizerEvaluator.<init>(opennlp.tools.tokenize.Detokenizer, opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener[]);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8130009770393372
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.DetokenizerEvaluator.getFMeasure();0.7727272510528564
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener.<init>(java.io.OutputStream);0.75
opennlp.tools.tokenize.TokenSampleTest.testEquals();opennlp.tools.tokenize.TokenSample.equals(java.lang.Object);1.0
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.getText();1.0
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.<init>(java.lang.String, opennlp.tools.util.Span[]);0.8500000238418579
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.7692307829856873
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.DetokenizerEvaluator.<init>(opennlp.tools.tokenize.Detokenizer, opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener[]);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.DetokenizerEvaluator.getFMeasure();0.9090909361839294
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8130009770393372
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener.<init>(java.io.OutputStream);0.75
opennlp.tools.tokenize.TokenSampleTest.testTokenSampleSerDe();opennlp.tools.tokenize.TokenSample.getTokenSpans();1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.TokenizerEvaluator.<init>(opennlp.tools.tokenize.Tokenizer, opennlp.tools.tokenize.TokenizerEvaluationMonitor[]);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.TokenizerEvaluator.getFMeasure();0.9090909361839294
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8201438188552856
opennlp.tools.util.SpanTest.testStartsWith();opennlp.tools.util.Span.startsWith(opennlp.tools.util.Span);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getFMeasure();1.0
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.<init>();0.9583333730697632
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getRecallScore();0.8928571939468384
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getPrecisionScore();0.8235294222831726
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.updateScores(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getRecallScore();0.9285714626312256
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getFMeasure();0.9090909361839294
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getPrecisionScore();0.8529411554336548
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.<init>();0.75
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.TokenNameFinderEvaluator.<init>(opennlp.tools.namefind.TokenNameFinder, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8128553628921509
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.TokenNameFinderEvaluator.getFMeasure();0.7727272510528564
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.<init>();0.7651167511940002
opennlp.tools.util.eval.FMeasureTest.testMerge();opennlp.tools.util.eval.FMeasure.mergeInto(opennlp.tools.util.eval.FMeasure);1.0
opennlp.tools.util.VersionTest.testParse();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.equals(java.lang.Object);0.75
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9527343511581421
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.AbstractDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>, java.util.Map<java.lang.String, java.lang.Integer>);0.7955367565155029
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.AbstractDataIndexer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7955367565155029
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7550545930862427
opennlp.tools.util.featuregen.StringPatternTest.testContainsHyphen();opennlp.tools.util.featuregen.StringPattern.containsHyphen();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsHyphen();opennlp.tools.util.featuregen.StringPattern.recognize(java.lang.String);0.7777777910232544
opennlp.tools.util.featuregen.FeatureGeneratorUtilTest.test();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testRandomVocabularyAndSentence();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testEmptyVocabularyProbability();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testEmptyVocabularyProbability();opennlp.tools.languagemodel.NGramLanguageModel.<init>();0.8125
opennlp.tools.languagemodel.NgramLanguageModelTest.testEmptyVocabularyProbability();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);0.8125
opennlp.tools.ml.BeamSearchTest.testBestSequence();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceZeroLengthInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceZeroLengthInput();opennlp.tools.ml.BeamSearch.<init>(int, opennlp.tools.ml.model.MaxentModel);0.75
opennlp.tools.ml.BeamSearchTest.testBestSequenceZeroLengthInput();opennlp.tools.ml.BeamSearch.<init>(int, opennlp.tools.ml.model.MaxentModel, int);0.75
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.ml.BeamSearch.<init>(int, opennlp.tools.ml.model.MaxentModel);0.75
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.ml.BeamSearch.<init>(int, opennlp.tools.ml.model.MaxentModel, int);0.75
opennlp.tools.util.featuregen.StringPatternTest.testIsAllHiragana();opennlp.tools.util.featuregen.StringPattern.isAllHiragana();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllKatakana();opennlp.tools.util.featuregen.StringPattern.isAllKatakana();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLetters();opennlp.tools.util.featuregen.StringPattern.isAllLetter();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testEnd();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsComma();opennlp.tools.util.featuregen.StringPattern.containsComma();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllDigit();opennlp.tools.util.featuregen.StringPattern.isAllDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsLetters();opennlp.tools.util.featuregen.StringPattern.containsLetters();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsLetters();opennlp.tools.util.featuregen.StringPattern.recognize(java.lang.String);0.7777777910232544
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testEnd();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isAllCapitalLetter();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testGenWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testGenWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.StringPatternTest.testContainsDigit();opennlp.tools.util.featuregen.StringPattern.containsDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsInitialCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isInitialCapitalLetter();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testOnlyLetterTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testOnlyLetterTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);0.8571428656578064
opennlp.tools.util.featuregen.StringPatternTest.testContainsPeriod();opennlp.tools.util.featuregen.StringPattern.containsPeriod();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsPeriod();opennlp.tools.util.featuregen.StringPattern.recognize(java.lang.String);0.7777777910232544
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testDigits();opennlp.tools.util.featuregen.StringPattern.digits();1.0
opennlp.tools.util.featuregen.FeatureGeneratorUtilTest.testJapanese();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.StringPatternTest.testContainsSlash();opennlp.tools.util.featuregen.StringPattern.containsSlash();1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testNoWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testNextOfBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testNextOfBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLowerCaseLetter();opennlp.tools.util.featuregen.StringPattern.isAllLowerCaseLetter();1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.StringUtilTest.testIsEmptyWithNullString();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample();opennlp.tools.namefind.NameSample.getNames();0.8272082209587097
opennlp.tools.formats.EvalitaNameSampleStreamTest.testReset();opennlp.tools.formats.EvalitaNameSampleStream.reset();1.0
opennlp.tools.formats.EvalitaNameSampleStreamTest.testReset();opennlp.tools.formats.EvalitaNameSampleStream.read();0.75
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.namefind.NameSample.getNames();0.8272082209587097
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample();opennlp.tools.formats.Conll02NameSampleStream.read();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample();opennlp.tools.namefind.NameSample.getNames();0.9253652095794678
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample();opennlp.tools.formats.Conll02NameSampleStream.<init>(opennlp.tools.formats.Conll02NameSampleStream$LANGUAGE, opennlp.tools.util.InputStreamFactory, int);0.7777777910232544
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.formats.Conll02NameSampleStream.read();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.namefind.NameSample.getNames();0.9253652095794678
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.formats.Conll02NameSampleStream.<init>(opennlp.tools.formats.Conll02NameSampleStream$LANGUAGE, opennlp.tools.util.InputStreamFactory, int);0.7777777910232544
opennlp.tools.formats.Conll02NameSampleStreamTest.testReset();opennlp.tools.formats.Conll02NameSampleStream.reset();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testReset();opennlp.tools.formats.Conll02NameSampleStream.read();0.75
opennlp.tools.util.StringUtilTest.testIsEmpty();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testReset();opennlp.tools.formats.Conll03NameSampleStream.reset();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testReset();opennlp.tools.formats.Conll03NameSampleStream.read();0.75
opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample();opennlp.tools.formats.NameFinderCensus90NameStream.read();1.0
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.formats.EvalitaNameSampleStream.read();1.0
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.namefind.NameSample.getNames();0.9926497936248779
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.formats.EvalitaNameSampleStream.<init>(opennlp.tools.formats.EvalitaNameSampleStream$LANGUAGE, opennlp.tools.util.InputStreamFactory, int);0.8666666150093079
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.namefind.NameSample.getSentence();0.7562862038612366
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.letsmt.LetsmtDocument.parse(java.io.InputStream);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleArray();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleArray();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.9722222089767456
opennlp.tools.chunker.ChunkSampleTest.testToString();opennlp.tools.chunker.ChunkSample.toString();1.0
opennlp.tools.chunker.ChunkSampleTest.testParameterValidation();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);1.0
opennlp.tools.chunker.ChunkSampleTest.testParameterValidation();opennlp.tools.chunker.ChunkSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.8541666865348816
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWithoutWindow();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWithoutWindow();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.779645562171936
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.875
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.779645562171936
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowSizeOne();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowSizeOne();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.779645562171936
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtEndOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtEndOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtEndOfSentence();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.779645562171936
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testForCorrectFeatures();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getDeprel();1.0
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getId();0.9500000476837158
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getLemma();0.921875
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.<init>(java.lang.String);0.875
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getDeps();0.8214285969734192
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getHead();0.8214285969734192
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getMisc();0.8214285969734192
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getFeats();0.78125
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getPosTag(opennlp.tools.formats.conllu.ConlluTagset);0.75
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionaryInsensitive();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionarySensitive();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.mean();1.0
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.count();0.800000011920929
opennlp.tools.ml.TrainerFactoryTest.testIsSequenceTrainerTrue();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testParameters();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.75
opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator();opennlp.tools.util.featuregen.CachedFeatureGenerator.getCachedFeatureGenerator();0.8049713969230652
opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.7955390810966492
opennlp.tools.langdetect.DefaultLanguageDetectorContextGeneratorTest.extractContext();opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(java.lang.CharSequence);1.0
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.ngram.NGramUtils.calculateTrigramLinearInterpolationProbability(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>, java.lang.Double, java.lang.Double, java.lang.Double);1.0
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.util.StringList.<init>(java.lang.String[]);0.7899162769317627
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.ngram.NGramUtils.calculateBigramMLProbability(java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);0.7662991285324097
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.ngram.NGramUtils.calculateTrigramMLProbability(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable<opennlp.tools.util.StringList>);0.7611663937568665
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.ngram.NGramUtils.calculateUnigramMLProbability(java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);0.7611663937568665
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.ngram.NGramUtils.calculateTrigramLinearInterpolationProbability(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>, java.lang.Double, java.lang.Double, java.lang.Double);1.0
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.util.StringList.<init>(java.lang.String[]);0.7899162769317627
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.ngram.NGramUtils.calculateBigramMLProbability(java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);0.7662991285324097
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.ngram.NGramUtils.calculateTrigramMLProbability(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable<opennlp.tools.util.StringList>);0.7611663937568665
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.ngram.NGramUtils.calculateUnigramMLProbability(java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);0.7611663937568665
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.clearAdaptiveData();0.8529411554336548
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.<init>();0.8333333730697632
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.updateAdaptiveData(java.lang.String[], java.lang.String[]);0.8333333730697632
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testNotEnoughSentences();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.reset();1.0
opennlp.tools.util.SequenceTest.testToString();opennlp.tools.util.Sequence.toString();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream.read();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream.<init>(opennlp.tools.util.ObjectStream<byte[]>);0.8484848737716675
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.parser.Parse.getCoveredText();0.7969906330108643
opennlp.tools.parser.ParseTest.testGetTagNodes();opennlp.tools.parser.Parse.getTagNodes();1.0
opennlp.tools.parser.ParseTest.testGetTagNodes();opennlp.tools.parser.Parse.getType();0.8571428656578064
opennlp.tools.parser.PosSampleStreamTest.testConvertParseToPosSample();opennlp.tools.parser.PosSampleStream.read();1.0
opennlp.tools.dictionary.DictionaryTest.testToString();opennlp.tools.dictionary.Dictionary.toString();1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded();opennlp.uima.dictionary.DictionaryResourceImpl.getDictionary();1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.9790314435958862
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded();opennlp.tools.dictionary.Dictionary.asStringSet();0.8593379259109497
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded();opennlp.tools.dictionary.Dictionary.toString();0.8034809827804565
opennlp.tools.convert.FileToStringSampleStreamTest.readFileTest();opennlp.tools.formats.convert.FileToStringSampleStream.read();1.0
opennlp.tools.convert.FileToStringSampleStreamTest.readFileTest();opennlp.tools.formats.convert.FileToStringSampleStream.readFile(java.io.File, java.nio.charset.Charset);0.75
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheHits();0.8500000238418579
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheMisses();0.8181818127632141
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);0.7916666269302368
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714626312256
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheMisses();0.8181818127632141
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheHits();0.800000011920929
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.Cache.<init>(int);0.7765811681747437
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);0.7577874660491943
opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream();opennlp.tools.parser.ParseSampleStream.read();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testReset();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testReset();opennlp.tools.util.PlainTextByLineStream.read();0.75
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.close();0.875
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.8125
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.read();0.8125
opennlp.tools.cmdline.TokenNameFinderToolTest.usage();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.usage();opennlp.tools.cmdline.namefind.TokenNameFinderTool.getHelp();0.9285714626312256
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeSpace();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeChar();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.getTags();0.7857142686843872
opennlp.tools.ngram.NGramModelTest.testCutoff2();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd1();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testToDictionary1();opennlp.tools.ngram.NGramModel.toDictionary(boolean);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigram();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigram();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);0.75
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigramProbability();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigramProbability();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);0.9166666269302368
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigramProbability();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);0.7777777910232544
opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison();opennlp.tools.languagemodel.LanguageModelTestUtils.getPerplexity(opennlp.tools.languagemodel.LanguageModel, java.util.Collection<java.lang.String[]>, int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);0.75
opennlp.tools.ngram.NGramModelTest.testCutoff1();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(java.lang.String[]);0.9109697937965393
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);0.8594594597816467
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.8130630254745483
opennlp.tools.ngram.NGramModelTest.testZeroGetCount();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testZeroGetCount();opennlp.tools.ngram.NGramModel.size();0.75
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);1.0
opennlp.tools.ngram.NGramModelTest.testNumberOfGrams();opennlp.tools.ngram.NGramModel.numberOfGrams();1.0
opennlp.tools.ngram.NGramModelTest.testAdd();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testAdd3();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd3();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);0.75
opennlp.tools.ngram.NGramModelTest.testAdd2();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd2();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);0.75
opennlp.tools.ngram.NGramModelTest.testZeroGetCount2();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testZeroGetCount2();opennlp.tools.ngram.NGramModel.size();0.75
opennlp.tools.namefind.BilouCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BilouCodec.createSequenceValidator();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testToString();opennlp.tools.util.eval.CrossValidationPartitioner.toString();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent();opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream.read();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent();opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream.<init>(opennlp.tools.util.ObjectStream<byte[]>);0.8571429252624512
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.FileEventStream.close();0.9999999403953552
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.RealValueFileEventStream.<init>(java.lang.String);0.8928158283233643
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7901771664619446
opennlp.tools.util.ObjectStreamUtilsTest.buildStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.util.ObjectStreamUtilsTest.buildStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(java.util.Collection<T>);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.concatenateObjectStream(java.util.Collection<opennlp.tools.util.ObjectStream<T>>);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.concatenateObjectStream(opennlp.tools.util.ObjectStream<T>[]);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.8931623697280884
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.formats.muc.DocumentSplitterStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.formats.muc.DocumentSplitterStream.read();0.7727272510528564
opennlp.tools.namefind.BilouCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeEmpty();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodePairFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testhHashCode();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.parser.ParseTest.testParseClone();opennlp.tools.parser.Parse.clone();1.0
opennlp.tools.parser.ParseTest.testParseClone();opennlp.tools.parser.Parse.parseParse(java.lang.String);0.800000011920929
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.sentdetect.SentenceSample.getDocument();0.9696970582008362
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.sentdetect.SentenceSample.<init>(java.lang.CharSequence, opennlp.tools.util.Span[]);0.9333333969116211
opennlp.tools.parser.ParseTest.testGetText();opennlp.tools.parser.Parse.getText();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);0.8333333730697632
opennlp.tools.namefind.BioCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.parser.ParseTest.testToHashCode();opennlp.tools.parser.Parse.hashCode();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeTripleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.util.SpanTest.testContainsWithHigherIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithHigherIntersect();opennlp.tools.util.Span.<init>(int, int);0.8333333730697632
opennlp.tools.util.SpanTest.testContainsWithHigherIntersect();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.8333333730697632
opennlp.tools.parser.ParseTest.testShow();opennlp.tools.parser.Parse.show(java.lang.StringBuffer);1.0
opennlp.tools.sentdetect.SentenceSampleTest.testInvalidSpansFailFast();opennlp.tools.sentdetect.SentenceSample.<init>(java.lang.CharSequence, opennlp.tools.util.Span[]);1.0
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.namefind.NameSample.getSentence();0.8680351972579956
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpanNoType();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.chunker.ChunkSampleTest.testPhraseAsSpan();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.util.SpanTest.testContainsWithEqual();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithEqual();opennlp.tools.util.Span.<init>(int, int);0.8333333730697632
opennlp.tools.util.SpanTest.testContainsWithEqual();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.8333333730697632
opennlp.tools.util.SpanTest.testToString();opennlp.tools.util.Span.toString();1.0
opennlp.tools.namefind.NameSampleTest.testNoTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.util.SpanTest.testCompareToLower();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testCompareToEquals();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithLowerIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithLowerIntersect();opennlp.tools.util.Span.<init>(int, int);0.8333333730697632
opennlp.tools.util.SpanTest.testContainsWithLowerIntersect();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.8333333730697632
opennlp.tools.sentdetect.SentenceSampleTest.testEquals();opennlp.tools.sentdetect.SentenceSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameFinderMETest.testDropOverlappingSpans();opennlp.tools.namefind.NameFinderME.dropOverlappingSpans(opennlp.tools.util.Span[]);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsSameType();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.eval.FMeasureTest.testPrecision();opennlp.tools.util.eval.FMeasure.precision(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.formats.ad.ADSentenceSampleStreamTest.testSentences();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testSentenceSampleSerDe();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testSentenceSampleSerDe();opennlp.tools.sentdetect.SentenceSample.getDocument();0.8030303120613098
opennlp.tools.util.SpanTest.testCompareToHigher();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.7834430932998657
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.7834430932998657
opennlp.tools.namefind.BioCodecTest.testDecodePairFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.toString();0.9087372422218323
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.getEnd();0.7783025503158569
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.getStart();0.7783025503158569
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testEquals();opennlp.tools.parser.Parse.equals(java.lang.Object);1.0
opennlp.tools.util.eval.FMeasureTest.testRecall();opennlp.tools.util.eval.FMeasure.recall(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);0.8333333730697632
opennlp.tools.formats.ad.ADNameSampleStreamTest.testNames();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.BioCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testContains();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.parser.ParseTest.testToString();opennlp.tools.parser.Parse.toString();1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.toString();0.8888888359069824
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.getEnd();0.774109423160553
opennlp.tools.util.SpanTest.testCompareToEqualsNullType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.parseParse(java.lang.String);1.0
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.equals(java.lang.Object);0.8333333730697632
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.encodeToken(java.lang.String);0.7727272510528564
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.parseParse(java.lang.String, opennlp.tools.parser.GapLabeler);0.75
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.show(java.lang.StringBuffer);0.75
opennlp.tools.namefind.BioCodecTest.testEncodeSingleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.8333333730697632
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);0.8333333730697632
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.8333333730697632
opennlp.tools.util.SpanTest.testCompareToEqualsNullType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.7666666507720947
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);0.7666666507720947
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.7666666507720947
opennlp.tools.namefind.NameSampleTest.testEquals();opennlp.tools.namefind.NameSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.util.SpanTest.testEquals();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.SpanTest.testGetStart();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.util.eval.FMeasureTest.testCountTruePositives();opennlp.tools.util.eval.FMeasure.countTruePositives(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.SpanTest.testCrosses();opennlp.tools.util.Span.crosses(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testIntersects();opennlp.tools.util.Span.intersects(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testIntersects();opennlp.tools.util.Span.<init>(int, int);0.75
opennlp.tools.util.SpanTest.testIntersects();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.75
opennlp.tools.util.TrainingParametersTest.testGetParameters();opennlp.tools.util.TrainingParameters.getParameters(java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testGetParameters();opennlp.tools.util.TrainingParameters.getSettings();0.7727272510528564
opennlp.tools.ngram.NGramGeneratorTest.emptyTest();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateLargerWindowThanListTest();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest1();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest3();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest4();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest2();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndNotSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterOther();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueCannotBeFirstOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testOtherIsAlwaysAValidOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndNotSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testStartIsAlwaysAValidOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.lang.String, java.lang.String);0.75
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.<init>(java.nio.file.Path);1.0
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.<init>(morfologik.stemming.Dictionary);1.0
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.builder.MorfologikDictionayBuilder.build(java.nio.file.Path);0.8598560094833374
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.lang.String, java.lang.String);0.75
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.compareTo(opennlp.tools.util.Sequence);1.0
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.getProbs();0.78125
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.getOutcomes();0.7727272510528564
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.<init>();0.75
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.<init>(opennlp.tools.util.Sequence);0.75
opennlp.tools.util.SequenceTest.testAddMethod();opennlp.tools.util.Sequence.add(java.lang.String, double);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer<?>>, org.w3c.dom.Element);0.75
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.SpanTest.testGetEnd();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testEquals();opennlp.tools.lemmatizer.LemmaSample.equals(java.lang.Object);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testLemmaSampleSerDe();opennlp.tools.lemmatizer.LemmaSample.getLemmas();1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testLemmaSampleSerDe();opennlp.tools.lemmatizer.LemmaSample.getTags();0.8214285373687744
opennlp.tools.lemmatizer.LemmaSampleTest.testLemmaSampleSerDe();opennlp.tools.lemmatizer.LemmaSample.getTokens();0.75
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.getTokens();1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.949999988079071
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.getTags();0.8857142925262451
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.validateArguments(int, int, int);0.8176470994949341
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.getLemmas();0.800000011920929
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testUseAllTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testUseAllTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();0.75
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testUseAllTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);0.75
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.9000000357627869
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testNull();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testNull();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.7727272510528564
opennlp.tools.util.StringList.getToken(int);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.8666666746139526
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.8333333730697632
opennlp.tools.util.StringList.toString();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.toString();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.7569756507873535
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.96875
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.9649122953414917
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.8684210777282715
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();null.contains(java.lang.Object);0.8606831431388855
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();0.9144384860992432
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();null.size();0.7870417237281799
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCode();null.hasNext();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.asStringSet();0.9937027096748352
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();0.7910352945327759
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8968803882598877
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.asStringSet();0.856113076210022
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.7847703099250793
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();null.size();0.925640344619751
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8993710279464722
opennlp.tools.dictionary.DictionaryTest.testHashCode();opennlp.tools.dictionary.Dictionary.hashCode();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.asStringSet();0.8181817531585693
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);0.7805881500244141
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();null.hasNext();0.8429371118545532
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8316152095794678
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.7654639482498169
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();null.hasNext();0.8429371118545532
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.8316152095794678
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.<init>(boolean);0.7654639482498169
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.asStringSet();0.927272617816925
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSet();null.size();0.8919806480407715
opennlp.tools.dictionary.DictionaryTest.testLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.875
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCode();null.hasNext();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.asStringSet();0.9937027096748352
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();0.7910352945327759
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm();1.0
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm(java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.defaultParams();1.0
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.algorithm();0.8095238208770752
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);0.8095238208770752
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String);0.8095238208770752
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.8416770696640015
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.$Proxy10.getEncoding();0.7613787055015564
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, double);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String, boolean);0.75
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String, double);0.75
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, java.lang.String, int);0.75
opennlp.tools.ngram.NGramModelTest.testInvalidFormat();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);1.0
opennlp.tools.util.model.ByteArraySerializerTest.testSerialization();opennlp.tools.util.model.ByteArraySerializer.serialize(byte[], java.io.OutputStream);1.0
opennlp.tools.util.model.ByteArraySerializerTest.testSerialization();opennlp.tools.util.model.ByteArraySerializer.<init>();0.78125
opennlp.tools.util.model.ByteArraySerializerTest.testSerialization();opennlp.tools.util.model.ByteArraySerializer.create(java.io.InputStream);0.78125
opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testInvalidTrainer();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.7728410363197327
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.$Proxy10.getEncoding();0.7613787055015564
opennlp.tools.ml.ArrayMathTest.testL1Norm();opennlp.tools.ml.ArrayMath.l1norm(double[]);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);1.0
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSimpleDict();opennlp.tools.tokenize.DetokenizationDictionary.getOperation(java.lang.String);1.0
opennlp.tools.cmdline.ArgumentParserTest.testZeroMethods();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testZeroMethods();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<?>[]);0.75
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsUsage();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsUsage();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<?>[]);0.75
opennlp.tools.cmdline.ArgumentParserTest.testInvalidReturnType();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testInvalidReturnType();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<?>[]);0.75
opennlp.tools.cmdline.ArgumentParserTest.testInvalidMethodName();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testInvalidMethodName();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<?>[]);0.75
opennlp.tools.ngram.NGramUtilsTest.testNgramMLProbability();opennlp.tools.ngram.NGramUtils.calculateNgramMLProbability(opennlp.tools.util.StringList, java.lang.Iterable<opennlp.tools.util.StringList>);1.0
opennlp.tools.ngram.NGramUtilsTest.testTrigramMLProbability();opennlp.tools.ngram.NGramUtils.calculateTrigramMLProbability(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable<opennlp.tools.util.StringList>);1.0
opennlp.tools.ngram.NGramUtilsTest.testBigramMLProbability();opennlp.tools.ngram.NGramUtils.calculateBigramMLProbability(java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);1.0
opennlp.tools.util.SequenceTest.testCompareTo();opennlp.tools.util.Sequence.compareTo(opennlp.tools.util.Sequence);1.0
opennlp.tools.ml.TrainerFactoryTest.testEventTrainerValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testIsSequenceTrainerFalse();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testBuiltInValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.<init>(java.io.InputStream);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.<init>(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.getSettings();0.7727272510528564
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.<init>(java.util.Map<java.lang.String, java.lang.String>);0.75
opennlp.tools.ml.model.RealValueFileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.FileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();1.0
opennlp.tools.ml.model.FileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.<init>();1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.9000000357627869
opennlp.tools.doccat.NGramFeatureGeneratorTest.testNull();opennlp.tools.doccat.NGramFeatureGenerator.<init>();1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testNull();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.util.featuregen.InSpanGeneratorTest.test();opennlp.tools.util.featuregen.InSpanGenerator.<init>(java.lang.String, opennlp.tools.namefind.TokenNameFinder);1.0
opennlp.tools.util.featuregen.InSpanGeneratorTest.test();opennlp.tools.util.featuregen.InSpanGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest2();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest3();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest1();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.lemmatizer.DictionaryLemmatizerTest.testForNullPointerException();opennlp.tools.lemmatizer.DictionaryLemmatizer.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.lemmatizer.DictionaryLemmatizerTest.testForNullPointerException();opennlp.tools.lemmatizer.DictionaryLemmatizer.lemmatize(java.lang.String, java.lang.String);0.75
opennlp.tools.lemmatizer.LemmaSampleTest.testParameterValidation();opennlp.tools.lemmatizer.LemmaSample.validateArguments(int, int, int);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testParameterValidation();opennlp.tools.lemmatizer.LemmaSample.<init>(java.lang.String[], java.lang.String[], java.lang.String[]);0.8541666865348816
opennlp.tools.lemmatizer.LemmaSampleTest.testToString();opennlp.tools.lemmatizer.LemmaSample.toString();1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan2();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan1();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan3();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.util.StringListTest.testIterator();opennlp.tools.util.StringList.iterator();1.0
opennlp.tools.util.StringUtilTest.testToLowerCase();opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.TokenFeatureGeneratorTest.testLowerCase();opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsZeroArguments();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsZeroArguments();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9411764144897461
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsMissingEncoding();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsMissingEncoding();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.8235293626785278
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsOneArgument();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsOneArgument();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9117646813392639
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsExtraArgument();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsExtraArgument();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9117646813392639
opennlp.tools.util.normalizer.NumberCharSequenceNormalizerTest.normalize();opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceWithValidator();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceWithValidator();opennlp.tools.ml.BeamSearch.<init>(int, opennlp.tools.ml.model.MaxentModel, int);0.75
opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization();opennlp.tools.parser.lang.en.HeadRules.serialize(java.io.Writer);1.0
opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization();opennlp.tools.parser.lang.en.HeadRules.<init>(java.io.Reader);0.78125
opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization();opennlp.tools.parser.lang.en.HeadRules.equals(java.lang.Object);0.78125
opennlp.tools.namefind.BioCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BioCodec.createSequenceValidator();1.0
opennlp.tools.ngram.NGramModelTest.testContains2();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testContains();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testRemove();opennlp.tools.ngram.NGramModel.remove(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeNoNames();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeNoNames();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.close();0.8999999761581421
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.close();0.9500000476837158
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.read();0.875
opennlp.tools.formats.DirectorySampleStreamTest.invalidDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.invalidDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.close();0.9000000357627869
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.resetDirectoryTest();opennlp.tools.formats.DirectorySampleStream.reset();1.0
opennlp.tools.formats.DirectorySampleStreamTest.resetDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();0.875
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.close();0.8999999761581421
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);0.8333333730697632
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest2();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest3();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest1();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest.testScanning();opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.<init>(char[]);1.0
opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest.testScanning();opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.getPositions(java.lang.String);0.875
opennlp.tools.ml.ArrayMathTest.testInvL2Norm();opennlp.tools.ml.ArrayMath.invL2norm(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testInvL2Norm();opennlp.tools.ml.ArrayMath.l2norm(double[]);0.75
opennlp.tools.ml.ArrayMathTest.testL2Norm();opennlp.tools.ml.ArrayMath.l2norm(double[]);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeUrl();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeEmail();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testNext();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.normalizer.EmojiCharSequenceNormalizerTest.normalizeEmoji();opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringListTest.testGetToken();opennlp.tools.util.StringList.getToken(int);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.<init>(java.lang.String);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.<init>(java.lang.String[]);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.getToken(int);0.875
opennlp.tools.util.StringListTest.testHashCode();opennlp.tools.util.StringList.hashCode();1.0
opennlp.tools.util.StringListTest.testEquals();opennlp.tools.util.StringList.equals(java.lang.Object);1.0
opennlp.tools.util.StringListTest.testToString();opennlp.tools.util.StringList.toString();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindMatchingPatternWithoutMatchingTokenBounds();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindMatchingPatternWithoutMatchingTokenBounds();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);0.8333333730697632
opennlp.tools.util.featuregen.TokenFeatureGeneratorTest.test();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.featuregen.TokenFeatureGeneratorTest.test();opennlp.tools.util.featuregen.TokenFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.SpanTest.testEqualsWithNull();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.clearAdaptiveData();0.8529411554336548
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.<init>();0.8333333730697632
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.updateAdaptiveData(java.lang.String[], java.lang.String[]);0.8333333730697632
opennlp.tools.util.VersionTest.testParseInvalidVersion2();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseInvalidVersion();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeEmpty();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testUnigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.test12gram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.test13gram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize1();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize2();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testBigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testBigram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.9000000357627869
opennlp.tools.doccat.NGramFeatureGeneratorTest.testTrigram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testTrigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);0.9166666865348816
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getValues();1.0
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getOutcome();0.8214285373687744
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getContext();0.7571429014205933
opennlp.tools.ml.model.EventTest.testWithValues();opennlp.tools.ml.model.Event.getValues();1.0
opennlp.tools.ml.model.EventTest.testNullOutcome();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);1.0
opennlp.tools.ml.model.EventTest.testNullOutcome();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);1.0
opennlp.tools.ml.model.EventTest.testNullContext();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);1.0
opennlp.tools.ml.model.EventTest.testNullContext();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);1.0
opennlp.tools.util.SpanTest.testContainsInt();opennlp.tools.util.Span.contains(int);1.0
opennlp.tools.util.SpanTest.testContainsInt();opennlp.tools.util.Span.<init>(int, int);0.8333333730697632
opennlp.tools.util.SpanTest.testContainsInt();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.8333333730697632
opennlp.tools.util.SpanTest.testLength();opennlp.tools.util.Span.length();1.0
opennlp.tools.util.SpanTest.testStartLargerThanEnd();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.util.SpanTest.testStartLargerThanEnd();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.util.SpanTest.testTooSmallEnd();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.util.SpanTest.testTooSmallEnd();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.util.SpanTest.testTooSmallStart();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.util.SpanTest.testTooSmallStart();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testCheckMergedContractions();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testSize();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.ml.ArrayMathTest.testToIntArray();opennlp.tools.ml.ArrayMath.toIntArray(java.util.List<java.lang.Integer>);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProduct();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProductDoubleNaN();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.lemmatizer.DictionaryLemmatizerMultiTest.testForNullPointerException();opennlp.tools.lemmatizer.DictionaryLemmatizer.lemmatize(java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.tools.ml.ArrayMathTest.testToDoubleArray();opennlp.tools.ml.ArrayMath.toDoubleArray(java.util.List<java.lang.Double>);1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullLang();opennlp.tools.langdetect.LanguageSample.<init>(opennlp.tools.langdetect.Language, java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.noFeaturesTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesSuccessiveTokensTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest1();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest3();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest2();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest4();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ml.ArrayMathTest.testLogSumOfExps();opennlp.tools.ml.ArrayMath.logSumOfExps(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testMax();opennlp.tools.ml.ArrayMath.max(double[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartContinue();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartContinueOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleStart();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityContinueOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityMultiClass();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityRepeated();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityBadTag();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleContinue();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityEmpty();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.util.ext.ExtensionLoaderTest.testLoadingStringGenerator();opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(java.lang.Class<T>, java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByStart();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByStart();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByOutside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByInside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOutsideFollowedByOutside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings();1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings(java.lang.String);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeHashtag();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeRT();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeLaugh();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeUser();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeFace();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringUtilTest.testToUpperCase();opennlp.tools.util.StringUtil.toUpperCase(java.lang.CharSequence);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityEmpty();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityUnitOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesStart();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityWrongClass();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityBadTag();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesContinue();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityMultiClass();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinue();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException2();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException1();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmax();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
null.>>> TEST START <<< |;opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);1.0
null.>>> TEST START <<< |;opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);1.0
null.>>> TEST START <<< |;opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();1.0
null.>>> TEST START <<< |;opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();1.0
null.>>> TEST START <<< |;opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
null.>>> TEST START <<< |;opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
null.>>> TEST START <<< |;opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);1.0
null.>>> TEST START <<< |;opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringList.<init>(java.lang.String);1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringList.getToken(int);1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringList.size();1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringList.toString();1.0
null.>>> TEST START <<< |;opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
null.>>> TEST END <<<;opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);1.0
null.>>> TEST END <<<;opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);1.0
null.>>> TEST END <<<;opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();1.0
null.>>> TEST END <<<;opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();1.0
null.>>> TEST END <<<;opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
null.>>> TEST END <<<;opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
null.>>> TEST END <<<;opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);1.0
null.>>> TEST END <<<;opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
null.>>> TEST END <<<;opennlp.tools.util.StringList.<init>(java.lang.String);1.0
null.>>> TEST END <<<;opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);1.0
null.>>> TEST END <<<;opennlp.tools.util.StringList.getToken(int);1.0
null.>>> TEST END <<<;opennlp.tools.util.StringList.size();1.0
null.>>> TEST END <<<;opennlp.tools.util.StringList.toString();1.0
null.>>> TEST END <<<;opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
