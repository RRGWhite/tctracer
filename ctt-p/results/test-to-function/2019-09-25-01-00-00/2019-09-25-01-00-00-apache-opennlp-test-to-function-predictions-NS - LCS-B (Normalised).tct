test-class;tested-class;score
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testCorrectFactory();opennlp.tools.langdetect.LanguageDetectorModel.getFactory();1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.checkModelType();0.7499999403953552
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testPlainTextModel();opennlp.tools.ml.model.AbstractModel.getNumOutcomes();0.625
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.sortedScoreMap(java.lang.String[]);0.800000011920929
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.getBestCategory(double[]);0.746666669845581
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.6222222447395325
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DoccatFactory.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DoccatModel.getFactory();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerContextGenerator.<init>(opennlp.tools.doccat.FeatureGenerator[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.<init>(opennlp.tools.doccat.DoccatModel);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.categorize(java.lang.String[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.util.BaseToolFactory.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.util.TrainingParameters.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.util.Version.toString();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DoccatFactory.getFeatureGenerators();0.5600000023841858
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.5600000023841858
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7499999403953552
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes1();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.75
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes3();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9999999403953552
opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.7826086282730103
opennlp.tools.langdetect.LanguageDetectorMETest.testLoadFromSerialized();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.6428571343421936
opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample();opennlp.tools.langdetect.LanguageDetectorEvaluator.processSample(opennlp.tools.langdetect.LanguageSample);1.0
opennlp.tools.langdetect.LanguageDetectorEvaluatorTest.processSample();opennlp.tools.util.eval.Evaluator.evaluateSample(T);1.0
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactory();opennlp.tools.langdetect.LanguageDetectorModel.getFactory();1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes4();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.checkModelType();1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.model.AbstractModel.getDataStructures();0.875
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.model.AbstractModel.getNumOutcomes();0.875
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();0.875
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();0.875
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);0.75
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractEventTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.AbstractTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getValues();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.6666666865348816
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6547619104385376
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6111111044883728
opennlp.tools.ml.naivebayes.NaiveBayesSerializedCorrectnessTest.testNaiveBayes2();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5641025900840759
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.checkModelType();1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.constructModel();1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainModel(opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.AbstractModel.getNumOutcomes();0.8571429252624512
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.AbstractModel.getDataStructures();0.7142857909202576
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters();0.6428571939468384
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.AbstractEventTrainer.<init>();0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.AbstractTrainer.<init>();0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.AbstractDataIndexer.getNumTimesEventsSeen();0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.AbstractModelReader.<init>(java.io.File);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.AbstractModelWriter.<init>();0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.BinaryFileDataReader.<init>(java.io.InputStream);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelReader.<init>(java.io.File);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.BinaryNaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel, java.io.File);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelReader.<init>(java.io.File);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.<init>(opennlp.tools.ml.model.AbstractModel);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesTrainer.<init>();0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.util.TrainingParameters.getBooleanParameter(java.lang.String, boolean);0.5714285969734192
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.5714285969734192
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.model.Context.getOutcomes();1.0
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool.loadResources(java.io.File, java.io.File);0.8000000715255737
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.8000000715255737
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.FileUtil.deleteDirectory(java.io.File);0.8000000715255737
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.model.BaseModel.serialize(java.io.File);0.8000000715255737
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.8000000715255737
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderModel.isModelValid(opennlp.tools.ml.model.MaxentModel);0.699999988079071
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.BioCodec.<init>();0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderFactory.create(java.lang.String, byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.util.SequenceCodec<java.lang.String>);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.PlainTextByLineStream.reset();0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.TrainingParameters.<init>();0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.6000000238418579
opennlp.tools.namefind.TokenNameFinderModelTest.testNERWithPOSModel();opennlp.tools.namefind.TokenNameFinderFactory.getSequenceCodec();0.5625
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.loadDefaultFeatureGeneratorBytes();1.0
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator();0.869135856628418
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSModel.getFactory();0.790123462677002
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getSequenceValidator();0.790123462677002
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.postag.POSTaggerFactory.getTagDictionary();0.790123462677002
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6320987939834595
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory();opennlp.tools.ml.model.Context.getOutcomes();0.5530864596366882
opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining();opennlp.tools.parser.ParserTestUtil.openTestTrainingData();1.0
opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.699999988079071
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator(int);1.0
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSTaggerFactory.getSequenceValidator();0.8999999761581421
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSTaggerFactory.getTagDictionary();0.8235294222831726
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.POSTaggerNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8235294222831726
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSModel.getPosSequenceModel();0.7368420958518982
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.model.BaseModel.getManifestProperty(java.lang.String);0.7368420958518982
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7058823704719543
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSTaggerFactory.createFeatureGenerators();0.6521739363670349
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.ml.model.Context.getOutcomes();0.5882353186607361
opennlp.tools.util.featuregen.POSTaggerNameFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.postag.POSModel.getFactory();0.5882353186607361
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.ParserTestUtil.openTestTrainingData();1.0
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6666666865348816
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.Parse.parseParse(java.lang.String);0.6666666865348816
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.ParserTestUtil.createTestHeadRules();0.6666666865348816
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);1.0
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);1.0
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerME.tag(java.lang.String[]);1.0
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerFactory.getPOSContextGenerator(int);0.9545454382896423
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSModel.getFactory();0.9000000357627869
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.ml.model.Context.getOutcomes();0.8181818723678589
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerFactory.getTagDictionary();0.75
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.ml.ArrayMath.argmax(double[]);0.6666666865348816
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.6666666865348816
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSModel.getPosSequenceModel();0.6315789222717285
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.util.model.BaseModel.getManifestProperty(java.lang.String);0.6315789222717285
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.944444477558136
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.6390977501869202
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeEmpty();opennlp.tools.util.AbstractEventStream.close();0.5714285969734192
opennlp.tools.cmdline.TokenNameFinderToolTest.run();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();0.9999999403953552
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.8863636255264282
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.Span.getType();0.8863636255264282
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.7065216898918152
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.BioCodec.<init>();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.namefind.TokenNameFinderModel.getFactory();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.BaseToolFactory.createManifestEntries();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.TrainingParameters.<init>();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.featuregen.AdditionalContextFeatureGenerator.<init>();0.5909090638160706
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);0.5909090638160706
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9895833730697632
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.AbstractDataIndexer.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.AbstractDataIndexer.getContexts();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.AbstractDataIndexer.init(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.TwoPassDataIndexer.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.BioCodec.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.DefaultNameContextGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.NameFinderEventStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, java.lang.String, opennlp.tools.namefind.NameContextGenerator, opennlp.tools.util.SequenceCodec<java.lang.String>);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.AbstractEventStream.<init>(opennlp.tools.util.ObjectStream<T>);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.Cache.<init>(int);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.Span.<init>(int, int);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.TrainingParameters.<init>(java.util.Map<java.lang.String, java.lang.String>);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.AdditionalContextFeatureGenerator.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.CachedFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator[]);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.OutcomePriorFeatureGenerator.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.<init>(boolean);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>();0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>(boolean);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);0.7916666865348816
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.7037037014961243
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.ml.model.Context.getOutcomes();1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.namefind.TokenNameFinderCrossValidator.getFMeasure();1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.6666666269302368
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6666666269302368
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.6666666269302368
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources();opennlp.tools.util.PlainTextByLineStream.reset();0.6666666269302368
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.postag.POSTaggerFactory.<init>();1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.postag.WordTagSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.BaseToolFactory.<init>();1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7058823704719543
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.625
opennlp.tools.postag.POSTaggerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.625
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);1.0
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.createBaseArtifactSerializers(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer>);0.6666666865348816
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.6666666865348816
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6666666865348816
opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron();opennlp.tools.util.model.BaseModel.getArtifactSerializer(java.lang.String);0.6111111044883728
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);1.0
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.8888888955116272
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6666666865348816
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.6111111044883728
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.createBaseArtifactSerializers(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer>);0.568965494632721
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.ml.model.Context.getOutcomes();0.555555522441864
opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent();opennlp.tools.util.model.BaseModel.getArtifactSerializer(java.lang.String);0.555555522441864
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.7619048357009888
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesWithType();opennlp.tools.util.AbstractEventStream.close();0.5714285969734192
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();0.9615384936332703
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.75
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.TokenNameFinderModel.getFactory();0.75
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.6578947305679321
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.6578947305679321
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.5681818127632141
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.setTagDictionary(opennlp.tools.postag.TagDictionary);0.9999999403953552
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.createTagDictionary(java.io.File);0.9090908765792847
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.morfologik.tagdict.MorfologikPOSTaggerFactory.getTagDictionary();0.9090908765792847
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSModel.getFactory();0.9090908765792847
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.model.Context.getOutcomes();0.6363636255264282
opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6363636255264282
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();0.9999999403953552
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.7464114427566528
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.util.Span.getType();0.7464114427566528
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.64462810754776
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.6220095753669739
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.616600751876831
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.559808611869812
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.ml.model.Event.getOutcome();0.875
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.875
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, int);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderCrossValidator.getFMeasure();0.875
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();0.8125
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.75
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.model.Context.getOutcomes();0.75
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.6875
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.625
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.625
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.5625
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.ml.model.Event.getOutcome();0.875
opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesTypeCantOverride();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.875
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.8571428060531616
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.Span.getType();0.8571428060531616
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();0.8241758346557617
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.ml.model.Context.getOutcomes();0.7142857313156128
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7142857313156128
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.7142857313156128
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.7142857313156128
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.BaseToolFactory.createManifestEntries();0.7142857313156128
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.6428571343421936
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.TokenNameFinderFactory.instantiateSequenceCodec(java.lang.String);0.6428571343421936
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.BioCodec.<init>();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.namefind.TokenNameFinderModel.getFactory();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.TrainingParameters.<init>();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.featuregen.AdditionalContextFeatureGenerator.<init>();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.model.BaseModel.getManifestProperty(java.lang.String);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.model.BaseModel.initializeFactory();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.model.BaseModel.setManifestProperty(java.lang.String, java.lang.String);0.5714285373687744
opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes();opennlp.tools.util.model.BaseModel.createBaseArtifactSerializers(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer>);0.5541871786117554
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.9359999895095825
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.7279999852180481
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.7279999852180481
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesTypeOverride();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.7279999852180481
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.BioCodec.<init>();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.<init>(opennlp.tools.namefind.TokenNameFinderModel);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.TokenNameFinderModel.getNameFinderSequenceModel();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.Span.<init>(int, int, java.lang.String);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.featuregen.AdditionalContextFeatureGenerator.<init>();1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.TokenNameFinderFactory.createContextGenerator();0.9848485589027405
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.ml.BeamSearch.getOutcomes();0.8333333730697632
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.ml.model.AbstractModel.getNumOutcomes();0.773809552192688
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.BioCodec.createSequenceValidator();0.7536232471466064
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.7222222685813904
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.DefaultNameContextGenerator.addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.6842105388641357
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.TokenNameFinderFactory.createSequenceCodec();0.6842105388641357
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.NameFinderME.train(java.lang.String, java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory);0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.TokenNameFinderFactory.create(java.lang.String, byte[], java.util.Map<java.lang.String, java.lang.Object>, opennlp.tools.util.SequenceCodec<java.lang.String>);0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.namefind.TokenNameFinderModel.getFactory();0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.PlainTextByLineStream.reset();0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.model.BaseModel.initializeFactory();0.6372549533843994
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.BaseToolFactory.createManifestEntries();0.6190476417541504
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.Version.currentVersion();0.6190476417541504
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.5777778029441833
opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.5652174353599548
opennlp.tools.cmdline.CLITest.testHelpMessageOfTools();opennlp.tools.cmdline.CLI.getToolNames();1.0
opennlp.tools.cmdline.CLITest.testToolParameterMessage();opennlp.tools.cmdline.TerminateToolException.getMessage();1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorME.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorME.sentPosDetect(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorFactory.isUseTokenEnd();0.699999988079071
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorFactory.getEndOfSentenceScanner();0.695652186870575
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorFactory.getSDContextGenerator();0.6857143044471741
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceDetectorME.getSentenceProbabilities();0.6666666865348816
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6000000238418579
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceModel.getFactory();0.6000000238418579
opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector();opennlp.tools.sentdetect.SentenceModel.getMaxentModel();0.6000000238418579
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.IrishSentenceBankSentence.getTokenSample();1.0
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.IrishSentenceBankSentence.getOriginal();0.8333333730697632
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.IrishSentenceBankSentence.getTranslation();0.8333333730697632
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.parse(java.io.InputStream);0.8333333730697632
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.getSentences();0.6666666865348816
opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocumentTest.testParsingSimpleDoc();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.6666666865348816
opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory();opennlp.tools.tokenize.TokenizerModel.getFactory();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.tokenize.TokenizerFactory.<init>(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.tokenize.TokenizerFactory.init(java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.tokenize.TokenizerModel.<init>(java.io.InputStream);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.util.BaseToolFactory.<init>();0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, boolean);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, java.io.InputStream);0.75
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.9999999403953552
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.9545454382896423
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.8484848737716675
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getContextGenerator();0.8484848737716675
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.tokenize.TokenizerFactory.getAbbreviationDictionary();0.7127272486686707
opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.6363636255264282
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.7499999403953552
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.tokenize.TokenizerModel.getFactory();0.699999988079071
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.5833333134651184
opennlp.tools.tokenize.TokenizerFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.5833333134651184
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.tokenize.TokenizerTestUtil.createSimpleMaxentTokenModel();0.9999999403953552
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.ml.model.Context.getOutcomes();0.9790209531784058
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.9790209531784058
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.7832167744636536
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.678787887096405
opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.5874125957489014
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPTextDocument.parse(java.io.InputStream);1.0
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPTextDocument.getDivtypes();0.800000011920929
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsAtMinimum1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength2();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength2();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.699999988079071
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection1();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection1();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.5999999642372131
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection2();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection2();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.5999999642372131
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsAtMinimum2();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection3();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection3();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection3();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.5999999642372131
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection4();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection4();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchFailsWithWrongDirection4();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.5999999642372131
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getFuncChangeRate();0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.625
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getNextPoint();0.625
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);0.625
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testRosenbrockFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.L2RegFunction.getDimension();0.625
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength1();opennlp.tools.ml.maxent.quasinewton.LineSearch.doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function, double[], opennlp.tools.ml.maxent.quasinewton.LineSearch$LineSearchResult, double);1.0
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength1();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.LineSearchTest.testLineSearchDeterminesSaneStepLength1();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getStepSize();0.699999988079071
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.6363636255264282
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getFuncChangeRate();0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getGradAtNext();0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getInitialObject(double, double[], double[]);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>();0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.<init>(double, double, int, int, int, boolean);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.L2RegFunction.getDimension();0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(opennlp.tools.ml.maxent.quasinewton.Function);0.75
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getNextPoint();0.625
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult.getValueAtNext();0.625
opennlp.tools.ml.maxent.quasinewton.QNMinimizerTest.testQuadraticFunction();opennlp.tools.ml.maxent.quasinewton.QNMinimizer.L2RegFunction.gradientAt(double[]);0.625
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs();opennlp.tools.formats.nkjp.NKJPTextDocument.getParagraphs();1.0
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.7499999403953552
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.doccat.DoccatModel.getFactory();0.699999988079071
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.5833333134651184
opennlp.tools.doccat.DoccatFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.5833333134651184
opennlp.tools.doccat.DocumentSampleTest.testEquals();opennlp.tools.doccat.DocumentSample.equals(java.lang.Object);1.0
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.ml.model.Context.getOutcomes();1.0
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.9166666865348816
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.doccat.DoccatModel.getFactory();0.8250000476837158
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6111111044883728
opennlp.tools.doccat.DoccatFactoryTest.testCustom();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.550000011920929
opennlp.tools.doccat.DocumentSampleTest.testDocumentSampleSerDe();opennlp.tools.doccat.DocumentSample.getCategory();1.0
opennlp.tools.doccat.DocumentSampleTest.testDocumentSampleSerDe();opennlp.tools.doccat.DocumentSample.getText();0.5999999642372131
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DoccatFactory.<init>();0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[]);0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.BaseToolFactory.<init>();0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.util.TrainingParameters.<init>();0.8999999761581421
opennlp.tools.doccat.DocumentCategorizerMETest.insufficientTestData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.5625
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.sortedScoreMap(java.lang.String[]);0.800000011920929
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.getBestCategory(double[]);0.746666669845581
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.746666669845581
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.6222222447395325
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DoccatFactory.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DoccatModel.getFactory();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerContextGenerator.<init>(opennlp.tools.doccat.FeatureGenerator[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.<init>(opennlp.tools.doccat.DoccatModel);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.categorize(java.lang.String[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentSample.<init>(java.lang.String, java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.util.BaseToolFactory.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.util.TrainingParameters.<init>();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.util.Version.toString();0.6000000238418579
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DoccatFactory.getFeatureGenerators();0.5600000023841858
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.5600000023841858
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.7619048357009888
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.namefind.TokenNameFinderEvaluator.getFMeasure();0.7272727489471436
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.getFMeasure();0.7272727489471436
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);0.6666666865348816
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.cmdline.namefind.NameEvaluationErrorListener.<init>(java.io.OutputStream);0.6666666865348816
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.namefind.TokenNameFinderEvaluator.<init>(opennlp.tools.namefind.TokenNameFinder, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);0.6666666865348816
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.6666666865348816
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.<init>();0.6666666865348816
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.lemmatizer.LemmaSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.lemmatizer.LemmatizerFactory.<init>();1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.BaseToolFactory.<init>();1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.MockInputStreamFactory.<init>(java.io.File);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.MockInputStreamFactory.createInputStream();0.7058823704719543
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.625
opennlp.tools.lemmatizer.LemmatizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.625
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData();opennlp.tools.ml.perceptron.PerceptronTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer, int);0.5555555820465088
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals();opennlp.tools.ml.model.AbstractModel.equals(java.lang.Object);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.9523810148239136
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.7936508655548096
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.model.AbstractModelReader.getModel();0.7936508655548096
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6349206566810608
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.model.AbstractModel.getDataStructures();0.6349206566810608
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.model.AbstractModel.getNumOutcomes();0.6349206566810608
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.perceptron.PerceptronModelWriter.persist();0.6349206566810608
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.ml.TrainerFactory.createBuiltinTrainer(java.lang.Class<T>);0.5714285969734192
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelSerialization();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.5555555820465088
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.verifyReportMap();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.75
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9999999403953552
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8181817531585693
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9999999403953552
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.8181817531585693
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.692307710647583
opennlp.tools.cmdline.CLITest.testUnknownToolMessage();opennlp.tools.cmdline.TerminateToolException.getMessage();1.0
opennlp.tools.cmdline.CLITest.testUnknownToolMessage();opennlp.tools.cmdline.CmdLineTool.getName();0.75
opennlp.tools.cmdline.CLITest.testUnknownToolMessage();opennlp.tools.cmdline.chunker.ChunkerTrainerTool.getName();0.75
opennlp.tools.cmdline.CLITest.testUnknownToolMessage();opennlp.tools.cmdline.lemmatizer.LemmatizerTrainerTool.getName();0.75
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.namefind.TokenNameFinderCrossValidator.<init>(java.lang.String, java.lang.String, opennlp.tools.util.TrainingParameters, opennlp.tools.namefind.TokenNameFinderFactory, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.util.eval.FMeasure.<init>();1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.875
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.namefind.TokenNameFinderCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>, int);0.75
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithInsufficientData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory();opennlp.tools.chunker.ChunkerModel.getFactory();1.0
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.initializeFactory();0.9999999403953552
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.8333333134651184
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.finishLoadingArtifacts(java.io.InputStream);0.75
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.chunker.ChunkerModel.<init>(java.io.InputStream);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, boolean);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, java.io.InputStream);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.createBaseArtifactSerializers(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer>);0.6609195470809937
opennlp.tools.chunker.ChunkerModelTest.testInvalidFactorySignature();opennlp.tools.util.model.BaseModel.checkArtifactMap();0.5833333134651184
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.initializeFactory();1.0
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.checkArtifactMap();0.796875
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.796875
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.createBaseArtifactSerializers(java.util.Map<java.lang.String, opennlp.tools.util.model.ArtifactSerializer>);0.5862069129943848
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.finishLoadingArtifacts(java.io.InputStream);0.5795454978942871
opennlp.tools.chunker.ChunkerModelTest.test180CustomFactory();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.554347813129425
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.postag.POSSample.getTags();1.0
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.postag.POSSample.checkArguments();0.773809552192688
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7647059559822083
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ConllXPOSSampleStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ConllXPOSSampleStream.read();0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.util.FilterObjectStream.close();0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.util.ParagraphStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6666666865348816
opennlp.tools.formats.ConllXPOSSampleStreamTest.testParsingSample();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentence.getSentenceIdComment();1.0
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentence.getWordLines();0.8235294222831726
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentence.getTextComment();0.7058823704719543
opennlp.tools.formats.conllu.ConlluStreamTest.testParseTwoSentences();opennlp.tools.util.PlainTextByLineStream.reset();0.5882353186607361
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluLemmaSampleStream.read();1.0
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.lemmatizer.LemmaSample.getLemmas();1.0
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.lemmatizer.LemmaSample.getTokens();1.0
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7843137979507446
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.lemmatizer.LemmaSample.validateArguments(int, int, int);0.7843137979507446
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluLemmaSampleStream.<init>(opennlp.tools.util.ObjectStream<opennlp.tools.formats.conllu.ConlluSentence>, opennlp.tools.formats.conllu.ConlluTagset);0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluStream.<init>(opennlp.tools.util.InputStreamFactory);0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluTagset.<init>();0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.lemmatizer.LemmaSample.toString();0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.util.FilterObjectStream.close();0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.util.ParagraphStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6666666865348816
opennlp.tools.formats.conllu.ConlluLemmaSampleStreamTest.testParseSpanishS300();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluPOSSampleStream.read();0.6000000238418579
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.postag.POSSample.equals(java.lang.Object);0.6000000238418579
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.util.PlainTextByLineStream.reset();0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.util.PlainTextByLineStream.reset();0.800000011920929
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluTokenSampleStream.read();0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.5647059082984924
opennlp.tools.util.ParagraphStreamTest.testReset();opennlp.tools.util.FilterObjectStream.reset();1.0
opennlp.tools.formats.conllu.ConlluSentenceSampleStreamTest.testParseTwoSentences();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.formats.conllu.ConlluTokenSampleStream.read();0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.tokenize.TokenSample.equals(java.lang.Object);0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.util.PlainTextByLineStream.reset();0.6000000238418579
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.699999988079071
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentence.getWordLines();0.699999988079071
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.699999988079071
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.formats.conllu.ConlluSentence.getTextComment();0.5999999642372131
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(java.lang.String);0.5999999642372131
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.util.FilterObjectStream.close();0.5999999642372131
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);0.5999999642372131
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.util.StringUtil.isWhitespace(char);0.5999999642372131
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.util.PlainTextByLineStream.reset();0.800000011920929
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.formats.conllu.ConlluPOSSampleStream.read();0.6000000238418579
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.5647059082984924
opennlp.tools.util.ParagraphStreamTest.testSimpleReading();opennlp.tools.util.ParagraphStream.read();0.9999999403953552
opennlp.tools.util.ParagraphStreamTest.testSimpleReading();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.7222221493721008
opennlp.tools.formats.ad.ADParagraphStreamTest.testSimpleReading();opennlp.tools.formats.ad.ADSentenceStream.read();0.9999999403953552
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.read();1.0
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.fixPunctuation(java.lang.String);0.7499999403953552
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.<init>();0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.TreeElement.setSyntacticTag(java.lang.String);0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.lang.String);0.6666666865348816
opennlp.tools.formats.ad.ADParagraphStreamTest.testLeadingWithContraction();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, boolean, boolean);1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.close();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADSentenceStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.<init>();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.postag.POSSample.getTags();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.postag.POSSample.checkArguments();0.7142857313156128
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ad.ADPOSSampleStream.read();0.6666666865348816
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testIncludeFeats();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.5882353186607361
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple();opennlp.tools.formats.ad.ADPOSSampleStream.close();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testSimple();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME();opennlp.tools.formats.ad.ADPOSSampleStream.read();1.0
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME();opennlp.tools.postag.POSSample.getSentence();0.7272727489471436
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME();opennlp.tools.postag.POSSample.getTags();0.6666666865348816
opennlp.tools.formats.ad.ADPOSSampleStreamTest.testExpandME();opennlp.tools.util.PlainTextByLineStream.reset();0.6666666865348816
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.6818181872367859
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.DummyTokenizerFactory.getContextGenerator();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.DummyTokenizerFactory.getAbbreviationDictionary();0.949999988079071
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.create(java.lang.String, java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);0.7916666865348816
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.getLanguageCode();0.7916666865348816
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.7556818127632141
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.6785714626312256
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.chunker.ChunkerModel.getFactory();1.0
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6222222447395325
opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory();opennlp.tools.ml.model.Context.getOutcomes();0.5555555820465088
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.chunker.ChunkSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.chunker.ChunkerFactory.<init>();1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.BaseToolFactory.<init>();1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7058823704719543
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.625
opennlp.tools.chunker.ChunkerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.625
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.typeSystemInit(org.apache.uima.cas.TypeSystem);1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.util.CasUtil.deserializeXmiCAS(org.apache.uima.cas.CAS, java.io.InputStream);1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.documentDone(org.apache.uima.cas.CAS);0.699999988079071
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryNameFinder();opennlp.uima.namefind.AbstractNameFinder.postProcessAnnotations(opennlp.tools.util.Span[], org.apache.uima.cas.text.AnnotationFS[]);0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.CasUtil.createEmptyCAS(org.apache.uima.resource.metadata.TypeSystemDescription);1.0
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.CasUtil.deserializeXmiCAS(org.apache.uima.cas.CAS, java.io.InputStream);0.8235293626785278
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.CasUtil.createTypeSystemDescription(java.io.InputStream);0.7777777314186096
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.<init>(org.apache.uima.cas.CAS, org.apache.uima.cas.Type, org.apache.uima.cas.Type);0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.AnnotationIterator.hasNext();0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.AnnotationIterator.iterator();0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.AnnotationIterator.next();0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.hasNext();0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.iterator();0.6363636255264282
opennlp.uima.util.AnnotationComboIteratorTest.OPENNLP_676();opennlp.uima.util.AnnotationComboIterator.next();0.6363636255264282
opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate();opennlp.tools.langdetect.LanguageDetectorCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.langdetect.LanguageSample>, int);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.7499999403953552
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.6874999403953552
opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);1.0
opennlp.tools.postag.POSDictionaryTest.testCaseSensitiveDictionary();opennlp.tools.postag.POSDictionary.serialize(java.io.OutputStream);0.625
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.hashCode();1.0
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.equals(java.lang.Object);0.75
opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);0.9999999403953552
opennlp.tools.postag.POSDictionaryTest.testLoadingDictionaryWithoutCaseAttribute();opennlp.tools.postag.POSDictionary.create(java.io.InputStream);0.5999999642372131
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getPOSContextGenerator();0.9999999403953552
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getTagDictionary();0.9090908765792847
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSModel.getFactory();0.9090908765792847
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.POSTaggerFactory.loadDefaultFeatureGeneratorBytes();0.8124999403953552
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.postag.DummyPOSTaggerFactory.getSequenceValidator();0.7272727489471436
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.model.Context.getOutcomes();0.6363636255264282
opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6363636255264282
opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary();opennlp.tools.postag.POSDictionary.getTags(java.lang.String);1.0
opennlp.tools.postag.POSDictionaryTest.testCaseInsensitiveDictionary();opennlp.tools.postag.POSDictionary.serialize(java.io.OutputStream);0.625
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.serialize(java.io.OutputStream);0.9999999403953552
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.<init>();0.7499999403953552
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.<init>(boolean);0.7499999403953552
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.equals(java.lang.Object);0.7499999403953552
opennlp.tools.postag.POSDictionaryTest.testSerialization();opennlp.tools.postag.POSDictionary.iterator();0.6249999403953552
opennlp.tools.chunker.ChunkSampleTest.testNicePrint();opennlp.tools.chunker.ChunkSample.nicePrint();1.0
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getTags();1.0
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getPreds();0.8749999403953552
opennlp.tools.formats.ad.ADChunkSampleStreamTest.testChunks();opennlp.tools.chunker.ChunkSample.getSentence();0.6363636255264282
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.getPhrasesAsSpanList();1.0
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.equals(java.lang.Object);0.8333333134651184
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.getSentence();0.8333333134651184
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.util.Span.equals(java.lang.Object);0.8333333134651184
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.getPreds();0.625
opennlp.tools.chunker.ChunkSampleTest.testChunkSampleSerDe();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);0.5882353186607361
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.chunker.ChunkSampleTest.testAsSpan();opennlp.tools.chunker.ChunkSample.getPhrasesAsSpanList();0.9000000357627869
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.getSentence();1.0
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);0.8571428656578064
opennlp.tools.chunker.ChunkSampleTest.testRetrievingContent();opennlp.tools.chunker.ChunkSample.getPreds();0.5714285969734192
opennlp.tools.chunker.ChunkSampleTest.testEquals();opennlp.tools.chunker.ChunkSample.equals(java.lang.Object);1.0
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.chunker.ChunkSample.getPreds();0.75
opennlp.tools.parser.ChunkSampleStreamTest.testConvertParseToPosSample();opennlp.tools.chunker.ChunkSample.getSentence();0.75
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSample.getSentence();1.0
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSample.getPreds();0.800000011920929
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSample.getTags();0.800000011920929
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSampleStream.read();0.800000011920929
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.util.PlainTextByLineStream.reset();0.800000011920929
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.5999999642372131
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.5999999642372131
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.util.MockInputStreamFactory.<init>(java.lang.String);0.5999999642372131
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.util.MockInputStreamFactory.<init>(java.lang.String, java.nio.charset.Charset);0.5999999642372131
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.5999999642372131
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.util.eval.FMeasure.getRecallScore();0.75
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.util.eval.FMeasure.getPrecisionScore();0.7058823704719543
opennlp.tools.chunker.ChunkerEvaluatorTest.testEvaluatorNoError();opennlp.tools.chunker.ChunkerEvaluator.getFMeasure();0.625
opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.DummyChunkSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, boolean);0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.chunker.DummyChunkSampleStream.read();0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.FilterObjectStream.close();0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.chunker.ChunkSampleTest.testRegions();opennlp.tools.util.Span.spansToStrings(opennlp.tools.util.Span[], java.lang.String[]);0.6666666865348816
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.875
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData();opennlp.tools.ml.model.Context.getOutcomes();0.625
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.8000000715255737
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads();opennlp.tools.ml.model.Context.getOutcomes();0.699999988079071
opennlp.tools.cmdline.CLITest.testMainHelpMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFail();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCr();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCr();opennlp.tools.sentdetect.NewlineSentenceDetector.<init>();0.5555555820465088
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineLf();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);1.0
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineLf();opennlp.tools.sentdetect.NewlineSentenceDetector.<init>();0.7407407164573669
opennlp.tools.sentdetect.NewlineSentenceDetectorTest.testNewlineCrLf();opennlp.tools.sentdetect.NewlineSentenceDetector.sentDetect(java.lang.String);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFilter();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.formats.brat.BratDocumentParserTest.testParse();opennlp.tools.formats.brat.BratDocumentParser.parse(opennlp.tools.formats.brat.BratDocument);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readNoOverlap();opennlp.tools.formats.brat.SegmenterObjectStream.read();0.9999999403953552
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.8333333134651184
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceEnd();opennlp.tools.util.Span.getStart();0.8333333134651184
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>, java.lang.String);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenizerFactory.create(java.lang.String, java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7058823704719543
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.625
opennlp.tools.tokenize.TokenizerMETest.testInsufficientData();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.5714285969734192
opennlp.tools.namefind.NameSampleTest.testMissingType();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyTag();opennlp.tools.postag.POSSample.getTags();1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyTag();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.util.CollectionObjectStream.reset();1.0
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.util.FilterObjectStream.reset();1.0
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.postag.WordTagSampleStream.read();0.75
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.util.FilterObjectStream.close();0.75
opennlp.tools.postag.WordTagSampleStreamTest.testParseSimpleSample();opennlp.tools.postag.POSSample.parse(java.lang.String);0.625
opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.tokenize.SimpleTokenizerTest.testWordDotTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.AnnotationConfiguration.<init>(java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotation.toString();1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.SpanAnnotation.toString();1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotationStream.AnnotatorNoteParser.parse(opennlp.tools.util.Span[], java.lang.CharSequence);0.625
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.BratAnnotationStream.SpanAnnotationParser.parse(opennlp.tools.util.Span[], java.lang.CharSequence);0.625
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.formats.brat.SpanAnnotation.getCoveredText();0.625
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(java.lang.String);0.625
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingEntities();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);0.625
opennlp.tools.namefind.NameSampleDataStreamTest.testClearAdaptiveData();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();1.0
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContext();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.75
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.625
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameAtSentenceStart();opennlp.tools.util.Span.getEnd();0.625
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory();opennlp.tools.sentdetect.SentenceModel.getFactory();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.sentdetect.SentenceModel.<init>(java.io.InputStream);0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.util.BaseToolFactory.<init>();0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, boolean);0.75
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict();opennlp.tools.util.model.BaseModel.<init>(java.lang.String, java.io.InputStream);0.75
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.9999999403953552
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6666666269302368
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypeAndInvalidData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6666666269302368
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes();opennlp.tools.namefind.NameSample.getSentence();0.6666666865348816
opennlp.tools.namefind.NameSampleTest.testTypeWithSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary();opennlp.tools.postag.POSTaggerME.buildNGramDictionary(opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>, int);1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.RelationAnnotation.toString();1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.SpanAnnotation.toString();1.0
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.AnnotationConfiguration.<init>(java.util.Map<java.lang.String, java.lang.String>);0.75
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.BratAnnotationStream.read();0.75
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.BratAnnotationStream.RelationAnnotationParser.parse(opennlp.tools.util.Span[], java.lang.CharSequence);0.625
opennlp.tools.formats.brat.BratAnnotationStreamTest.testParsingRelations();opennlp.tools.formats.brat.BratAnnotationStream.SpanAnnotationParser.parse(opennlp.tools.util.Span[], java.lang.CharSequence);0.625
opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.postag.POSSampleTest.testPOSSampleSerDe();opennlp.tools.postag.POSSample.getAddictionalContext();0.6666666269302368
opennlp.tools.namefind.RegexNameFinderFactoryTest.testPhoneNumber();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.cmdline.sentdetect.SentenceEvaluationErrorListener.<init>(java.io.OutputStream);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.sentdetect.SentenceDetectorEvaluator.<init>(opennlp.tools.sentdetect.SentenceDetector, opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor[]);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.<init>();1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.sentdetect.SentenceDetectorEvaluator.getFMeasure();0.7272727489471436
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.getFMeasure();0.7272727489471436
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.sentdetect.SentenceDetectorEvaluator.processSample(opennlp.tools.sentdetect.SentenceSample);0.6153846383094788
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.5714285969734192
opennlp.tools.postag.POSSampleTest.testParseEmtpyToken();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyToken();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.sentdetect.SDEventStreamTest.testEventOutcomes();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.tokenize.SimpleTokenizerTest.testWordNumericTokeniztation();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testEquals();opennlp.tools.postag.POSSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testEmail();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar2();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar2();opennlp.tools.namefind.NameSample.errorTokenWithContext(java.lang.String[], int);0.5555555820465088
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.tokenize.TokenSample.getTokenSpans();1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceSeparatedTokens();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.8888888955116272
opennlp.tools.formats.muc.SgmlParserTest.testParse1();opennlp.tools.formats.muc.SgmlParser.parse(java.io.Reader, opennlp.tools.formats.muc.SgmlParser$ContentHandler);1.0
opennlp.tools.langdetect.LanguageDetectorFactoryTest.testDummyFactoryContextGenerator();opennlp.tools.langdetect.DummyFactory.getContextGenerator();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.tokenize.AbstractTokenizer.<init>();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.tokenize.SimpleTokenizer.<init>();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>(opennlp.tools.tokenize.Tokenizer);1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.8333333134651184
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSingleToken();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.7857142686843872
opennlp.tools.namefind.NameSampleTest.testNestedNameSpans();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.tokenize.WhitespaceTokenizerTest.testTokenizationOfStringWithoutTokens();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.8888888359069824
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);0.8888888359069824
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingWhitespaceAndSeparatedString();opennlp.tools.tokenize.TokenSample.getText();0.555555522441864
opennlp.tools.postag.POSSampleTest.testParse();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.7499999403953552
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.sentdetect.SentenceModel.getFactory();0.699999988079071
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.5833333134651184
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.5833333134651184
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.EmptyLinePreprocessorStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorFactory.<init>(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorFactory.init(java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceSampleStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.util.BaseToolFactory.<init>();1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.util.TrainingParameters.<init>();1.0
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.util.PlainTextByLineStream.reset();0.75
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7058823704719543
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.625
opennlp.tools.sentdetect.SentenceDetectorMETest.testInsufficientData();opennlp.tools.sentdetect.SentenceDetectorFactory.getSDContextGenerator();0.5714285969734192
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.parseDocument(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.io.InputStream, java.io.InputStream);1.0
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getAnnotation(java.lang.String);0.875
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getAnnotations();0.875
opennlp.tools.formats.brat.BratDocumentTest.testDocumentWithEntitiesParsing();opennlp.tools.formats.brat.BratDocument.getText();0.625
opennlp.tools.namefind.RegexNameFinderFactoryTest.testURL();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameSampleTest.testWithTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.util.Span.getType();0.8333333730697632
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes();opennlp.tools.namefind.NameSample.getSentence();0.6666666865348816
opennlp.tools.namefind.RegexNameFinderFactoryTest.testMgrs();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testMgrs();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.util.Span.getEnd();0.8571428656578064
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.util.Span.getStart();0.7142857313156128
opennlp.tools.namefind.DictionaryNameFinderTest.testSingleTokeNameInsideSentence();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.6428571343421936
opennlp.tools.util.SpanTest.testTrim();opennlp.tools.util.Span.trim(java.lang.CharSequence);1.0
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.evaluateSample(T);1.0
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.cmdline.postag.POSEvaluationErrorListener.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.postag.POSEvaluator.<init>(opennlp.tools.postag.POSTagger, opennlp.tools.postag.POSTaggerEvaluationMonitor[]);0.8749999403953552
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8749999403953552
opennlp.tools.postag.POSEvaluatorTest.testNegative();opennlp.tools.util.eval.Mean.<init>();0.8749999403953552
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.util.Span.equals(java.lang.Object);0.7619048357009888
opennlp.tools.namefind.RegexNameFinderFactoryTest.testLatLong();opennlp.tools.util.Span.getStart();0.6666666865348816
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testSingleFilter();opennlp.tools.util.Span.getType();1.0
opennlp.tools.util.StringUtilTest.testNoBreakSpace();opennlp.tools.util.StringUtil.isWhitespace(char);1.0
opennlp.tools.util.StringUtilTest.testNoBreakSpace();opennlp.tools.util.StringUtil.isWhitespace(int);1.0
opennlp.tools.postag.POSSampleTest.testParseWithError();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.ml.model.Event.getOutcome();1.0
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.postag.POSSampleEventStreamTest.testOutcomesForSingleSentence();opennlp.tools.util.AbstractEventStream.close();0.5714285373687744
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.namefind.NameSample.getSentence();0.6666666269302368
opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666269302368
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar1();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithInvalidChar1();opennlp.tools.namefind.NameSample.errorTokenWithContext(java.lang.String[], int);0.5555555820465088
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);0.8333333134651184
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerTestUtil.createSimpleMaxentTokenModel();1.0
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.8615385293960571
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerModel.getMaxentModel();0.8615385293960571
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerFactory.getContextGenerator();0.7538461685180664
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerFactory.getAlphaNumericPattern();0.6853147149085999
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6461539268493652
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.TokenizerFactory.isUseAlphaNumericOptmization();0.6153846979141235
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.evaluateSample(T);1.0
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.sentdetect.SentenceDetectorEvaluator.getFMeasure();0.9545454382896423
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.getFMeasure();0.9545454382896423
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.cmdline.sentdetect.SentenceEvaluationErrorListener.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.sentdetect.SentenceDetectorEvaluator.<init>(opennlp.tools.sentdetect.SentenceDetector, opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor[]);0.8749999403953552
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8749999403953552
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.<init>();0.8749999403953552
opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest.testNegative();opennlp.tools.util.Span.getEnd();0.6562499403953552
opennlp.tools.tokenize.WhitespaceTokenizerTest.testOneToken();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine();opennlp.tools.namefind.NameSample.errorTokenWithContext(java.lang.String[], int);0.714285671710968
opennlp.tools.namefind.NameSampleTest.testTypeWithNewLine();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.625
opennlp.tools.tokenize.SimpleTokenizerTest.testWhitespaceTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);0.8749999403953552
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>();0.8749999403953552
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.TokenPatternFeatureGenerator.<init>(opennlp.tools.tokenize.Tokenizer);0.8749999403953552
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);0.6363636255264282
opennlp.tools.util.featuregen.TokenPatternFeatureGeneratorTest.testSentence();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);0.5833333134651184
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.cmdline.postag.POSEvaluationErrorListener.<init>(java.io.OutputStream);1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.postag.POSEvaluator.<init>(opennlp.tools.postag.POSTagger, opennlp.tools.postag.POSTaggerEvaluationMonitor[]);1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.util.eval.Mean.<init>();1.0
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.postag.POSSample.parse(java.lang.String);0.75
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.postag.POSEvaluator.processSample(opennlp.tools.postag.POSSample);0.6153846383094788
opennlp.tools.postag.POSEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.5714285969734192
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.75
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);0.75
opennlp.tools.tokenize.TokenSampleStreamTest.testParsingSeparatedString();opennlp.tools.tokenize.TokenSample.getText();0.625
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.BratDocument.parseDocument(opennlp.tools.formats.brat.AnnotationConfiguration, java.lang.String, java.io.InputStream, java.io.InputStream);1.0
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.BratDocument.getAnnotation(java.lang.String);0.8571429252624512
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.formats.brat.SpanAnnotation.getSpans();0.7142857909202576
opennlp.tools.formats.brat.BratDocumentTest.testSpanWithMultiFragments();opennlp.tools.util.Span.getStart();0.5714285969734192
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.util.Span.getType();1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testMultiFilter();opennlp.tools.namefind.NameSample.getNames();0.6666666865348816
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceModel.getFactory();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.ml.model.Context.getOutcomes();0.9090909361839294
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.800000011920929
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.util.model.BaseModel.serialize(java.io.OutputStream);0.800000011920929
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.6666666865348816
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.sentdetect.SentenceDetectorFactory.getEOSCharacters();0.625
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.util.TrainingParameters.defaultParams();0.6153846383094788
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);0.6000000238418579
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6000000238418579
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContextWithAbbreviations();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.namefind.NameSampleTest.testTypeWithSpecialChars();opennlp.tools.util.Span.getType();1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.800000011920929
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.800000011920929
opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypeAndInvalidData();opennlp.tools.namefind.NameSampleDataStream.read();0.5999999642372131
opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator();opennlp.tools.util.eval.Evaluator.evaluate(opennlp.tools.util.ObjectStream<T>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter();opennlp.tools.namefind.NameSampleTypeFilter.<init>(java.lang.String[], opennlp.tools.util.ObjectStream<opennlp.tools.namefind.NameSample>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);1.0
opennlp.tools.namefind.NameSampleTypeFilterTest.testNoFilter();opennlp.tools.namefind.NameSample.getNames();0.6666666865348816
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.StringUtil.isWhitespace(char);1.0
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.getCoveredText(java.lang.CharSequence);0.7272727489471436
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.trim(java.lang.CharSequence);0.7272727489471436
opennlp.tools.tokenize.WhitespaceTokenizerTest.testWhitespaceTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.tokenize.SimpleTokenizerTest.testWordWithOtherTokenization();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage();opennlp.tools.langdetect.LanguageDetectorME.predictLanguage(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageSampleTest.testHash();opennlp.tools.langdetect.LanguageSample.hashCode();1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.800000011920929
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testModel();opennlp.tools.ml.model.AbstractModel.equals(java.lang.Object);0.6666666865348816
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.800000011920929
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.GradientComputeTask.call();0.800000011920929
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel();opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.NegLLComputeTask.call();0.800000011920929
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel();opennlp.tools.ml.model.AbstractModelReader.getModel();1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.AbstractEventTrainer.<init>();0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.AbstractTrainer.<init>();0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, boolean);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.maxent.quasinewton.QNTrainer.<init>(int, int, boolean);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.model.FileEventStream.<init>(java.io.Reader);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String, java.lang.String);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet();opennlp.tools.ml.model.RealValueFileEventStream.<init>(java.lang.String);0.8000000715255737
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.6363636255264282
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.692307710647583
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.6363636255264282
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault();opennlp.tools.util.featuregen.CharacterNgramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.CharacterNgramFeatureGeneratorTest.testDefault();opennlp.tools.ngram.NGramModel.iterator();0.6562499403953552
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);1.0
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.getTokenSpans();0.7000000476837158
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.isMergeToRight(opennlp.tools.tokenize.Detokenizer$DetokenizationOperation);0.7000000476837158
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.TokenSample.isMergeToLeft(opennlp.tools.tokenize.Detokenizer$DetokenizationOperation);0.6000000238418579
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);1.0
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.endElement(java.lang.String, java.lang.String, java.lang.String);0.875
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.setDocumentLocator(org.xml.sax.Locator);0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startDocument();0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes);0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileMissingCount();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);0.75
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSerialization();opennlp.tools.tokenize.DetokenizationDictionary.serialize(java.io.OutputStream);0.9999999403953552
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.DummySentenceDetectorFactory.getAbbreviationDictionary();1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.getEOSCharacters();0.9722222089767456
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.DummySentenceDetectorFactory.getSDContextGenerator();0.9523809552192688
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.create(java.lang.String, java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);0.8333333730697632
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.DummySentenceDetectorFactory.getEndOfSentenceScanner();0.7608695030212402
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testSerializedNGramLanguageModel();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);0.5714285969734192
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);1.0
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);1.0
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.setDocumentLocator(org.xml.sax.Locator);0.875
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.endElement(java.lang.String, java.lang.String, java.lang.String);0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startDocument();0.75
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.characters(char[], int, int);0.625
opennlp.tools.ngram.NGramModelTest.testFromInvalidFileNotANumber();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes);0.625
opennlp.tools.ngram.NGramModelTest.testSerialize();opennlp.tools.ngram.NGramModel.serialize(java.io.OutputStream);1.0
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.dictionary.Dictionary.size();1.0
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);1.0
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.dictionary.Dictionary.getMinTokenCount();0.75
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.ngram.NGramModel.toDictionary(boolean);0.6666666865348816
opennlp.tools.ngram.NGramModelTest.testFromFile();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startDocument();0.6153846383094788
opennlp.tools.dictionary.DictionaryTest.testSerialization();opennlp.tools.dictionary.Dictionary.serialize(java.io.OutputStream);0.9999999403953552
opennlp.tools.postag.POSDictionaryTest.testToString();opennlp.tools.postag.POSDictionary.toString();1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.util.AbstractEventStreamTest.testStandardCase();opennlp.tools.util.AbstractEventStream.close();1.0
opennlp.tools.util.AbstractEventStreamTest.testStandardCase();opennlp.tools.util.CollectionObjectStream.reset();1.0
opennlp.tools.util.AbstractEventStreamTest.testStandardCase();opennlp.tools.util.AbstractEventStream.read();0.6666666865348816
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.AbstractEventStream.read();1.0
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.CollectionObjectStream.reset();1.0
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.AbstractEventStream.<init>(opennlp.tools.util.ObjectStream<T>);0.6666666865348816
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.AbstractEventStream.close();0.6666666865348816
opennlp.tools.util.AbstractEventStreamTest.testEmtpyEventStream();opennlp.tools.util.CollectionObjectStream.<init>(java.util.Collection<E>);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.initializeFactory();1.0
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.checkArtifactMap();0.7777777910232544
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.loadModel(java.io.InputStream);0.6666666865348816
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.loadArtifactSerializers();0.6570048332214355
opennlp.tools.chunker.ChunkerModelTest.test170DefaultFactory();opennlp.tools.util.model.BaseModel.finishLoadingArtifacts(java.io.InputStream);0.6010100841522217
opennlp.tools.formats.brat.BratNameSampleStreamTest.emptySample();opennlp.tools.formats.brat.BratDocumentStream.reset();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.test3FoldCV();opennlp.tools.util.eval.CrossValidationPartitioner.TestSampleStream.read();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.test3FoldCV();opennlp.tools.util.eval.CrossValidationPartitioner.TrainingSampleStream.read();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet();opennlp.tools.util.CollectionObjectStream.reset();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testEmptyDataSet();opennlp.tools.util.eval.CrossValidationPartitioner.hasNext();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.hasNext();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.CollectionObjectStream.<init>(java.util.Collection<E>);0.6666666865348816
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.CollectionObjectStream.reset();0.6666666865348816
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.<init>(java.util.Collection<E>, int);0.6666666865348816
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.<init>(opennlp.tools.util.ObjectStream<E>, int);0.6666666865348816
opennlp.tools.util.eval.CrossValidationPartitionerTest.testFailSafty();opennlp.tools.util.eval.CrossValidationPartitioner.TrainingSampleStream.getTestSampleStream();0.6315789222717285
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.8181818723678589
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7272727489471436
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams();opennlp.tools.ml.model.Context.getOutcomes();0.6363636255264282
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters();0.8294930458068848
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.model.Context.getOutcomes();0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.5714285969734192
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);1.0
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.75
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.ml.maxent.GISTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);0.625
opennlp.tools.ml.maxent.RealValueModelTest.testRealValuedWeightsVsRepeatWeighting();opennlp.tools.util.ObjectStreamUtils.createObjectStream(java.util.Collection<T>);0.625
opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();1.0
opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults();opennlp.tools.ml.model.RealValueFileEventStream.parseContexts(java.lang.String[]);0.5769230723381042
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters();0.8294930458068848
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.model.Context.getOutcomes();0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.5714285969734192
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();0.9999999403953552
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.9999999403953552
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7272726893424988
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.PrepAttachDataUtil.testModel(opennlp.tools.ml.model.MaxentModel, double);0.6363636255264282
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault();opennlp.tools.ml.model.Context.getOutcomes();0.6363636255264282
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters();0.8294930458068848
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.model.Context.getOutcomes();0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters();0.8294930458068848
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.7142857313156128
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.model.Context.getOutcomes();0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.5714285969734192
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.setGaussianSigma(double);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7777777910232544
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.maxent.GISTrainer.trainModel(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.6666666865348816
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.util.model.ModelUtil.createDefaultTrainingParameters();0.6451612710952759
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.5555555820465088
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature4();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.5555555820465088
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.PrepAttachDataUtil.createTrainingStream();1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);1.0
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);0.7272726893424988
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.maxent.GISTrainer.ModelExpectationComputeTask.call();0.7272726893424988
opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsLLThreshold();opennlp.tools.ml.model.Context.getOutcomes();0.7272726893424988
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.AbstractModel.getDataStructures();1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.Context.getParameters();1.0
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.MutableContext.updateParameter(int, double);0.7999999523162842
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.FootballEventStream.<init>();0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.maxent.URLInputStreamFactory.<init>(java.net.URL);0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.Context.getOutcomes();0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.model.UniformPrior.logPrior(double[], int[]);0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.<init>();0.5999999642372131
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.ml.TrainerFactory.createBuiltinTrainer(java.lang.Class<T>);0.5949999690055847
opennlp.tools.ml.maxent.GISTrainerTest.testGaussianSmoothing();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.5666666626930237
opennlp.tools.ngram.NGramUtilsTest.testGetNGrams();opennlp.tools.ngram.NGramUtils.getNGrams(opennlp.tools.util.StringList, int);1.0
opennlp.tools.postag.DefaultPOSContextGeneratorTest.dictionaryMatch();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.8800000548362732
opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);0.800000011920929
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.9166666269302368
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.7333332896232605
opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.6666666865348816
opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.5999999642372131
opennlp.tools.dictionary.Dictionary.StringListWrapper.getStringList();opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);0.5999999642372131
opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);0.800000011920929
opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);1.0
opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.<init>(java.lang.String);opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);1.0
opennlp.tools.util.StringList.<init>(java.lang.String);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.800000011920929
opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);opennlp.tools.util.StringList.<init>(java.lang.String);1.0
opennlp.tools.postag.DefaultPOSContextGeneratorTest.noDictionaryMatch();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();null.contains(java.lang.Object);0.6666666865348816
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();null.hasNext();0.6666666865348816
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEqualsDifferentCase();null.iterator();0.6666666865348816
opennlp.tools.util.StringListTest.testCompareToIgnoreCase();opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseSensitivity();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseSensitivity();opennlp.tools.util.Span.getEnd();0.7499999403953552
opennlp.tools.ngram.NGramModelTest.testToDictionary();opennlp.tools.ngram.NGramModel.toDictionary();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();null.contains(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup();null.contains(java.lang.Object);0.75
opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred();opennlp.tools.util.Span.getStart();0.8333333730697632
opennlp.tools.namefind.DictionaryNameFinderTest.testLongerTokenNameIsPreferred();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.6666666865348816
opennlp.tools.dictionary.DictionaryTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testLookup();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSet();null.size();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.6666666865348816
opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen();opennlp.tools.util.Span.getEnd();0.7272727489471436
opennlp.tools.namefind.DictionaryNameFinderTest.testLastMatchingTokenNameIsChoosen();opennlp.tools.util.Span.getStart();0.7272727489471436
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookup();opennlp.tools.util.StringList.<init>(java.lang.String[]);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testEquals();null.hasNext();0.5714285969734192
opennlp.tools.dictionary.DictionaryTest.testEquals();opennlp.tools.dictionary.Dictionary.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryTest.testParseOneEntryPerLine();opennlp.tools.dictionary.Dictionary.parseOneEntryPerLine(java.io.Reader);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();null.contains(java.lang.Object);0.6000000238418579
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testSetDiffCase();null.size();0.6000000238418579
opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.postag.DefaultPOSContextGeneratorTest.multithreading();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.6666666865348816
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseLongerEntry();opennlp.tools.util.Span.length();1.0
opennlp.tools.namefind.DictionaryNameFinderTest.testCaseLongerEntry();opennlp.tools.dictionary.Dictionary.getMaxTokenCount();0.5859374403953552
opennlp.tools.ml.model.OnePassDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.OnePassRealValueDataIndexer.getValues();1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.7142857909202576
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6547619104385376
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.AbstractDataIndexer.getContexts();0.5714285969734192
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithoutCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int, java.lang.String[], java.lang.String[], java.lang.Object[]);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.getContext(int, java.lang.String[], java.lang.String[], java.lang.Object[]);1.0
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.postag.ConfigurablePOSContextGenerator.<init>(int, opennlp.tools.util.featuregen.AdaptiveFeatureGenerator);0.7407407164573669
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.util.Cache.<init>(int);0.7407407164573669
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>();0.7407407164573669
opennlp.tools.postag.ConfigurablePOSContextGeneratorTest.testWithCache();opennlp.tools.util.featuregen.TokenFeatureGenerator.<init>(boolean);0.7407407164573669
opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPSegmentationDocument.parse(java.io.InputStream);1.0
opennlp.tools.formats.nkjp.NKJPSegmentationDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.nkjp.NKJPSegmentationDocument.getSegments();0.800000011920929
opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray();opennlp.tools.lemmatizer.LemmatizerME.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray();opennlp.tools.lemmatizer.LemmatizerME.decodeLemmas(java.lang.String[], java.lang.String[]);0.5999999642372131
opennlp.tools.langdetect.LanguageSampleTest.testToString();opennlp.tools.langdetect.LanguageSample.toString();1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages();opennlp.tools.langdetect.LanguageDetectorME.predictLanguages(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageTest.emptyLanguage();opennlp.tools.langdetect.Language.<init>(java.lang.String);0.9999999403953552
opennlp.tools.langdetect.LanguageTest.emptyLanguage();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);0.9999999403953552
opennlp.tools.langdetect.LanguageTest.emptyConfidence();opennlp.tools.langdetect.Language.getConfidence();1.0
opennlp.tools.langdetect.LanguageSampleTest.testEquals();opennlp.tools.langdetect.LanguageSample.equals(java.lang.Object);1.0
opennlp.tools.langdetect.LanguageTest.testHash();opennlp.tools.langdetect.Language.hashCode();1.0
opennlp.tools.langdetect.LanguageSampleTest.testLanguageSampleSerDe();opennlp.tools.langdetect.LanguageSample.getLanguage();1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.Language.<init>(java.lang.String);1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullContext();opennlp.tools.langdetect.LanguageSample.<init>(opennlp.tools.langdetect.Language, java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageTest.nonEmptyConfidence();opennlp.tools.langdetect.Language.getConfidence();1.0
opennlp.tools.langdetect.LanguageTest.testToString();opennlp.tools.langdetect.Language.toString();1.0
opennlp.tools.langdetect.LanguageTest.testEquals();opennlp.tools.langdetect.Language.equals(java.lang.Object);1.0
opennlp.tools.langdetect.LanguageTest.emptyLanguageConfidence();opennlp.tools.langdetect.Language.<init>(java.lang.String, double);1.0
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.reset();1.0
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.read();0.7999999523162842
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();null.accept(java.io.File);0.5999999642372131
opennlp.tools.langdetect.LanguageSampleTest.testConstructor();opennlp.tools.langdetect.LanguageSample.getContext();1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.TrainerFactory.getEventTrainer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.AbstractEventTrainer.getDataIndexer(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.9000000357627869
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.defaultParams();0.9000000357627869
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.8000000715255737
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.699999988079071
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.699999988079071
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.699999988079071
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingWithTrainingParameters();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.6499999761581421
opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore();opennlp.tools.chunker.ChunkerME.topKSequences(java.lang.String[], java.lang.String[], double);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore();opennlp.tools.util.Sequence.getProbs();0.8571428656578064
opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore();opennlp.tools.util.Sequence.getOutcomes();0.7142857313156128
opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan();opennlp.tools.chunker.ChunkerME.chunkAsSpans(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testSupportedLanguages();opennlp.tools.langdetect.LanguageDetectorME.getSupportedLanguages();1.0
opennlp.tools.chunker.ChunkerMETest.testChunkAsArray();opennlp.tools.chunker.ChunkerME.chunk(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbArray();opennlp.tools.chunker.ChunkerME.topKSequences(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbArray();opennlp.tools.util.Sequence.getProbs();1.0
opennlp.tools.chunker.ChunkerMETest.testTokenProbArray();opennlp.tools.util.Sequence.getOutcomes();0.6000000238418579
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleList();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);1.0
opennlp.tools.cmdline.CLITest.testUnknownFileMessage();opennlp.tools.cmdline.TerminateToolException.getMessage();1.0
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.getCode();1.0
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.<init>(int);0.6666666865348816
opennlp.tools.cmdline.TerminateToolExceptionTest.testCreation();opennlp.tools.cmdline.TerminateToolException.<init>(int, java.lang.String);0.6666666865348816
opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel();opennlp.tools.cmdline.BasicCmdLineTool.<init>();1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel();opennlp.tools.cmdline.CmdLineTool.<init>();1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.invalidModel();opennlp.tools.cmdline.namefind.TokenNameFinderTool.<init>();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();0.653333306312561
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);0.6666666865348816
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getDimension();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.model.AbstractDataIndexer.getNumTimesEventsSeen();0.8888888955116272
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeList();0.6666666865348816
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testDomainDimensionSanity();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.555555522441864
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.model.AbstractDataIndexer.getNumTimesEventsSeen();0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeList();0.7999999523162842
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.model.AbstractDataIndexer.getContexts();0.699999988079071
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.699999988079071
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testInitialSanity();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.getInitialPoint();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.AbstractDataIndexer.getNumTimesEventsSeen();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeList();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.AbstractDataIndexer.getContexts();0.8571428656578064
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.8571428656578064
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.OnePassRealValueDataIndexer.getValues();0.7142857313156128
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.FileEventStream.<init>(java.io.Reader);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String, java.lang.String);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.model.RealValueFileEventStream.<init>(java.lang.String, java.lang.String);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.AbstractDataIndexer.getNumTimesEventsSeen();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeList();1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.AbstractDataIndexer.getContexts();0.8571428656578064
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.8571428656578064
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.OnePassRealValueDataIndexer.getValues();0.7142857313156128
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.<init>(opennlp.tools.ml.model.DataIndexer);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.AbstractDataIndexer.getPredLabels();0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.FileEventStream.<init>(java.io.Reader);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String, java.lang.String);0.5714285969734192
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.model.RealValueFileEventStream.<init>(java.lang.String, java.lang.String);0.5714285969734192
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.cmdline.tokenizer.TokenEvaluationErrorListener.<init>(java.io.OutputStream);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.TokenizerEvaluator.<init>(opennlp.tools.tokenize.Tokenizer, opennlp.tools.tokenize.TokenizerEvaluationMonitor[]);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.<init>();1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.TokenizerEvaluator.getFMeasure();0.7272727489471436
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.getFMeasure();0.7272727489471436
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.TokenizerEvaluator.processSample(opennlp.tools.tokenize.TokenSample);0.6153846383094788
opennlp.tools.tokenize.TokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.5714285969734192
opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences();opennlp.tools.tokenize.TokenSample.getText();1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener.<init>(java.io.OutputStream);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.DetokenizerEvaluator.<init>(opennlp.tools.tokenize.Detokenizer, opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener[]);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.<init>();1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.DetokenizerEvaluator.getFMeasure();0.7272727489471436
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.getFMeasure();0.7272727489471436
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.tokenize.DetokenizerEvaluator.processSample(opennlp.tools.tokenize.TokenSample);0.6153846383094788
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.5714285969734192
opennlp.tools.tokenize.TokenSampleTest.testEquals();opennlp.tools.tokenize.TokenSample.equals(java.lang.Object);1.0
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.getText();1.0
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.getTokenSpans();1.0
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.util.Span.getEnd();0.7999999523162842
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.util.Span.getStart();0.7999999523162842
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.tokenize.TokenSample.<init>(java.lang.String, opennlp.tools.util.Span[]);0.5999999642372131
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.util.Span.<init>(int, int);0.5999999642372131
opennlp.tools.tokenize.TokenSampleTest.testRetrievingContent();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.5999999642372131
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.evaluateSample(T);1.0
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.DetokenizerEvaluator.getFMeasure();0.9545454382896423
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.getFMeasure();0.9545454382896423
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.DetokenizerEvaluator.<init>(opennlp.tools.tokenize.Detokenizer, opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener[]);0.8749999403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8749999403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.<init>();0.8749999403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.Span.getEnd();0.6562499403953552
opennlp.tools.tokenize.DetokenizerEvaluatorTest.testNegative();opennlp.tools.util.Span.getStart();0.6562499403953552
opennlp.tools.tokenize.TokenSampleTest.testTokenSampleSerDe();opennlp.tools.tokenize.TokenSample.getTokenSpans();1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.evaluateSample(T);1.0
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.TokenizerEvaluator.getFMeasure();0.9545454382896423
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.getFMeasure();0.9545454382896423
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.cmdline.tokenizer.TokenEvaluationErrorListener.<init>(java.io.OutputStream);0.8749999403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.tokenize.TokenizerEvaluator.<init>(opennlp.tools.tokenize.Tokenizer, opennlp.tools.tokenize.TokenizerEvaluationMonitor[]);0.8749999403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);0.8749999403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.eval.FMeasure.<init>();0.8749999403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.Span.getEnd();0.6562499403953552
opennlp.tools.tokenize.TokenizerEvaluatorTest.testNegative();opennlp.tools.util.Span.getStart();0.6562499403953552
opennlp.tools.util.SpanTest.testStartsWith();opennlp.tools.util.Span.startsWith(opennlp.tools.util.Span);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.$Proxy12.getAlphaNumOpt();1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.$Proxy12.getIterations();1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.BooleanArgumentFactory.parseArgument(java.lang.reflect.Method, java.lang.String, java.lang.String);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.IntegerArgumentFactory.parseArgument(java.lang.reflect.Method, java.lang.String, java.lang.String);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.StringArgumentFactory.parseArgument(java.lang.reflect.Method, java.lang.String, java.lang.String);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9705882668495178
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.ArgumentParser.parse(java.lang.String[], java.lang.Class<T>);0.8000000715255737
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.$Proxy12.getCutoff();0.6000000238418579
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.$Proxy12.getEncoding();0.6000000238418579
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArguments();opennlp.tools.cmdline.CmdLineUtil.getParameter(java.lang.String, java.lang.String[]);0.6000000238418579
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getFMeasure();1.0
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.<init>();0.9166666865348816
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getRecallScore();0.785714328289032
opennlp.tools.util.eval.FMeasureTest.testEmpty();opennlp.tools.util.eval.FMeasure.getPrecisionScore();0.6470588445663452
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.updateScores(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getRecallScore();0.8571429252624512
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getFMeasure();0.8181818723678589
opennlp.tools.util.eval.FMeasureTest.testPerfect();opennlp.tools.util.eval.FMeasure.getPrecisionScore();0.7058823704719543
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.cmdline.EvaluationErrorPrinter.<init>(java.io.OutputStream);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.cmdline.namefind.NameEvaluationErrorListener.<init>(java.io.OutputStream);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.TokenNameFinderEvaluator.<init>(opennlp.tools.namefind.TokenNameFinder, opennlp.tools.namefind.TokenNameFinderEvaluationMonitor[]);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.<init>(opennlp.tools.util.eval.EvaluationMonitor<T>[]);1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.<init>();1.0
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.TokenNameFinderEvaluator.getFMeasure();0.7272727489471436
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.FMeasure.getFMeasure();0.7272727489471436
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.namefind.TokenNameFinderEvaluator.processSample(opennlp.tools.namefind.NameSample);0.6153846383094788
opennlp.tools.namefind.TokenNameFinderEvaluatorTest.testPositive();opennlp.tools.util.eval.Evaluator.evaluateSample(T);0.5714285969734192
opennlp.tools.util.eval.FMeasureTest.testMerge();opennlp.tools.util.eval.FMeasure.mergeInto(opennlp.tools.util.eval.FMeasure);1.0
opennlp.tools.util.VersionTest.testParse();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.isSnapshot();0.8999999761581421
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.equals(java.lang.Object);0.5999999642372131
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.DataIndexerFactory.getDataIndexer(opennlp.tools.util.TrainingParameters, java.util.Map<java.lang.String, java.lang.String>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8333333730697632
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);0.8333333730697632
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.AbstractDataIndexer.getNumEvents();0.6666666865348816
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.util.TrainingParameters.<init>();0.6666666865348816
opennlp.tools.util.featuregen.StringPatternTest.testContainsHyphen();opennlp.tools.util.featuregen.StringPattern.containsHyphen();1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testRandomVocabularyAndSentence();opennlp.tools.languagemodel.LanguageModelTestUtils.generateRandomVocabulary(int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testRandomVocabularyAndSentence();opennlp.tools.languagemodel.LanguageModelTestUtils.generateRandomSentence();0.875
opennlp.tools.languagemodel.NgramLanguageModelTest.testEmptyVocabularyProbability();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);0.9999999403953552
opennlp.tools.ml.BeamSearchTest.testBestSequence();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceZeroLengthInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.util.Sequence.getOutcomes();0.5833333134651184
opennlp.tools.util.featuregen.StringPatternTest.testIsAllHiragana();opennlp.tools.util.featuregen.StringPattern.isAllHiragana();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllKatakana();opennlp.tools.util.featuregen.StringPattern.isAllKatakana();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLetters();opennlp.tools.util.featuregen.StringPattern.isAllLetter();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testEnd();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsComma();opennlp.tools.util.featuregen.StringPattern.containsComma();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllDigit();opennlp.tools.util.featuregen.StringPattern.isAllDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsLetters();opennlp.tools.util.featuregen.StringPattern.containsLetters();1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testEnd();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isAllCapitalLetter();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testGenWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testGenWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testGenWAC();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);0.75
opennlp.tools.util.featuregen.StringPatternTest.testContainsDigit();opennlp.tools.util.featuregen.StringPattern.containsDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsInitialCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isInitialCapitalLetter();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testOnlyLetterTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsPeriod();opennlp.tools.util.featuregen.StringPattern.containsPeriod();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.StringPatternTest.testDigits();opennlp.tools.util.featuregen.StringPattern.digits();1.0
opennlp.tools.util.featuregen.FeatureGeneratorUtilTest.testJapanese();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);1.0
opennlp.tools.util.featuregen.FeatureGeneratorUtilTest.testJapanese();opennlp.tools.util.featuregen.StringPattern.isAllCapitalLetter();0.5555555820465088
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testShort();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.StringPatternTest.testContainsSlash();opennlp.tools.util.featuregen.StringPattern.containsSlash();1.0
opennlp.tools.util.featuregen.TokenClassFeatureGeneratorTest.testNoWAC();opennlp.tools.util.featuregen.TokenClassFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testNextOfBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testNextOfBegin();opennlp.tools.util.featuregen.TrigramNameFeatureGenerator.<init>();0.6363636255264282
opennlp.tools.util.featuregen.TrigramNameFeatureGeneratorTest.testNextOfBegin();opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(java.lang.String);0.5833333134651184
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLowerCaseLetter();opennlp.tools.util.featuregen.StringPattern.isAllLowerCaseLetter();1.0
opennlp.tools.util.featuregen.BigramNameFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.BigramNameFeatureGenerator.<init>();1.0
opennlp.tools.util.StringUtilTest.testIsEmptyWithNullString();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample();opennlp.tools.namefind.NameSample.getNames();0.9924812316894531
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSample();opennlp.tools.namefind.NameSample.getSentence();0.8270677328109741
opennlp.tools.formats.EvalitaNameSampleStreamTest.testReset();opennlp.tools.formats.EvalitaNameSampleStream.reset();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.util.PlainTextByLineStream.reset();0.8333333134651184
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);0.8333333134651184
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.<init>(opennlp.tools.formats.Conll03NameSampleStream$LANGUAGE, opennlp.tools.util.InputStreamFactory, int);0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSampleWithGermanAsLanguage();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();0.9090909361839294
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.namefind.NameSample.getSentence();0.8333333134651184
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingEnglishSample();opennlp.tools.util.Span.getStart();0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.read();1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.util.PlainTextByLineStream.reset();0.8333333134651184
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);0.8333333134651184
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.formats.ResourceAsStreamFactory.createInputStream();0.7499999403953552
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.formats.Conll03NameSampleStream.<init>(opennlp.tools.formats.Conll03NameSampleStream$LANGUAGE, opennlp.tools.util.InputStreamFactory, int);0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.formats.ResourceAsStreamFactory.<init>(java.lang.Class<?>, java.lang.String);0.6666666865348816
opennlp.tools.formats.Conll03NameSampleStreamTest.testParsingGermanSampleWithEnglishAsLanguage();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.6666666865348816
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingDutchSample();opennlp.tools.namefind.NameSample.getNames();0.8730159401893616
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.namefind.NameSample.getNames();0.9166666269302368
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.namefind.NameSample.getSentence();0.7333332896232605
opennlp.tools.formats.Conll02NameSampleStreamTest.testParsingSpanishSample();opennlp.tools.util.Span.getStart();0.550000011920929
opennlp.tools.formats.Conll02NameSampleStreamTest.testReset();opennlp.tools.formats.Conll02NameSampleStream.reset();1.0
opennlp.tools.util.StringUtilTest.testIsEmpty();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testReset();opennlp.tools.formats.Conll03NameSampleStream.reset();1.0
opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample();opennlp.tools.formats.NameFinderCensus90NameStream.read();1.0
opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample();opennlp.tools.util.StringList.getToken(int);1.0
opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample();opennlp.tools.util.PlainTextByLineStream.reset();0.6666666865348816
opennlp.tools.formats.NameFinderCensus90NameStreamTest.testParsingEnglishSample();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);0.6666666865348816
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();1.0
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.namefind.NameSample.getNames();0.9428572058677673
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.namefind.NameSample.getSentence();0.785714328289032
opennlp.tools.formats.EvalitaNameSampleStreamTest.testParsingItalianSample();opennlp.tools.util.Span.getStart();0.6285714507102966
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTT();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.<init>(boolean, boolean);1.0
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testTF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.8571429252624512
opennlp.tools.util.featuregen.SentenceFeatureGeneratorTest.testFF();opennlp.tools.util.featuregen.SentenceFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.letsmt.LetsmtDocument.parse(java.io.InputStream);1.0
opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.letsmt.LetsmtDocument.getSentences();0.800000011920929
opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.letsmt.LetsmtDocument.LetsmtSentence.getNonTokenizedText();0.6736842393875122
opennlp.tools.formats.letsmt.LetsmtDocumentTest.testParsingSimpleDoc();opennlp.tools.formats.letsmt.LetsmtDocument.LetsmtSentence.getTokens();0.6000000238418579
opennlp.tools.chunker.ChunkSampleTest.testInvalidChunkSampleArray();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);1.0
opennlp.tools.chunker.ChunkSampleTest.testToString();opennlp.tools.chunker.ChunkSample.toString();1.0
opennlp.tools.chunker.ChunkSampleTest.testParameterValidation();opennlp.tools.chunker.ChunkSample.validateArguments(int, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWithoutWindow();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.9999999403953552
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWithoutWindow();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);0.9999999403953552
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWithoutWindow();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.9285714030265808
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();0.5714285969734192
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtBeginOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);0.5714285969734192
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowSizeOne();opennlp.tools.util.featuregen.IdentityFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowSizeOne();opennlp.tools.util.featuregen.WindowFeatureGenerator.<init>(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator, int, int);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowSizeOne();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);0.6190476417541504
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testWindowAtEndOfSentence();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.WindowFeatureGeneratorTest.testForCorrectFeatures();opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getDeprel();1.0
opennlp.tools.formats.conllu.ConlluWordLineTest.testParseLine();opennlp.tools.formats.conllu.ConlluWordLine.getLemma();0.75
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionaryInsensitive();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testPOSDictionarySensitive();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.morfologik.tagdict.MorfologikTagDictionaryTest.testNoLemma();opennlp.morfologik.tagdict.MorfologikTagDictionary.getTags(java.lang.String);1.0
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.mean();1.0
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.count();0.7499999403953552
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.toString();0.7499999403953552
opennlp.tools.ml.TrainerFactoryTest.testIsSequenceTrainerTrue();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.9999999403953552
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithTokenClassFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.6818181872367859
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.7500000596046448
opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.createDOM(java.io.InputStream);0.5833333730697632
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.7499999403953552
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWihtSimpleDescriptor();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.6874999403953552
opennlp.tools.util.featuregen.GeneratorFactoryTest.testParameters();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.800000011920929
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.625
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithCustomGenerator();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.6363636255264282
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren();opennlp.tools.util.featuregen.CachedFeatureGenerator.getCachedFeatureGenerator();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testAutomaticallyInsertAggregatedFeatureGeneratorChildren();opennlp.tools.util.featuregen.AggregatedFeatureGenerator.getGenerators();0.5714285969734192
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.create(java.io.InputStream, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(org.w3c.dom.Element, opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider);0.7500000596046448
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testCreationWithUnkownElement();opennlp.tools.util.featuregen.GeneratorFactory.createDOM(java.io.InputStream);0.5833333730697632
opennlp.tools.util.featuregen.GeneratorFactoryTest.testNotAutomaticallyInsertAggregatedFeatureGeneratorChild();opennlp.tools.util.featuregen.CachedFeatureGenerator.getCachedFeatureGenerator();1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testInsertCachedFeatureGenerator();opennlp.tools.util.featuregen.CachedFeatureGenerator.getCachedFeatureGenerator();1.0
opennlp.tools.langdetect.DefaultLanguageDetectorContextGeneratorTest.extractContext();opennlp.tools.langdetect.DefaultLanguageDetectorContextGenerator.getContext(java.lang.CharSequence);1.0
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation2();opennlp.tools.ngram.NGramUtils.calculateTrigramLinearInterpolationProbability(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>, java.lang.Double, java.lang.Double, java.lang.Double);1.0
opennlp.tools.ngram.NGramUtilsTest.testLinearInterpolation();opennlp.tools.ngram.NGramUtils.calculateTrigramLinearInterpolationProbability(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>, java.lang.Double, java.lang.Double, java.lang.Double);1.0
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.clearAdaptiveData();0.8571428656578064
opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousMapFeatureGenerator.updateAdaptiveData(java.lang.String[], java.lang.String[]);0.8095238208770752
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testNotEnoughSentences();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.reset();1.0
opennlp.tools.util.SequenceTest.testToString();opennlp.tools.util.Sequence.toString();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.parser.Parse.getCoveredText();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.util.XmlUtil.createSaxParser();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.888888955116272
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect();opennlp.tools.parser.Parse.getTagNodes();0.5714285969734192
opennlp.tools.parser.ParseTest.testGetTagNodes();opennlp.tools.parser.Parse.getTagNodes();1.0
opennlp.tools.parser.PosSampleStreamTest.testConvertParseToPosSample();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.parser.PosSampleStreamTest.testConvertParseToPosSample();opennlp.tools.postag.POSSample.getSentence();0.75
opennlp.tools.dictionary.DictionaryTest.testToString();opennlp.tools.dictionary.Dictionary.toString();1.0
opennlp.uima.dictionary.DictionaryResourceTest.testDictionaryWasLoaded();opennlp.uima.dictionary.DictionaryResourceImpl.getDictionary();1.0
opennlp.tools.convert.FileToStringSampleStreamTest.readFileTest();opennlp.tools.formats.convert.FileToStringSampleStream.read();1.0
opennlp.tools.convert.FileToStringSampleStreamTest.readFileTest();opennlp.tools.formats.convert.FileToStringSampleStream.readFile(java.io.File, java.nio.charset.Charset);1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheHits();1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCacheClearAfterSentenceChange();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheMisses();1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheMisses();0.9015151262283325
opennlp.tools.util.featuregen.CachedFeatureGeneratorTest.testCachingOfSentence();opennlp.tools.util.featuregen.CachedFeatureGenerator.getNumberOfCacheHits();0.8500000238418579
opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream();opennlp.tools.parser.ParseSampleStream.read();1.0
opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream();opennlp.tools.parser.Parse.parseParse(java.lang.String);0.625
opennlp.tools.util.PlainTextByLineStreamTest.testReset();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.MockInputStreamFactory.<init>(java.lang.String);0.75
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.MockInputStreamFactory.<init>(java.lang.String, java.nio.charset.Charset);0.75
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.<init>(opennlp.tools.util.InputStreamFactory, java.nio.charset.Charset);0.75
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.PlainTextByLineStream.close();0.75
opennlp.tools.util.PlainTextByLineStreamTest.testLineSegmentation();opennlp.tools.util.MockInputStreamFactory.createInputStream();0.5882353186607361
opennlp.tools.cmdline.TokenNameFinderToolTest.usage();opennlp.tools.cmdline.namefind.TokenNameFinderTool.getHelp();1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.usage();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);0.699999988079071
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeSpace();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeChar();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.getSentence();1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.getTags();0.800000011920929
opennlp.tools.ngram.NGramModelTest.testCutoff2();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd1();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testToDictionary1();opennlp.tools.ngram.NGramModel.toDictionary(boolean);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigram();opennlp.tools.ngram.NGramUtils.getNGrams(java.lang.String[], int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigram();opennlp.tools.ngram.NGramModel.iterator();0.6749999523162842
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigramProbability();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);1.0
opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison();opennlp.tools.languagemodel.LanguageModelTestUtils.getPerplexity(opennlp.tools.languagemodel.LanguageModel, java.util.Collection<java.lang.String[]>, int);1.0
opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison();opennlp.tools.languagemodel.LanguageModelTestUtils.generateRandomVocabulary(int);0.5833333134651184
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.ngram.NGramUtils.getNGrams(java.lang.String[], int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.ngram.NGramModel.iterator();0.84375
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.languagemodel.NGramLanguageModel.<init>(int);0.75
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);0.75
opennlp.tools.languagemodel.NgramLanguageModelTest.testBigram();opennlp.tools.ngram.NGramModel.<init>();0.75
opennlp.tools.ngram.NGramModelTest.testCutoff1();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(java.lang.String[]);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.7777777910232544
opennlp.tools.ngram.NGramModelTest.testZeroGetCount();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.ngram.NGramUtils.getNGrams(java.lang.String[], int);1.0
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.languagemodel.NGramLanguageModel.add(java.lang.String[]);0.800000011920929
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(java.lang.String[]);0.7058823704719543
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(java.lang.String[]);0.6000000238418579
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.ngram.NGramModel.iterator();0.6000000238418579
opennlp.tools.languagemodel.NgramLanguageModelTest.testNgramModel();opennlp.tools.util.StringList.getToken(int);0.6000000238418579
opennlp.tools.ngram.NGramModelTest.testNumberOfGrams();opennlp.tools.ngram.NGramModel.numberOfGrams();1.0
opennlp.tools.ngram.NGramModelTest.testAdd();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testAdd3();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd2();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testZeroGetCount2();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);0.9999999403953552
opennlp.tools.namefind.BilouCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BilouCodec.createSequenceValidator();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testToString();opennlp.tools.util.eval.CrossValidationPartitioner.toString();1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent();opennlp.tools.util.XmlUtil.createSaxParser();0.875
opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testThereIsExactlyOneSent();opennlp.tools.util.FilterObjectStream.close();0.625
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.FileEventStream.close();1.0
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.OnePassRealValueDataIndexer.sortAndMerge(java.util.List<opennlp.tools.ml.model.ComparableEvent>, boolean);0.7638888359069824
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.AbstractDataIndexer.getOutcomeLabels();0.6875
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.FileEventStream.<init>(java.io.Reader);0.6666666865348816
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String);0.6666666865348816
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.FileEventStream.<init>(java.lang.String, java.lang.String);0.6666666865348816
opennlp.tools.ml.maxent.io.RealValueFileEventStreamTest.testLastLineBug();opennlp.tools.ml.model.RealValueFileEventStream.<init>(java.lang.String);0.6666666865348816
opennlp.tools.util.ObjectStreamUtilsTest.buildStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.util.ObjectStreamUtilsTest.buildStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(java.util.Collection<T>);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.concatenateObjectStream(java.util.Collection<opennlp.tools.util.ObjectStream<T>>);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.concatenateObjectStream(opennlp.tools.util.ObjectStream<T>[]);1.0
opennlp.tools.util.ObjectStreamUtilsTest.concatenateStreamTest();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);0.7863247990608215
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.util.ObjectStreamUtils.createObjectStream(T[]);1.0
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.formats.muc.DocumentSplitterStream.<init>(opennlp.tools.util.ObjectStream<java.lang.String>);0.6352941393852234
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.util.FilterObjectStream.<init>(opennlp.tools.util.ObjectStream<S>);0.6352941393852234
opennlp.tools.formats.muc.DocumentSplitterStreamTest.testSplitTwoDocuments();opennlp.tools.util.FilterObjectStream.close();0.6352941393852234
opennlp.tools.namefind.BilouCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BioCodec.extractNameType(java.lang.String);0.5833333134651184
opennlp.tools.namefind.BilouCodecTest.testDecodeEmpty();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.namefind.BioCodec.extractNameType(java.lang.String);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BioCodec.extractNameType(java.lang.String);0.5833333134651184
opennlp.tools.namefind.BilouCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeMultiClass();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.BilouCodecTest.testDecodePairFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testhHashCode();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.parser.ParseTest.testParseClone();opennlp.tools.parser.Parse.parseParse(java.lang.String);1.0
opennlp.tools.parser.ParseTest.testParseClone();opennlp.tools.parser.Parse.clone();0.8333333134651184
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.sentdetect.SentenceSample.getDocument();0.8571428656578064
opennlp.tools.sentdetect.SentenceSampleTest.testRetrievingContent();opennlp.tools.util.Span.getEnd();0.5714285969734192
opennlp.tools.parser.ParseTest.testGetText();opennlp.tools.parser.Parse.getText();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);0.800000011920929
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);0.800000011920929
opennlp.tools.namefind.BioCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testDecodeSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.6666666865348816
opennlp.tools.parser.ParseTest.testToHashCode();opennlp.tools.parser.Parse.hashCode();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeTripleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeTripleTokenSpan();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeTripleTokenSpan();opennlp.tools.namefind.NameSample.getNames();0.6666666269302368
opennlp.tools.util.SpanTest.testContainsWithHigherIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testShow();opennlp.tools.parser.Parse.show(java.lang.StringBuffer);1.0
opennlp.tools.sentdetect.SentenceSampleTest.testInvalidSpansFailFast();opennlp.tools.sentdetect.SentenceSample.<init>(java.lang.CharSequence, opennlp.tools.util.Span[]);1.0
opennlp.tools.sentdetect.SentenceSampleTest.testInvalidSpansFailFast();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.sentdetect.SentenceSampleTest.testInvalidSpansFailFast();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.util.Span.equals(java.lang.Object);0.8000000715255737
opennlp.tools.namefind.NameSampleTest.testNameSampleSerDe();opennlp.tools.namefind.NameSample.getAdditionalContext();0.6000000238418579
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpanNoType();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpanNoType();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpanNoType();opennlp.tools.namefind.NameSample.getNames();0.8333333134651184
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BioCodec.extractNameType(java.lang.String);0.5833333134651184
opennlp.tools.chunker.ChunkSampleTest.testPhraseAsSpan();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.util.SpanTest.testContainsWithEqual();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testToString();opennlp.tools.util.Span.toString();1.0
opennlp.tools.namefind.NameSampleTest.testNoTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.util.SpanTest.testCompareToLower();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testCompareToEquals();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithLowerIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);0.9999999403953552
opennlp.tools.sentdetect.SentenceSampleTest.testEquals();opennlp.tools.sentdetect.SentenceSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameFinderMETest.testDropOverlappingSpans();opennlp.tools.namefind.NameFinderME.dropOverlappingSpans(opennlp.tools.util.Span[]);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsSameType();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeMultiClass();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.util.eval.FMeasureTest.testPrecision();opennlp.tools.util.eval.FMeasure.precision(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.formats.ad.ADSentenceSampleStreamTest.testSentences();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testSentenceSampleSerDe();opennlp.tools.sentdetect.SentenceSample.getSentences();1.0
opennlp.tools.sentdetect.SentenceSampleTest.testSentenceSampleSerDe();opennlp.tools.sentdetect.SentenceSample.getDocument();0.5555555820465088
opennlp.tools.util.SpanTest.testCompareToHigher();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.util.Span.<init>(int, int, java.lang.String);1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testMissingRightContraction();opennlp.tools.util.Span.getStart();0.625
opennlp.tools.namefind.BioCodecTest.testDecodePairFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.toString();1.0
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.getStart();0.800000011920929
opennlp.tools.namefind.NameSampleTest.testOverlappingNameSpans();opennlp.tools.util.Span.getEnd();0.6000000238418579
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testEquals();opennlp.tools.parser.Parse.equals(java.lang.Object);1.0
opennlp.tools.util.eval.FMeasureTest.testRecall();opennlp.tools.util.eval.FMeasure.recall(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.util.Span.getType();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testNames();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.BioCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testContains();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.NameSample.getSentence();0.8333332538604736
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.NameSample.getNames();0.6666666269302368
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);0.9999999403953552
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.namefind.NameSample.getNames();0.8333333134651184
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.namefind.NameSample.getSentence();0.8333333134651184
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);0.8333333134651184
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.util.Span.getStart();0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.namefind.NameSample.getNames();0.8333333730697632
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.namefind.NameSample.getSentence();0.8333333730697632
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);0.8333333730697632
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.util.Span.getStart();0.6666666865348816
opennlp.tools.parser.ParseTest.testToString();opennlp.tools.parser.Parse.toString();1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.util.Span.equals(java.lang.Object);0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BioCodec.extractNameType(java.lang.String);0.5833333134651184
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.namefind.NameSample.toString();0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.<init>(int, int);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.800000011920929
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.getStart();0.6000000238418579
opennlp.tools.namefind.NameSampleTest.testNameAtEnd();opennlp.tools.util.Span.getType();0.6000000238418579
opennlp.tools.util.SpanTest.testCompareToEqualsNullType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.parseParse(java.lang.String);1.0
opennlp.tools.parser.ParseTest.testTokenReplacement();opennlp.tools.parser.Parse.encodeToken(java.lang.String);0.6000000238418579
opennlp.tools.namefind.BioCodecTest.testEncodeSingleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeSingleTokenSpan();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.BioCodecTest.testEncodeSingleTokenSpan();opennlp.tools.namefind.NameSample.getNames();0.8333332538604736
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.util.Span.getEnd();0.7499999403953552
opennlp.tools.namefind.NameSampleTest.testSequentialSpans();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();0.5965908765792847
opennlp.tools.util.SpanTest.testCompareToEqualsNullType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.namefind.NameSample.isClearAdaptiveDataSet();0.8000000715255737
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);0.8000000715255737
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.util.Span.getStart();0.8000000715255737
opennlp.tools.namefind.NameSampleTest.testUnsortedSequentialSpans();opennlp.tools.util.Span.getEnd();0.6000000238418579
opennlp.tools.namefind.NameSampleTest.testEquals();opennlp.tools.namefind.NameSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.NameSample.getSentence();0.8333332538604736
opennlp.tools.namefind.BilouCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.NameSample.getNames();0.6666666269302368
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.namefind.NameSample.getNames();0.833333432674408
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);0.833333432674408
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.util.Span.getEnd();0.6666666865348816
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.util.Span.getStart();0.6666666865348816
opennlp.tools.util.SpanTest.testEquals();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.SpanTest.testGetStart();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.util.eval.FMeasureTest.testCountTruePositives();opennlp.tools.util.eval.FMeasure.countTruePositives(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.SpanTest.testCrosses();opennlp.tools.util.Span.crosses(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testIntersects();opennlp.tools.util.Span.intersects(opennlp.tools.util.Span);1.0
opennlp.tools.util.TrainingParametersTest.testGetParameters();opennlp.tools.util.TrainingParameters.getParameters(java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.emptyTest();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateLargerWindowThanListTest();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest1();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateListTest3();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateListTest4();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateListTest2();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);0.9999999403953552
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndNotSameType();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndNotSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.9230769276618958
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterOther();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndSameType();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.7692307829856873
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueCannotBeFirstOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testOtherIsAlwaysAValidOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.9999999403953552
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndNotSameType();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterStartAndNotSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.7692307829856873
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testStartIsAlwaysAValidOutcome();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.9999999403953552
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndSameType();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);1.0
opennlp.tools.namefind.NameFinderSequenceValidatorTest.testContinueAfterContinueAndSameType();opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);0.9230769872665405
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName();opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(java.lang.Class<T>, java.lang.String);0.5833333134651184
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.<init>(java.nio.file.Path);1.0
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.<init>(morfologik.stemming.Dictionary);1.0
opennlp.morfologik.builder.POSDictionayBuilderTest.testBuildDictionary();opennlp.morfologik.builder.MorfologikDictionayBuilder.build(java.nio.file.Path);0.8333333730697632
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.compareTo(opennlp.tools.util.Sequence);1.0
opennlp.tools.util.SequenceTest.testCopyConstructor();opennlp.tools.util.Sequence.getOutcomes();0.6666666865348816
opennlp.tools.util.SequenceTest.testAddMethod();opennlp.tools.util.Sequence.add(java.lang.String, double);1.0
opennlp.tools.util.SequenceTest.testAddMethod();opennlp.tools.util.Sequence.getProbs();1.0
opennlp.tools.util.SequenceTest.testAddMethod();opennlp.tools.util.Sequence.getOutcomes();0.8181818723678589
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName2();opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(java.lang.Class<T>, java.lang.String);0.5833333134651184
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.util.featuregen.GeneratorFactoryTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappings(java.io.InputStream);1.0
opennlp.tools.util.featuregen.GeneratorFactoryClassicFormatTest.testDictionaryArtifactToSerializerMappingExtraction();opennlp.tools.util.featuregen.GeneratorFactory.extractArtifactSerializerMappingsClassicFormat(org.w3c.dom.Element);0.5555555820465088
opennlp.tools.util.SpanTest.testGetEnd();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);0.8571428060531616
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.NameSample.getNames();0.7142857313156128
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.NameSample.<init>(java.lang.String, java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.5714285373687744
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], boolean);0.5714285373687744
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.NameSample.<init>(java.lang.String[], opennlp.tools.util.Span[], java.lang.String[][], boolean);0.5714285373687744
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.util.Span.<init>(int, int, java.lang.String);0.5714285373687744
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.5714285373687744
opennlp.tools.lemmatizer.LemmaSampleTest.testEquals();opennlp.tools.lemmatizer.LemmaSample.equals(java.lang.Object);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testLemmaSampleSerDe();opennlp.tools.lemmatizer.LemmaSample.getLemmas();1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.validateArguments(int, int, int);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testRetrievingContent();opennlp.tools.lemmatizer.LemmaSample.getTokens();0.8333333730697632
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testUseAllTokens();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.8000000715255737
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testNull();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>();1.0
opennlp.tools.doccat.BagOfWordsFeatureGeneratorTest.testNull();opennlp.tools.doccat.BagOfWordsFeatureGenerator.<init>(boolean);1.0
opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.5999999642372131
opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.5999999642372131
opennlp.tools.util.StringList.getToken(int);opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(java.lang.String);1.0
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);0.7333332896232605
opennlp.tools.util.StringList.size();opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(java.lang.String);0.6666666865348816
opennlp.tools.util.StringList.toString();opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int, java.lang.Object[], java.lang.String[]);1.0
opennlp.tools.util.StringList.toString();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);0.8333333134651184
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testDifferentCaseLookupCaseSensitive();opennlp.tools.util.StringList.<init>(java.lang.String[]);0.800000011920929
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();null.contains(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testDifferentCaseLookup();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();null.contains(java.lang.Object);0.6666666865348816
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();null.hasNext();0.6666666865348816
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEqualsDifferentCase();null.iterator();0.6666666865348816
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCode();null.hasNext();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();null.contains(java.lang.Object);0.6000000238418579
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSetDiffCase();null.size();0.6000000238418579
opennlp.tools.dictionary.DictionaryTest.testHashCode();opennlp.tools.dictionary.Dictionary.hashCode();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEquals();opennlp.tools.dictionary.Dictionary.StringListWrapper.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testEquals();null.hasNext();0.5714285969734192
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();null.hasNext();0.8333332538604736
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();null.iterator();0.6666666269302368
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();0.6666666269302368
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.asStringSet();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();null.hasNext();0.8333332538604736
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();null.iterator();0.6666666269302368
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCodeDifferentCase();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();0.6666666269302368
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSet();null.size();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testSet();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);0.6666666865348816
opennlp.tools.dictionary.DictionaryTest.testLookupCaseSensitive();opennlp.tools.dictionary.Dictionary.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryTest.testLookupCaseSensitive();opennlp.tools.util.StringList.<init>(java.lang.String[]);0.75
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCode();null.hasNext();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testHashCode();opennlp.tools.dictionary.Dictionary.StringListWrapper.hashCode();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testLookup();opennlp.tools.dictionary.Dictionary.put(opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testLookup();null.contains(java.lang.Object);0.75
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm();1.0
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm(java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.defaultParams();1.0
opennlp.tools.util.TrainingParametersTest.testDefault();opennlp.tools.util.TrainingParameters.algorithm();0.6190476417541504
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.$Proxy10.getEncoding();1.0
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9000000357627869
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.ArgumentParser.methodNameToParameter(java.lang.String);0.699999988079071
opennlp.tools.cmdline.ArgumentParserTest.testDefaultEncodingParameter();opennlp.tools.cmdline.CmdLineUtil.getParameter(java.lang.String, java.lang.String[]);0.550000011920929
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, double);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.putIfAbsent(java.lang.String, double);0.9090909361839294
opennlp.tools.ngram.NGramModelTest.testInvalidFormat();opennlp.tools.ngram.NGramModel.<init>(java.io.InputStream);0.9999999403953552
opennlp.tools.ngram.NGramModelTest.testInvalidFormat();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.create(java.io.InputStream, opennlp.tools.dictionary.serializer.EntryInserter);0.7499999403953552
opennlp.tools.ngram.NGramModelTest.testInvalidFormat();opennlp.tools.dictionary.serializer.DictionaryEntryPersistor.DictionaryContenthandler.startDocument();0.6249999403953552
opennlp.tools.util.model.ByteArraySerializerTest.testSerialization();opennlp.tools.util.model.ByteArraySerializer.serialize(byte[], java.io.OutputStream);0.9999999403953552
opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.6666666865348816
opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.5833333134651184
opennlp.tools.ml.TrainerFactoryTest.testSequenceTrainerValid();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.5833333134651184
opennlp.tools.ml.TrainerFactoryTest.testInvalidTrainer();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testInvalidTrainer();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.5833333134651184
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.$Proxy10.getEncoding();1.0
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.699999988079071
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.ArgumentParser.methodNameToParameter(java.lang.String);0.6666666865348816
opennlp.tools.cmdline.ArgumentParserTest.testSetEncodingParameter();opennlp.tools.cmdline.CmdLineUtil.getParameter(java.lang.String, java.lang.String[]);0.550000011920929
opennlp.tools.ml.ArrayMathTest.testL1Norm();opennlp.tools.ml.ArrayMath.l1norm(double[]);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);1.0
opennlp.tools.tokenize.DetokenizationDictionaryTest.testSimpleDict();opennlp.tools.tokenize.DetokenizationDictionary.getOperation(java.lang.String);1.0
opennlp.tools.cmdline.ArgumentParserTest.testZeroMethods();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsUsage();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testInvalidReturnType();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testInvalidMethodName();opennlp.tools.cmdline.ArgumentParser.createUsage(java.lang.Class<T>);1.0
opennlp.tools.ngram.NGramUtilsTest.testNgramMLProbability();opennlp.tools.ngram.NGramUtils.calculateNgramMLProbability(opennlp.tools.util.StringList, java.lang.Iterable<opennlp.tools.util.StringList>);1.0
opennlp.tools.ngram.NGramUtilsTest.testTrigramMLProbability();opennlp.tools.ngram.NGramUtils.calculateTrigramMLProbability(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable<opennlp.tools.util.StringList>);0.9999999403953552
opennlp.tools.ngram.NGramUtilsTest.testBigramMLProbability();opennlp.tools.ngram.NGramUtils.calculateBigramMLProbability(java.lang.String, java.lang.String, java.util.Collection<opennlp.tools.util.StringList>);1.0
opennlp.tools.util.SequenceTest.testCompareTo();opennlp.tools.util.Sequence.compareTo(opennlp.tools.util.Sequence);1.0
opennlp.tools.ml.TrainerFactoryTest.testEventTrainerValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testEventTrainerValid();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);0.75
opennlp.tools.ml.TrainerFactoryTest.testEventTrainerValid();opennlp.tools.util.TrainingParameters.getStringParameter(java.lang.String, java.lang.String);0.6296296119689941
opennlp.tools.ml.TrainerFactoryTest.testEventTrainerValid();opennlp.tools.util.TrainingParameters.getIntParameter(java.lang.String, int);0.5833333134651184
opennlp.tools.ml.TrainerFactoryTest.testIsSequenceTrainerFalse();opennlp.tools.ml.TrainerFactory.getTrainerType(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.ml.TrainerFactoryTest.testBuiltInValid();opennlp.tools.ml.TrainerFactory.isValid(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.<init>(java.io.InputStream);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.<init>(opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.util.TrainingParametersTest.testConstructors();opennlp.tools.util.TrainingParameters.getSettings();1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.FileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.Event.toString();1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();0.800000011920929
opennlp.tools.ml.model.FileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.Event.toString();1.0
opennlp.tools.ml.model.FileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();0.800000011920929
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.<init>();1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testEmpty();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.8000000715255737
opennlp.tools.doccat.NGramFeatureGeneratorTest.testNull();opennlp.tools.doccat.NGramFeatureGenerator.<init>();1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testNull();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest2();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest3();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.SuffixFeatureGeneratorTest.lengthTest1();opennlp.tools.util.featuregen.SuffixFeatureGenerator.<init>(int);1.0
opennlp.tools.lemmatizer.DictionaryLemmatizerTest.testForNullPointerException();opennlp.tools.lemmatizer.DictionaryLemmatizer.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testParameterValidation();opennlp.tools.lemmatizer.LemmaSample.validateArguments(int, int, int);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testToString();opennlp.tools.lemmatizer.LemmaSample.toString();1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan2();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan1();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.chunker.ChunkSampleTest.testInvalidPhraseAsSpan3();opennlp.tools.chunker.ChunkSample.phrasesAsSpanList(java.lang.String[], java.lang.String[], java.lang.String[]);1.0
opennlp.tools.util.StringListTest.testIterator();opennlp.tools.util.StringList.iterator();1.0
opennlp.tools.util.StringUtilTest.testToLowerCase();opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.TokenFeatureGeneratorTest.testLowerCase();opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsZeroArguments();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsMissingEncoding();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsOneArgument();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);1.0
opennlp.tools.cmdline.ArgumentParserTest.testAllOptionalArgumentsExtraArgument();opennlp.tools.cmdline.ArgumentParser.validateArguments(java.lang.String[], java.lang.Class<T>);0.9999999403953552
opennlp.tools.util.normalizer.NumberCharSequenceNormalizerTest.normalize();opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByLast();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);0.625
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByContinue();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);0.5999999642372131
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByLast();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);0.625
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByContinue();opennlp.tools.namefind.NameFinderME.extractNameType(java.lang.String);0.625
opennlp.tools.ml.BeamSearchTest.testBestSequenceWithValidator();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.parser.lang.en.HeadRulesTest.testSerialization();opennlp.tools.parser.lang.en.HeadRules.serialize(java.io.Writer);0.9999999403953552
opennlp.tools.namefind.BioCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BioCodec.createSequenceValidator();1.0
opennlp.tools.ngram.NGramModelTest.testContains2();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testContains();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testRemove();opennlp.tools.ngram.NGramModel.remove(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeNoNames();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeNoNames();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.BioCodecTest.testEncodeNoNames();opennlp.tools.namefind.NameSample.getSentence();0.8333333730697632
opennlp.tools.namefind.BilouCodecTest.testEncodeNoNames();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeNoNames();opennlp.tools.namefind.NameSample.getNames();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeNoNames();opennlp.tools.namefind.NameSample.getSentence();0.8333333730697632
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.close();1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.directoryNullFilterTest();opennlp.tools.formats.DirectorySampleStream.close();0.75
opennlp.tools.formats.DirectorySampleStreamTest.invalidDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.invalidDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.close();1.0
opennlp.tools.formats.DirectorySampleStreamTest.recursiveDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.formats.DirectorySampleStreamTest.resetDirectoryTest();opennlp.tools.formats.DirectorySampleStream.reset();1.0
opennlp.tools.formats.DirectorySampleStreamTest.resetDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();0.6000000238418579
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File, java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.<init>(java.io.File[], java.io.FileFilter, boolean);1.0
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.close();1.0
opennlp.tools.formats.DirectorySampleStreamTest.emptyDirectoryTest();opennlp.tools.formats.DirectorySampleStream.read();1.0
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest2();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest3();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.util.featuregen.PrefixFeatureGeneratorTest.lengthTest1();opennlp.tools.util.featuregen.PrefixFeatureGenerator.<init>(int);1.0
opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest.testScanning();opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.<init>(char[]);1.0
opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest.testScanning();opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.getPositions(java.lang.String);1.0
opennlp.tools.ml.ArrayMathTest.testInvL2Norm();opennlp.tools.ml.ArrayMath.invL2norm(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testL2Norm();opennlp.tools.ml.ArrayMath.l2norm(double[]);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeUrl();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeEmail();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testBegin();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testNext();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.featuregen.PosTaggerFeatureGeneratorTest.testMiddle();opennlp.tools.util.featuregen.PosTaggerFeatureGenerator.<init>();1.0
opennlp.tools.util.normalizer.EmojiCharSequenceNormalizerTest.normalizeEmoji();opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringListTest.testGetToken();opennlp.tools.util.StringList.getToken(int);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.<init>(java.lang.String);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.<init>(java.lang.String[]);1.0
opennlp.tools.util.StringListTest.testIntern();opennlp.tools.util.StringList.getToken(int);0.75
opennlp.tools.util.StringListTest.testHashCode();opennlp.tools.util.StringList.hashCode();1.0
opennlp.tools.util.StringListTest.testEquals();opennlp.tools.util.StringList.equals(java.lang.Object);1.0
opennlp.tools.util.StringListTest.testToString();opennlp.tools.util.StringList.toString();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindMatchingPatternWithoutMatchingTokenBounds();opennlp.tools.namefind.RegexNameFinder.<init>(java.util.Map<java.lang.String, java.util.regex.Pattern[]>);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindMatchingPatternWithoutMatchingTokenBounds();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.util.SpanTest.testEqualsWithNull();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.clearAdaptiveData();0.8571428656578064
opennlp.tools.util.featuregen.PreviousTwoMapFeatureGeneratorTest.testFeatureGeneration();opennlp.tools.util.featuregen.PreviousTwoMapFeatureGenerator.updateAdaptiveData(java.lang.String[], java.lang.String[]);0.8095238208770752
opennlp.tools.util.VersionTest.testParseInvalidVersion2();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseInvalidVersion();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeEmpty();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testUnigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.test12gram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.test13gram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize1();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize1();opennlp.tools.util.InvalidFormatException.<init>(java.lang.String);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize2();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testInvalidGramSize2();opennlp.tools.util.InvalidFormatException.<init>(java.lang.String);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testBigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testBigram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);0.8000000715255737
opennlp.tools.doccat.NGramFeatureGeneratorTest.testTrigram();opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(java.lang.String[], java.util.Map<java.lang.String, java.lang.Object>);1.0
opennlp.tools.doccat.NGramFeatureGeneratorTest.testTrigram();opennlp.tools.doccat.NGramFeatureGenerator.<init>(int, int);0.7142857313156128
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getValues();1.0
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getOutcome();0.7142857313156128
opennlp.tools.ml.model.EventTest.testWithoutValues();opennlp.tools.ml.model.Event.getContext();0.5714285969734192
opennlp.tools.ml.model.EventTest.testWithValues();opennlp.tools.ml.model.Event.getValues();1.0
opennlp.tools.ml.model.EventTest.testNullOutcome();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);1.0
opennlp.tools.ml.model.EventTest.testNullOutcome();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);1.0
opennlp.tools.ml.model.EventTest.testNullContext();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[]);1.0
opennlp.tools.ml.model.EventTest.testNullContext();opennlp.tools.ml.model.Event.<init>(java.lang.String, java.lang.String[], float[]);1.0
opennlp.tools.util.SpanTest.testContainsInt();opennlp.tools.util.Span.contains(int);1.0
opennlp.tools.util.SpanTest.testLength();opennlp.tools.util.Span.length();1.0
opennlp.tools.util.SpanTest.testStartLargerThanEnd();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.util.SpanTest.testStartLargerThanEnd();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.util.SpanTest.testTooSmallEnd();opennlp.tools.util.Span.<init>(int, int);1.0
opennlp.tools.util.SpanTest.testTooSmallEnd();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);1.0
opennlp.tools.util.SpanTest.testTooSmallStart();opennlp.tools.util.Span.<init>(int, int);0.9999999403953552
opennlp.tools.util.SpanTest.testTooSmallStart();opennlp.tools.util.Span.<init>(int, int, java.lang.String, double);0.9999999403953552
opennlp.tools.formats.ad.ADNameSampleStreamTest.testCheckMergedContractions();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testSize();opennlp.tools.namefind.NameSample.getSentence();1.0
opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence();opennlp.tools.namefind.NameSample.getSentence();0.9999999403953552
opennlp.tools.ml.ArrayMathTest.testToIntArray();opennlp.tools.ml.ArrayMath.toIntArray(java.util.List<java.lang.Integer>);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProduct();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProductDoubleNaN();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.lemmatizer.DictionaryLemmatizerMultiTest.testForNullPointerException();opennlp.tools.lemmatizer.DictionaryLemmatizer.lemmatize(java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.tools.ml.ArrayMathTest.testToDoubleArray();opennlp.tools.ml.ArrayMath.toDoubleArray(java.util.List<java.lang.Double>);1.0
opennlp.tools.langdetect.LanguageSampleTest.testNullLang();opennlp.tools.langdetect.LanguageSample.<init>(opennlp.tools.langdetect.Language, java.lang.CharSequence);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.noFeaturesTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesSuccessiveTokensTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest1();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest3();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest2();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);0.9999999403953552
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest4();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);0.9999999403953552
opennlp.tools.ml.ArrayMathTest.testLogSumOfExps();opennlp.tools.ml.ArrayMath.logSumOfExps(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testMax();opennlp.tools.ml.ArrayMath.max(double[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartContinue();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityStartContinueOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleStart();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityContinueOther();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityMultiClass();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityRepeated();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);0.9999999403953552
opennlp.tools.namefind.BioCodecTest.testCompatibilityBadTag();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilitySingleContinue();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testCompatibilityEmpty();opennlp.tools.namefind.BioCodec.areOutcomesCompatible(java.lang.String[]);0.9999999403953552
opennlp.tools.util.ext.ExtensionLoaderTest.testLoadingStringGenerator();opennlp.tools.util.ext.ExtensionLoader.instantiateExtension(java.lang.Class<T>, java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByStart();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByStart();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testContinueFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testStartFollowedByOther();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testBeginFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByBegin();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByOutside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByLast();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testLastAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByInside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitFollowedByUnit();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOutsideFollowedByOutside();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testUnitAsFirstLabel();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.namefind.BilouNameFinderSequenceValidatorTest.testOtherFollowedByContinue();opennlp.tools.namefind.BilouNameFinderSequenceValidator.validSequence(int, java.lang.String[], java.lang.String[], java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings();1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings(java.lang.String);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeHashtag();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeRT();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeLaugh();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeUser();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeFace();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringUtilTest.testToUpperCase();opennlp.tools.util.StringUtil.toUpperCase(java.lang.CharSequence);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityEmpty();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);0.9999999403953552
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityUnitOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesStart();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);0.9999999403953552
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityWrongClass();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityBadTag();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityLastUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLastOtherUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartUnit();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesContinue();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilitySinglesLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityContinueLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityMultiClass();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartLast();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinueLastOther();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.namefind.BilouCodecTest.testCompatibilityStartContinue();opennlp.tools.namefind.BilouCodec.areOutcomesCompatible(java.lang.String[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException2();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException1();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmax();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
