test-class;tested-class;score
opennlp.tools.doccat.DocumentCategorizerNBTest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();1.0
opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testBinaryModelPersistence();opennlp.tools.ml.naivebayes.NaiveBayesModelWriter.persist();1.0
opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining();opennlp.tools.parser.chunking.Parser.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.parser.Parse>, opennlp.tools.parser.HeadRules, opennlp.tools.util.TrainingParameters);1.0
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.AbstractBottomUpParser.parse(opennlp.tools.parser.Parse);1.0
opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining();opennlp.tools.parser.treeinsert.Parser.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.parser.Parse>, opennlp.tools.parser.HeadRules, int, int);1.0
opennlp.tools.postag.POSTaggerMETest.testPOSTagger();opennlp.tools.postag.POSTaggerME.tag(java.lang.String[]);1.0
opennlp.tools.cmdline.TokenNameFinderToolTest.run();opennlp.tools.cmdline.namefind.TokenNameFinderTool.run(java.lang.String[]);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndexWithNewline();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinder();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes();opennlp.tools.namefind.NameFinderME.find(java.lang.String[]);1.0
opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);1.0
opennlp.tools.formats.nkjp.NKJPTextDocumentTest.testGetParagraphs();opennlp.tools.formats.nkjp.NKJPTextDocument.getParagraphs();1.0
opennlp.tools.doccat.DocumentSampleTest.testEquals();opennlp.tools.doccat.DocumentSample.equals(java.lang.Object);1.0
opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining();opennlp.tools.doccat.DocumentCategorizerME.train(java.lang.String, opennlp.tools.util.ObjectStream<opennlp.tools.doccat.DocumentSample>, opennlp.tools.util.TrainingParameters, opennlp.tools.doccat.DoccatFactory);1.0
opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testModelEquals();opennlp.tools.ml.model.AbstractModel.equals(java.lang.Object);1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseSpanishS300();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseContraction();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.util.ParagraphStreamTest.testReset();opennlp.tools.util.FilterObjectStream.reset();1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseSpanishS300();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluTokenSampleStreamTest.testParseTwoSentences();opennlp.tools.tokenize.TokenSample.parse(java.lang.String, java.lang.String);1.0
opennlp.tools.formats.conllu.ConlluPOSSampleStreamTest.testParseContraction();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.util.ParagraphStreamTest.testSimpleReading();opennlp.tools.util.ParagraphStream.read();1.0
opennlp.tools.formats.ad.ADParagraphStreamTest.testSimpleReading();opennlp.tools.formats.ad.ADSentenceStream.read();1.0
opennlp.tools.tokenize.TokenizerFactoryTest.testCreateDummyFactory();opennlp.tools.tokenize.TokenizerFactory.create(java.lang.String, java.lang.String, opennlp.tools.dictionary.Dictionary, boolean, java.util.regex.Pattern);1.0
opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate();opennlp.tools.langdetect.LanguageDetectorCrossValidator.evaluate(opennlp.tools.util.ObjectStream<opennlp.tools.langdetect.LanguageSample>, int);1.0
opennlp.tools.langdetect.LanguageDetectorCrossValidatorTest.evaluate();opennlp.tools.ml.maxent.GISModel.eval(int[], double[], opennlp.tools.ml.model.EvalParameters);1.0
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.equals(java.lang.Object);1.0
opennlp.tools.postag.POSDictionaryTest.testEqualsAndHashCode();opennlp.tools.postag.POSDictionary.hashCode();1.0
opennlp.tools.chunker.ChunkSampleTest.testNicePrint();opennlp.tools.chunker.ChunkSample.nicePrint();1.0
opennlp.tools.chunker.ChunkSampleTest.testEquals();opennlp.tools.chunker.ChunkSample.equals(java.lang.Object);1.0
opennlp.tools.chunker.ChunkSampleStreamTest.testReadingEvents();opennlp.tools.chunker.ChunkSampleStream.read();1.0
opennlp.tools.cmdline.CLITest.testMainHelpMessage();opennlp.tools.cmdline.CLI.main(java.lang.String[]);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFail();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readOverlapFilter();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.formats.brat.BratDocumentParserTest.testParse();opennlp.tools.formats.brat.BratDocumentParser.parse(opennlp.tools.formats.brat.BratDocument);1.0
opennlp.tools.formats.brat.BratNameSampleStreamTest.readNoOverlap();opennlp.tools.formats.brat.SegmenterObjectStream.read();1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyTag();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContext();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary();opennlp.tools.postag.POSTaggerME.buildNGramDictionary(opennlp.tools.util.ObjectStream<opennlp.tools.postag.POSSample>, int);1.0
opennlp.tools.postag.POSSampleTest.testParseEmtpyToken();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.postag.POSSampleTest.testEquals();opennlp.tools.postag.POSSample.equals(java.lang.Object);1.0
opennlp.tools.formats.muc.SgmlParserTest.testParse1();opennlp.tools.formats.muc.SgmlParser.parse(java.io.Reader, opennlp.tools.formats.muc.SgmlParser$ContentHandler);1.0
opennlp.tools.postag.POSSampleTest.testParse();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.tokenize.TokenizerMETest.testTokenizer();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.namefind.NameSampleTest.testWithTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.util.SpanTest.testTrim();opennlp.tools.util.Span.trim(java.lang.CharSequence);1.0
opennlp.tools.postag.POSSampleTest.testParseWithError();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.namefind.NameSampleTest.testParseWithAdditionalSpace();opennlp.tools.namefind.NameSample.parse(java.lang.String, boolean);1.0
opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel();opennlp.tools.tokenize.AbstractTokenizer.tokenize(java.lang.String);1.0
opennlp.tools.sentdetect.DefaultSDContextGeneratorTest.testGetContextWithAbbreviations();opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(java.lang.CharSequence, int);1.0
opennlp.tools.util.SpanTest.testTrimWhitespaceSpan();opennlp.tools.util.Span.trim(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguage();opennlp.tools.langdetect.LanguageDetectorME.predictLanguage(java.lang.CharSequence);1.0
opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel();opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int, opennlp.tools.ml.model.DataIndexer);1.0
opennlp.tools.tokenize.TokenSampleTest.testCreationWithDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testCreateDummyFactory();opennlp.tools.sentdetect.SentenceDetectorFactory.create(java.lang.String, java.lang.String, boolean, opennlp.tools.dictionary.Dictionary, char[]);1.0
opennlp.tools.ngram.NGramModelTest.testSerialize();opennlp.tools.ngram.NGramModel.serialize(java.io.OutputStream);1.0
opennlp.tools.postag.POSDictionaryTest.testToString();opennlp.tools.postag.POSDictionary.toString();1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizeToString2();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[], java.lang.String);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature5();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature3();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature2();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testGISTrainSignature1();opennlp.tools.ml.AbstractEventTrainer.train(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ngram.NGramUtilsTest.testGetNGrams();opennlp.tools.ngram.NGramUtils.getNGrams(opennlp.tools.util.StringList, int);1.0
opennlp.tools.util.StringList.<init>(java.lang.String);opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);1.0
opennlp.tools.dictionary.Dictionary.StringListWrapper.<init>(opennlp.tools.dictionary.Dictionary, opennlp.tools.util.StringList);opennlp.tools.util.StringList.<init>(java.lang.String);4.0
opennlp.tools.util.StringListTest.testCompareToIgnoreCase();opennlp.tools.util.StringList.compareToIgnoreCase(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testToDictionary();opennlp.tools.ngram.NGramModel.toDictionary();1.0
opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryTest.testEquals();opennlp.tools.dictionary.Dictionary.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryTest.testParseOneEntryPerLine();opennlp.tools.dictionary.Dictionary.parseOneEntryPerLine(java.io.Reader);1.0
opennlp.tools.ml.model.OnePassDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.TwoPassDataIndexerTest.testIndex();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndexValues();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.model.OnePassRealValueDataIndexerTest.testIndex();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.langdetect.LanguageSampleTest.testToString();opennlp.tools.langdetect.LanguageSample.toString();1.0
opennlp.tools.langdetect.LanguageDetectorMETest.testPredictLanguages();opennlp.tools.langdetect.LanguageDetectorME.predictLanguages(java.lang.CharSequence);1.0
opennlp.tools.langdetect.LanguageSampleTest.testEquals();opennlp.tools.langdetect.LanguageSample.equals(java.lang.Object);1.0
opennlp.tools.langdetect.LanguageTest.testToString();opennlp.tools.langdetect.Language.toString();1.0
opennlp.tools.langdetect.LanguageTest.testEquals();opennlp.tools.langdetect.Language.equals(java.lang.Object);1.0
opennlp.tools.formats.leipzig.LeipzigLanguageSampleStreamTest.testReadSentenceFiles();opennlp.tools.formats.leipzig.LeipzigLanguageSampleStream.read();1.0
opennlp.tools.chunker.ChunkerMETest.testChunkAsArray();opennlp.tools.chunker.ChunkerME.chunk(java.lang.String[], java.lang.String[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testGradientAtNonInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint01();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtNonInitialPoint02();opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[]);1.0
opennlp.tools.tokenize.TokenSampleTest.testEquals();opennlp.tools.tokenize.TokenSample.equals(java.lang.Object);1.0
opennlp.tools.util.SpanTest.testStartsWith();opennlp.tools.util.Span.startsWith(opennlp.tools.util.Span);1.0
opennlp.tools.util.VersionTest.testParse();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseSnapshot();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.OnePassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.ml.maxent.GISIndexingTest.testIndexingFactory();opennlp.tools.ml.model.TwoPassDataIndexer.index(opennlp.tools.util.ObjectStream<opennlp.tools.ml.model.Event>);1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsHyphen();opennlp.tools.util.featuregen.StringPattern.containsHyphen();1.0
opennlp.tools.ml.BeamSearchTest.testBestSequence();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceZeroLengthInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceOneElementInput();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllHiragana();opennlp.tools.util.featuregen.StringPattern.isAllHiragana();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllKatakana();opennlp.tools.util.featuregen.StringPattern.isAllKatakana();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLetters();opennlp.tools.util.featuregen.StringPattern.isAllLetter();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsComma();opennlp.tools.util.featuregen.StringPattern.containsComma();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllDigit();opennlp.tools.util.featuregen.StringPattern.isAllDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsLetters();opennlp.tools.util.featuregen.StringPattern.containsLetters();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isAllCapitalLetter();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsDigit();opennlp.tools.util.featuregen.StringPattern.containsDigit();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsInitialCapitalLetter();opennlp.tools.util.featuregen.StringPattern.isInitialCapitalLetter();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsPeriod();opennlp.tools.util.featuregen.StringPattern.containsPeriod();1.0
opennlp.tools.util.featuregen.StringPatternTest.testDigits();opennlp.tools.util.featuregen.StringPattern.digits();1.0
opennlp.tools.util.featuregen.StringPatternTest.testContainsSlash();opennlp.tools.util.featuregen.StringPattern.containsSlash();1.0
opennlp.tools.util.featuregen.StringPatternTest.testIsAllLowerCaseLetter();opennlp.tools.util.featuregen.StringPattern.isAllLowerCaseLetter();1.0
opennlp.tools.util.StringUtilTest.testIsEmptyWithNullString();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.EvalitaNameSampleStreamTest.testReset();opennlp.tools.formats.EvalitaNameSampleStream.reset();1.0
opennlp.tools.formats.Conll02NameSampleStreamTest.testReset();opennlp.tools.formats.Conll02NameSampleStream.reset();1.0
opennlp.tools.util.StringUtilTest.testIsEmpty();opennlp.tools.util.StringUtil.isEmpty(java.lang.CharSequence);1.0
opennlp.tools.formats.Conll03NameSampleStreamTest.testReset();opennlp.tools.formats.Conll03NameSampleStream.reset();1.0
opennlp.tools.chunker.ChunkSampleTest.testToString();opennlp.tools.chunker.ChunkSample.toString();1.0
opennlp.tools.util.eval.MeanTest.testMeanCalculation();opennlp.tools.util.eval.Mean.mean();1.0
opennlp.tools.util.SequenceTest.testToString();opennlp.tools.util.Sequence.toString();1.0
opennlp.tools.parser.ParseTest.testGetTagNodes();opennlp.tools.parser.Parse.getTagNodes();1.0
opennlp.tools.dictionary.DictionaryTest.testToString();opennlp.tools.dictionary.Dictionary.toString();1.0
opennlp.tools.convert.FileToStringSampleStreamTest.readFileTest();opennlp.tools.formats.convert.FileToStringSampleStream.read();1.0
opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream();opennlp.tools.parser.ParseSampleStream.read();1.0
opennlp.tools.util.PlainTextByLineStreamTest.testReset();opennlp.tools.util.PlainTextByLineStream.reset();1.0
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeSpace();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizerTest.normalizeChar();opennlp.tools.util.normalizer.ShrinkCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.postag.POSSampleTest.testParseEmptyString();opennlp.tools.postag.POSSample.parse(java.lang.String);1.0
opennlp.tools.ngram.NGramModelTest.testCutoff2();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd1();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testToDictionary1();opennlp.tools.ngram.NGramModel.toDictionary(boolean);1.0
opennlp.tools.ngram.NGramModelTest.testCutoff1();opennlp.tools.ngram.NGramModel.cutoff(int, int);1.0
opennlp.tools.ngram.NGramModelTest.testZeroGetCount();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testNumberOfGrams();opennlp.tools.ngram.NGramModel.numberOfGrams();1.0
opennlp.tools.ngram.NGramModelTest.testAdd();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testAdd3();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testAdd2();opennlp.tools.ngram.NGramModel.add(opennlp.tools.util.StringList, int, int);1.0
opennlp.tools.ngram.NGramModelTest.testZeroGetCount2();opennlp.tools.ngram.NGramModel.getCount(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.BilouCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BilouCodec.createSequenceValidator();1.0
opennlp.tools.util.eval.CrossValidationPartitionerTest.testToString();opennlp.tools.util.eval.CrossValidationPartitioner.toString();1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeEmpty();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletContinuationFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BilouCodecTest.testDecodePairFirst();opennlp.tools.namefind.BilouCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeOtherFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.parser.ParseTest.testParseClone();opennlp.tools.parser.Parse.clone();1.0
opennlp.tools.parser.ParseTest.testGetText();opennlp.tools.parser.Parse.getText();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindSingleTokenPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.parser.ParseTest.testToHashCode();opennlp.tools.parser.Parse.hashCode();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeTripleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.util.SpanTest.testContainsWithHigherIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testShow();opennlp.tools.parser.Parse.show(java.lang.StringBuffer);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpanNoType();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentPairSingleton();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testContainsWithEqual();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testToString();opennlp.tools.util.Span.toString();1.0
opennlp.tools.namefind.NameSampleTest.testNoTypesToString();opennlp.tools.namefind.NameSample.toString();1.0
opennlp.tools.util.SpanTest.testCompareToLower();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testCompareToEquals();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testContainsWithLowerIntersect();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.sentdetect.SentenceSampleTest.testEquals();opennlp.tools.sentdetect.SentenceSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.NameFinderMETest.testDropOverlappingSpans();opennlp.tools.namefind.NameFinderME.dropOverlappingSpans(opennlp.tools.util.Span[]);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsSameType();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeMultiClass();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.eval.FMeasureTest.testPrecision();opennlp.tools.util.eval.FMeasure.precision(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.SpanTest.testCompareToHigher();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testDecodePairFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.parser.ParseTest.testEquals();opennlp.tools.parser.Parse.equals(java.lang.Object);1.0
opennlp.tools.util.eval.FMeasureTest.testRecall();opennlp.tools.util.eval.FMeasure.recall(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindTokenizdPattern();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeTripletFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testContains();opennlp.tools.util.Span.contains(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeAdjacentUnitSpans();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.parser.ParseTest.testToString();opennlp.tools.parser.Parse.toString();1.0
opennlp.tools.namefind.BioCodecTest.testDecodeAdjacentSingletonFirst();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsDiffType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsNullType2();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeSingleTokenSpan();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.util.SpanTest.testCompareToEqualsNullType1();opennlp.tools.util.Span.compareTo(opennlp.tools.util.Span);1.0
opennlp.tools.namefind.NameSampleTest.testEquals();opennlp.tools.namefind.NameSample.equals(java.lang.Object);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeDoubleTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeAdjacentSingleSpans();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.util.SpanTest.testEquals();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.SpanTest.testGetStart();opennlp.tools.util.Span.getStart();1.0
opennlp.tools.util.eval.FMeasureTest.testCountTruePositives();opennlp.tools.util.eval.FMeasure.countTruePositives(java.lang.Object[], java.lang.Object[]);1.0
opennlp.tools.util.SpanTest.testCrosses();opennlp.tools.util.Span.crosses(opennlp.tools.util.Span);1.0
opennlp.tools.util.SpanTest.testIntersects();opennlp.tools.util.Span.intersects(opennlp.tools.util.Span);1.0
opennlp.tools.util.TrainingParametersTest.testGetParameters();opennlp.tools.util.TrainingParameters.getParameters(java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateLargerWindowThanListTest();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest1();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest3();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest4();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateListTest2();opennlp.tools.ngram.NGramGenerator.generate(java.util.List<java.lang.String>, int, java.lang.String);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName();opennlp.tools.util.BaseToolFactory.create(java.lang.String, opennlp.tools.util.model.ArtifactProvider);1.0
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeInsensitive();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.lang.String[], java.lang.String[]);1.0
opennlp.morfologik.lemmatizer.MorfologikLemmatizerTest.testLemmatizeMultiLemma();opennlp.morfologik.lemmatizer.MorfologikLemmatizer.lemmatize(java.util.List<java.lang.String>, java.util.List<java.lang.String>);1.0
opennlp.tools.util.SequenceTest.testAddMethod();opennlp.tools.util.Sequence.add(java.lang.String, double);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithInvalidName2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.postag.POSTaggerFactoryTest.testCreateWithHierarchy2();opennlp.tools.postag.POSTaggerFactory.create(java.lang.String, opennlp.tools.dictionary.Dictionary, opennlp.tools.postag.TagDictionary);1.0
opennlp.tools.util.SpanTest.testGetEnd();opennlp.tools.util.Span.getEnd();1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeSingleUnitTokenSpan();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testEquals();opennlp.tools.lemmatizer.LemmaSample.equals(java.lang.Object);1.0
opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest.testIterator();null.iterator();1.0
opennlp.tools.dictionary.DictionaryTest.testHashCode();opennlp.tools.dictionary.Dictionary.hashCode();1.0
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm();1.0
opennlp.tools.util.TrainingParametersTest.testGetAlgorithm();opennlp.tools.util.TrainingParameters.algorithm(java.lang.String);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, boolean);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, double);1.0
opennlp.tools.util.TrainingParametersTest.testPutGet();opennlp.tools.util.TrainingParameters.put(java.lang.String, int);1.0
opennlp.tools.ml.ArrayMathTest.testL1Norm();opennlp.tools.ml.ArrayMath.l1norm(double[]);1.0
opennlp.tools.tokenize.DictionaryDetokenizerTest.testDetokenizer();opennlp.tools.tokenize.DictionaryDetokenizer.detokenize(java.lang.String[]);1.0
opennlp.tools.util.SequenceTest.testCompareTo();opennlp.tools.util.Sequence.compareTo(opennlp.tools.util.Sequence);1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.FileEventStreamTest.testReset();opennlp.tools.ml.model.FileEventStream.reset();1.0
opennlp.tools.ml.model.RealValueFileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();1.0
opennlp.tools.ml.model.FileEventStreamTest.testSimpleReading();opennlp.tools.ml.model.FileEventStream.read();1.0
opennlp.tools.lemmatizer.LemmaSampleTest.testToString();opennlp.tools.lemmatizer.LemmaSample.toString();1.0
opennlp.tools.util.StringListTest.testIterator();opennlp.tools.util.StringList.iterator();1.0
opennlp.tools.util.StringUtilTest.testToLowerCase();opennlp.tools.util.StringUtil.toLowerCase(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.NumberCharSequenceNormalizerTest.normalize();opennlp.tools.util.normalizer.NumberCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.ml.BeamSearchTest.testBestSequenceWithValidator();opennlp.tools.ml.BeamSearch.bestSequence(T[], java.lang.Object[], opennlp.tools.util.BeamSearchContextGenerator<T>, opennlp.tools.util.SequenceValidator<T>);1.0
opennlp.tools.namefind.BioCodecTest.testCreateSequenceValidator();opennlp.tools.namefind.BioCodec.createSequenceValidator();1.0
opennlp.tools.ngram.NGramModelTest.testContains2();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testContains();opennlp.tools.ngram.NGramModel.contains(opennlp.tools.util.StringList);1.0
opennlp.tools.ngram.NGramModelTest.testRemove();opennlp.tools.ngram.NGramModel.remove(opennlp.tools.util.StringList);1.0
opennlp.tools.namefind.BioCodecTest.testEncodeNoNames();opennlp.tools.namefind.BioCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.namefind.BilouCodecTest.testEncodeNoNames();opennlp.tools.namefind.BilouCodec.encode(opennlp.tools.util.Span[], int);1.0
opennlp.tools.formats.DirectorySampleStreamTest.resetDirectoryTest();opennlp.tools.formats.DirectorySampleStream.reset();1.0
opennlp.tools.ml.ArrayMathTest.testInvL2Norm();opennlp.tools.ml.ArrayMath.invL2norm(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testL2Norm();opennlp.tools.ml.ArrayMath.l2norm(double[]);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeUrl();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.UrlCharSequenceNormalizerTest.normalizeEmail();opennlp.tools.util.normalizer.UrlCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.EmojiCharSequenceNormalizerTest.normalizeEmoji();opennlp.tools.util.normalizer.EmojiCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringListTest.testGetToken();opennlp.tools.util.StringList.getToken(int);1.0
opennlp.tools.util.StringListTest.testHashCode();opennlp.tools.util.StringList.hashCode();1.0
opennlp.tools.util.StringListTest.testEquals();opennlp.tools.util.StringList.equals(java.lang.Object);1.0
opennlp.tools.util.StringListTest.testToString();opennlp.tools.util.StringList.toString();1.0
opennlp.tools.namefind.RegexNameFinderTest.testFindMatchingPatternWithoutMatchingTokenBounds();opennlp.tools.namefind.RegexNameFinder.find(java.lang.String[]);1.0
opennlp.tools.util.SpanTest.testEqualsWithNull();opennlp.tools.util.Span.equals(java.lang.Object);1.0
opennlp.tools.util.VersionTest.testParseInvalidVersion2();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.util.VersionTest.testParseInvalidVersion();opennlp.tools.util.Version.parse(java.lang.String);1.0
opennlp.tools.namefind.BioCodecTest.testDecodeEmpty();opennlp.tools.namefind.BioCodec.decode(java.util.List<java.lang.String>);1.0
opennlp.tools.util.SpanTest.testContainsInt();opennlp.tools.util.Span.contains(int);1.0
opennlp.tools.util.SpanTest.testLength();opennlp.tools.util.Span.length();1.0
opennlp.tools.ml.ArrayMathTest.testToIntArray();opennlp.tools.ml.ArrayMath.toIntArray(java.util.List<java.lang.Integer>);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProduct();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.ml.ArrayMathTest.testInnerProductDoubleNaN();opennlp.tools.ml.ArrayMath.innerProduct(double[], double[]);1.0
opennlp.tools.ml.ArrayMathTest.testToDoubleArray();opennlp.tools.ml.ArrayMath.toDoubleArray(java.util.List<java.lang.Double>);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesSuccessiveTokensTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.util.featuregen.BrownBigramFeatureGeneratorTest.createFeaturesTest();opennlp.tools.util.featuregen.BrownBigramFeatureGenerator.createFeatures(java.util.List<java.lang.String>, java.lang.String[], int, java.lang.String[]);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest1();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest3();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest2();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ngram.NGramGeneratorTest.generateCharTest4();opennlp.tools.ngram.NGramGenerator.generate(char[], int, java.lang.String);1.0
opennlp.tools.ml.ArrayMathTest.testLogSumOfExps();opennlp.tools.ml.ArrayMath.logSumOfExps(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testMax();opennlp.tools.ml.ArrayMath.max(double[]);1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings();1.0
opennlp.tools.util.TrainingParametersTest.testGetSettings();opennlp.tools.util.TrainingParameters.getSettings(java.lang.String);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeHashtag();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeRT();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeLaugh();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeUser();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.normalizer.TwitterCharSequenceNormalizerTest.normalizeFace();opennlp.tools.util.normalizer.TwitterCharSequenceNormalizer.normalize(java.lang.CharSequence);1.0
opennlp.tools.util.StringUtilTest.testToUpperCase();opennlp.tools.util.StringUtil.toUpperCase(java.lang.CharSequence);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException2();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmaxException1();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
opennlp.tools.ml.ArrayMathTest.testArgmax();opennlp.tools.ml.ArrayMath.argmax(double[]);1.0
