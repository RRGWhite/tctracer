test-class;tested-class;score
edu.stanford.nlp.trees.tregex.TregexTest.testImmediateSister();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testMonthDayYear();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testHeadOfPhrase();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testFind();edu.stanford.nlp.ling.IndexedWord.word();1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testToBeRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testBasicRelationsWithCopulaAsHead();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testReplaceWithRepeats();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testInsertWithNamedNode();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testNonCollapsedRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.testFixSplitElement();edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testInsertDelete();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(java.util.List<edu.stanford.nlp.util.Pair<edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern>>, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testIthChild();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.TreePrintTest.testConll2007();edu.stanford.nlp.trees.TreePrint.printTree(edu.stanford.nlp.trees.Tree, java.io.PrintWriter);1.0
edu.stanford.nlp.trees.CoordinationTransformerTest.testMoveRB();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testParenthesizedExpressions();edu.stanford.nlp.trees.tregex.TregexMatcher.find();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testTwoChildren();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testComplex2();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.international.pennchinese.UniversalChineseGrammaticalStructureTest.testBasicRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testCopyNodes();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testSegmentedAndEqualsExpressions();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testJoï¿½oSilva();edu.stanford.nlp.trees.tregex.TregexMatcher.find();1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testMoreBasicRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testPrecedesDescribedChain();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testComplex();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testBasicRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testFirstLastChild();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testCCProcessedRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testCollapsedRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testPrecedingFollowingSister();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.GrammaticalStructureTest.testEnglishDependenciesByTree();edu.stanford.nlp.trees.GrammaticalStructureTest.tokenSet(java.util.List<edu.stanford.nlp.trees.TypedDependency>);1.0
edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureTest.testBasicRelations();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testReplaceNode();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testLink();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.QPTreeTransformerTest.testMoneyOrMore();edu.stanford.nlp.trees.QPTreeTransformerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.QPTreeTransformerTest.testCompoundModifiers();edu.stanford.nlp.trees.QPTreeTransformerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.QPTreeTransformerTest.testMoney();edu.stanford.nlp.trees.QPTreeTransformerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testMoeCurlyLarry();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testOnlyChild();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.EnglishGrammaticalStructureTest.testNonCollapsedSeparator();edu.stanford.nlp.trees.GrammaticalStructureConversionUtils.dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection<edu.stanford.nlp.trees.TypedDependency>, edu.stanford.nlp.trees.Tree, boolean, boolean, boolean);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testLemma();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testExclamationPoint();edu.stanford.nlp.ling.CoreLabel.toString();1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testXmlElements();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testReferencedRegex();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testTwoDependencies();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNotEquals();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.find();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNotEquals();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.getNodeNames();1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testNullSplitter();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testTwoSentences();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testParagraphSeparator();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedGovernor();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.patterns.CreatePatternsTest.test();edu.stanford.nlp.patterns.surface.CreatePatterns.<init>(java.util.Properties, edu.stanford.nlp.patterns.ConstantsAndVariables);1.0
edu.stanford.nlp.patterns.CreatePatternsTest.test();edu.stanford.nlp.patterns.surface.CreatePatterns.getAllPatterns(java.util.Map<java.lang.String, edu.stanford.nlp.patterns.DataInstance>, java.util.Properties, edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay);1.0
edu.stanford.nlp.patterns.CreatePatternsTest.test();edu.stanford.nlp.patterns.surface.CreatePatterns.setUp(java.util.Properties);1.0
edu.stanford.nlp.pipeline.TokenizerAnnotatorTest.testNumericHyphens();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testExactDepthRelations();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.ChunkAnnotationUtilsTest.testMergeChunks();edu.stanford.nlp.pipeline.ChunkAnnotationUtils.mergeChunks(java.util.List<edu.stanford.nlp.util.CoreMap>, java.lang.String, int, int);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedDependency();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.patterns.surface.AnnotatedTextReaderTest.testParse();edu.stanford.nlp.patterns.surface.AnnotatedTextReader.parseFile(java.io.BufferedReader, java.util.Set<java.lang.String>, java.util.Map<java.lang.String, java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<java.lang.String>>>, boolean, java.lang.String);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testRegion();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testTest();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testInitialConditions();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.find();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testInitialConditions();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.getNodeNames();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testMultipleDepths();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testWordMatch();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testNoSplitting();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testIndex();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testMr();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testRelationType();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testComplicatedGraph();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedRelation();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.find();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedRelation();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.getRelnString(java.lang.String);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testEqualsRelation();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.find();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testEqualsRelation();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.getNodeNames();1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testChinese();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.pipeline.Annotator, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testEdgeCases();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testSimpleDependency();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testParagraphStrategies();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedNode();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.find();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testNamedNode();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.getNodeNames();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testRegex();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testPartition();edu.stanford.nlp.semgraph.semgrex.SemgrexTest.runTest(java.lang.String, edu.stanford.nlp.semgraph.SemanticGraph, java.lang.String[]);1.0
edu.stanford.nlp.process.WordToSentenceProcessorTest.testBlankLines();edu.stanford.nlp.process.WordToSentenceProcessorTest.checkResult(edu.stanford.nlp.process.WordToSentenceProcessor<edu.stanford.nlp.ling.CoreLabel>, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testTopologicalSort();edu.stanford.nlp.semgraph.SemanticGraphTest.verifyTopologicalSort(edu.stanford.nlp.semgraph.SemanticGraph);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.<init>(edu.stanford.nlp.patterns.surface.Token[], edu.stanford.nlp.patterns.surface.PatternToken, edu.stanford.nlp.patterns.surface.Token[], edu.stanford.nlp.patterns.surface.SurfacePatternFactory$Genre);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.equals(java.lang.Object);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.getToken();1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.hashCode();1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.setNextContext(edu.stanford.nlp.patterns.surface.Token[]);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.setPrevContext(edu.stanford.nlp.patterns.surface.Token[]);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.setToken(edu.stanford.nlp.patterns.surface.PatternToken);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.toString();1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSimplerTokens();edu.stanford.nlp.patterns.surface.SurfacePattern.toString(java.util.List<java.lang.String>);1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testDatelineSeparation();edu.stanford.nlp.pipeline.Annotation.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testUSsAllyBritain();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testUSPresidentObama1();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAmericanActorChrisPratt();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testSpanishDatelineSeparation();edu.stanford.nlp.pipeline.Annotation.toString();1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testKbpSpanishWorks();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testUSAllyBritain();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testUSPresidentObama2();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testCompoundPossessive();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testUSPresidentObama();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testKbpWorks();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testAnnotator();edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.runSentence(java.lang.String, int);1.0
edu.stanford.nlp.pipeline.TokenizerAnnotatorTest.testBadLanguage();edu.stanford.nlp.pipeline.TokenizerAnnotator.<init>(boolean, java.util.Properties, java.lang.String);1.0
edu.stanford.nlp.pipeline.TokenizerAnnotatorTest.testBadLanguage();edu.stanford.nlp.pipeline.TokenizerAnnotator.<init>(java.util.Properties);1.0
edu.stanford.nlp.pipeline.TokenizerAnnotatorTest.testBadLanguage();edu.stanford.nlp.pipeline.TokenizerAnnotator.computeExtraOptions(java.util.Properties);1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testAlwaysNewlineIsSentenceBreakSettings();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testViaCoreNlp();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkContext(edu.stanford.nlp.ling.CoreLabel, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testViaCoreNlp();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkInvert(edu.stanford.nlp.pipeline.Annotation, java.lang.String);1.0
edu.stanford.nlp.simple.SentenceTest.testTokenizeWhitespaceWithSpaces();edu.stanford.nlp.simple.Sentence.word(int);1.0
edu.stanford.nlp.pipeline.CoNLLOutputterTest.testSimpleSentence();edu.stanford.nlp.pipeline.AnnotationOutputter.print(edu.stanford.nlp.pipeline.Annotation);1.0
edu.stanford.nlp.ling.SentenceTest.testTokenizedSentenceSize();edu.stanford.nlp.pipeline.CoreNLPProtos.Sentence.writeTo(com.google.protobuf.CodedOutputStream);1.0
edu.stanford.nlp.pipeline.WordsToSentencesAnnotatorTest.testTwoNewlineIsSentenceBreakTokenizeNLs();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testXMLElementNotInText();edu.stanford.nlp.process.DocumentPreprocessorTest.compareXMLResults(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testXMLNoResults();edu.stanford.nlp.process.DocumentPreprocessorTest.compareXMLResults(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testXMLElementInText();edu.stanford.nlp.process.DocumentPreprocessorTest.compareXMLResults(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testXMLBasic();edu.stanford.nlp.process.DocumentPreprocessorTest.compareXMLResults(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testRandomAddRemoveAndDelta();edu.stanford.nlp.util.CollectionValuedMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testRandomAddRemoveAndDelta();edu.stanford.nlp.util.CollectionValuedMap.removeMapping(K, V);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testCharArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.charArrToByteArr(byte[], int, char[], int, int);1.0
edu.stanford.nlp.simple.SentenceTest.testCharacterOffsets();edu.stanford.nlp.simple.Sentence.characterOffsetBegin(int);1.0
edu.stanford.nlp.simple.SentenceTest.testCharacterOffsets();edu.stanford.nlp.simple.Sentence.characterOffsetEnd(int);1.0
edu.stanford.nlp.simple.SentenceTest.testCreateFromText();edu.stanford.nlp.simple.Document.sentence(int);1.0
edu.stanford.nlp.simple.SentenceTest.testBasicTokenization();edu.stanford.nlp.simple.Sentence.word(int);1.0
edu.stanford.nlp.simple.SentenceTest.testTokenizeWhitespaceSimple();edu.stanford.nlp.simple.Sentence.word(int);1.0
edu.stanford.nlp.simple.SentenceTest.testDocumentLinking();edu.stanford.nlp.simple.Document.sentence(int);1.0
edu.stanford.nlp.simple.SentenceTest.testSentenceTokenOffsets();edu.stanford.nlp.simple.Sentence.sentenceTokenOffsetBegin();1.0
edu.stanford.nlp.simple.SentenceTest.testSentenceTokenOffsets();edu.stanford.nlp.simple.Sentence.sentenceTokenOffsetEnd();1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCorrectnessCheck();edu.stanford.nlp.simple.Sentence.length();1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCorrectnessCheck();edu.stanford.nlp.simple.Sentence.text();1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCorrectnessCheck();edu.stanford.nlp.simple.Sentence.word(int);1.0
edu.stanford.nlp.simple.DocumentTest.testSentences();edu.stanford.nlp.simple.Document.sentences();1.0
edu.stanford.nlp.simple.SentenceTest.testText();edu.stanford.nlp.simple.Sentence.text();1.0
edu.stanford.nlp.simple.SentenceTest.testLength();edu.stanford.nlp.simple.Sentence.length();1.0
edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testMultiWords();edu.stanford.nlp.objectbank.DelimitRegExIterator.hasNext();1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCrashCheck();edu.stanford.nlp.simple.Sentence.<init>(edu.stanford.nlp.simple.Document, edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder, java.lang.String, java.util.Properties);1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCrashCheck();edu.stanford.nlp.simple.Sentence.<init>(edu.stanford.nlp.simple.Document, edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder, java.util.Properties);1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCrashCheck();edu.stanford.nlp.simple.Sentence.<init>(edu.stanford.nlp.simple.Document, edu.stanford.nlp.util.CoreMap);1.0
edu.stanford.nlp.simple.SentenceTest.testFromCoreMapCrashCheck();edu.stanford.nlp.simple.Sentence.<init>(edu.stanford.nlp.util.CoreMap);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testSimpleDocument();edu.stanford.nlp.pipeline.JSONOutputterTest.indent(java.lang.String);1.0
edu.stanford.nlp.simple.SentenceTest.testOriginalText();edu.stanford.nlp.simple.Sentence.originalText(int);1.0
edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testSingleReadAndWrite(java.lang.String);edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter.printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph, edu.stanford.nlp.semgraph.SemanticGraph);1.0
edu.stanford.nlp.simple.SentenceTest.testSentenceIndex();edu.stanford.nlp.simple.Sentence.sentenceIndex();1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerTokenizeSplitHyphens();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerTokenizeSplitHyphens();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.simple.SentenceTest.testWeirdTokens();edu.stanford.nlp.simple.Sentence.word(int);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testCorp();edu.stanford.nlp.process.PTBTokenizer.ptb2Text(java.lang.String);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testTweets();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testTweets();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerCoreLabel();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerGerman();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testExtractSpecificTag();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CoNLLOutputterTest.testCustomSimpleSentence();edu.stanford.nlp.pipeline.AnnotationOutputter.print(edu.stanford.nlp.pipeline.Annotation, edu.stanford.nlp.pipeline.StanfordCoreNLP);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerMT();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testSetSentencePunctWords();edu.stanford.nlp.process.DocumentPreprocessorTest.runTest(java.lang.String, java.lang.String[], java.lang.String[], boolean);1.0
edu.stanford.nlp.sequences.ObjectBankWrapperTest.testUsingEnhancedFor();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testFractions();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testFractions();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testNearFinalPunctuation2();edu.stanford.nlp.process.DocumentPreprocessorTest.runTest(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.ie.pascal.ISODateInstanceTest.testDateNormalization();edu.stanford.nlp.ie.pascal.ISODateInstance.getDateString();1.0
edu.stanford.nlp.ie.pascal.ISODateInstanceTest.testDateNormalization();edu.stanford.nlp.ie.pascal.ISODateInstance.toString();1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testDateNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedDateString(java.lang.String, edu.stanford.nlp.time.Timex);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testDateNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedTimeString(java.lang.String, edu.stanford.nlp.time.Timex);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testContext();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkContext(edu.stanford.nlp.ling.CoreLabel, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerSGML();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerSGML();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testRemoveXML();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testText();edu.stanford.nlp.process.DocumentPreprocessorTest.runTest(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerWord();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerTokenizePerLineSGML();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testPTBTokenizerTokenizePerLineSGML();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testHyphensQuoteAndBOM();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testHyphensQuoteAndBOM();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArrays(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testInvertible();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkInvert(edu.stanford.nlp.pipeline.Annotation, java.lang.String);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testInvertible();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testNearFinalPunctuation();edu.stanford.nlp.process.DocumentPreprocessorTest.runTest(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.time.SUTimeTest.testNext();edu.stanford.nlp.time.SUTimeTest.resolveAndCheckRange(java.lang.String, edu.stanford.nlp.time.SUTime$Temporal, edu.stanford.nlp.time.SUTime$Time, java.lang.String);1.0
edu.stanford.nlp.time.SUTimeTest.testThis();edu.stanford.nlp.time.SUTimeTest.resolveAndCheckRange(java.lang.String, edu.stanford.nlp.time.SUTime$Temporal, edu.stanford.nlp.time.SUTime$Time, java.lang.String);1.0
edu.stanford.nlp.time.DurationTest.testDurationContainsDuration();edu.stanford.nlp.time.SUTime.Range.contains(edu.stanford.nlp.time.SUTime$Range);1.0
edu.stanford.nlp.util.MetaClassTest.testPrimitives();edu.stanford.nlp.util.MetaClass.createInstance(java.lang.Object[]);1.0
edu.stanford.nlp.util.MetaClassTest.testBasic();edu.stanford.nlp.util.MetaClass.createInstance(java.lang.Object[]);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testShortestPath();edu.stanford.nlp.semgraph.SemanticGraph.getShortestUndirectedPathEdges(edu.stanford.nlp.ling.IndexedWord, edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testShortestPath();edu.stanford.nlp.semgraph.SemanticGraph.getShortestUndirectedPathNodes(edu.stanford.nlp.ling.IndexedWord, edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testShortestPathDirectionInsensitiveNodes();edu.stanford.nlp.graph.DirectedMultiGraph.getShortestPath(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testShortedPathDirectionSensitiveEdges();edu.stanford.nlp.graph.DirectedMultiGraph.getShortestPathEdges(V, V, boolean);1.0
edu.stanford.nlp.util.PriorityQueueTest.testBinaryHeapPriorityQueue();edu.stanford.nlp.util.PriorityQueueTest.runBasicTests(java.lang.String);1.0
edu.stanford.nlp.util.PriorityQueueTest.testBinaryHeapPriorityQueue();edu.stanford.nlp.util.PriorityQueueTest.runRelaxingTests(java.lang.String);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testShortestPathDirectionInsensitiveEdges();edu.stanford.nlp.graph.DirectedMultiGraph.getShortestPathEdges(V, V, boolean);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter<E>, int);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toSortedByKeysString(edu.stanford.nlp.stats.Counter<T>, java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toSortedString(edu.stanford.nlp.stats.Counter<T>, int, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toSortedString(edu.stanford.nlp.stats.Counter<T>, int, java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toString(edu.stanford.nlp.stats.Counter<E>, int);1.0
edu.stanford.nlp.stats.CountersTest.testToSortedString();edu.stanford.nlp.stats.Counters.toVerticalString(edu.stanford.nlp.stats.Counter<E>, int);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testShortestPathDirectionSensitiveNodes();edu.stanford.nlp.graph.DirectedMultiGraph.getShortestPath(V, V, boolean);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieFindClosest();edu.stanford.nlp.ling.tokensregex.matcher.ApproxMatch.toString();1.0
edu.stanford.nlp.stats.CountersTest.testToSortedList();edu.stanford.nlp.stats.Counters.toSortedList(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.sequences.KBestSequenceFinderTest.testPerStateBestSequenceFinder();edu.stanford.nlp.sequences.KBestSequenceFinderTest.runSequencesFinder(edu.stanford.nlp.sequences.BestSequenceFinderTest$TestSequenceModel, edu.stanford.nlp.sequences.KBestSequenceFinder);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testReflexive();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPossessiveInEntity();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAclNoPP();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPossessiveNoNER();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testObjInRelation();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testCatsHaveTails();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testThereAreVBing();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testOptionalTrigger5();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testObamaBornInRegression();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testChrisManningOfStanford();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testrabbitsEatVegetables();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPropagateCSubj();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testDogsInheaven();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPossessiveWithObject();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPPAttachment();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testVPOnlyReplacedWith();edu.stanford.nlp.semgraph.semgrex.NodePattern.NodeMatcher.matches();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testHeWasInaugurated();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testXComp();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testObamaPresidentOfRegressionFull();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testCatsAreCute();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testChrisManningOfStanfordLong();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testOptionalTrigger();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testThrowAway();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testOfWhich();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testFishLikeToSwim();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testIAmInFlorida();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testMyCatsPlayWithYarn();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testMassOfIron();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAclWithPP();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testObamaPresidentOfRegression();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPossessive();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testChrisIsOfStanford();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testStateOfTheUnion();edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.mkExtraction(java.lang.String, boolean);1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testOptionalTrigger4();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAdvObjectPassive();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testNmodTmod();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPresidentObama();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAdvObject();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testSimpleTrigger();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testBlueCatsPlayWithYarn();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testOptionalTrigger3();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testWh();edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.mkExtraction(java.lang.String);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testFishLikeToSwimAlternateParse();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testVBG();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testApposInObject();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testCommaDoesntOvergenerate();edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.mkExtraction(java.lang.String);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAcl();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPassiveNSubj();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testApposAsSubj();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testBlueCatsPlayQuietlyWithYarn();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPPAttachmentTwo();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testVBGCollapsed();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAclWithAdverb();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.ling.tokensregex.SequencePatternTriggerTest.testOptionalTrigger2();edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher.BasicSequencePatternTrigger.apply(java.util.List<? extends T>);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPassiveReflexive();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testThereAreWith();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testThereAreIn();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testPPExtraction();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testAllNominals();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testGeorgeBoydRegression();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.classify.DatasetTest.testDataset();edu.stanford.nlp.classify.GeneralDataset.numClasses();1.0
edu.stanford.nlp.classify.DatasetTest.testDataset();edu.stanford.nlp.classify.GeneralDataset.numFeatureTokens();1.0
edu.stanford.nlp.classify.DatasetTest.testDataset();edu.stanford.nlp.classify.GeneralDataset.numFeatureTypes();1.0
edu.stanford.nlp.classify.DatasetTest.testDataset();edu.stanford.nlp.classify.GeneralDataset.numFeatures();1.0
edu.stanford.nlp.classify.DatasetTest.testDataset();edu.stanford.nlp.classify.GeneralDataset.size();1.0
edu.stanford.nlp.optimization.MinimizerTest.testQNMinimizerRosenbrock();edu.stanford.nlp.optimization.QNMinimizer.minimize(edu.stanford.nlp.optimization.DiffFunction, double, double[]);1.0
edu.stanford.nlp.parser.shiftreduce.OracleTest.testEndToEndSingleUnaries();edu.stanford.nlp.parser.shiftreduce.OracleTest.runEndToEndTest(java.util.List<edu.stanford.nlp.trees.Tree>, edu.stanford.nlp.parser.shiftreduce.Oracle);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testRelabel();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testExcise();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testBackReference();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testPrecedesFollows();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testDisjunctionVariableAssignments();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testImmediatelyDominates();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.parser.metrics.TreeSpanScoringTest.testTagErrors();edu.stanford.nlp.parser.metrics.TreeSpanScoring.countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testCreateSubtreesExtended();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testRootDisjunction();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.SemanticHeadFinderTest.testRegularSemanticHeadFinder();edu.stanford.nlp.trees.SemanticHeadFinderTest.runTesting(edu.stanford.nlp.trees.HeadFinder, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testSister();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.parser.metrics.TreeSpanScoringTest.testMislabeledSpans();edu.stanford.nlp.parser.metrics.TreeSpanScoring.countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testIfExists();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testDominateDescribedChain();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testVariableGroups();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.parser.metrics.TreeSpanScoringTest.testExtraSpan();edu.stanford.nlp.parser.metrics.TreeSpanScoring.countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.parser.metrics.TreeSpanScoringTest.testMissingSpan();edu.stanford.nlp.parser.metrics.TreeSpanScoring.countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testDocExamples();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testChinese();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.TreeTest.testDeeperCopy();edu.stanford.nlp.trees.Tree.deepCopy();1.0
edu.stanford.nlp.trees.TreeTest.testDeeperCopy();edu.stanford.nlp.trees.Tree.equals(java.lang.Object);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testDominates();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.parser.shiftreduce.OracleTest.testEndToEndCompoundUnaries();edu.stanford.nlp.parser.shiftreduce.OracleTest.runEndToEndTest(java.util.List<edu.stanford.nlp.trees.Tree>, edu.stanford.nlp.parser.shiftreduce.Oracle);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testChineseReplaceTree();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testCreateSubtrees();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testOptional();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testWordDisjunction();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testRepeatedVariables();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testKeyword();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.TreeTest.testTreeIterator();edu.stanford.nlp.trees.Tree.hashCode();1.0
edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.testAnotherSplit();edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testSubtreePattern();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.parser.metrics.TreeSpanScoringTest.testNoErrors();edu.stanford.nlp.parser.metrics.TreeSpanScoring.countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testImmediatePrecedesFollows();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserTest.testCompoundUnaryTransitions();edu.stanford.nlp.util.TreeShapedStack.peek();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testNamed();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testInsert();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.parser.shiftreduce.ReorderingOracleTest.testReorderIncorrectShiftResultingTree();edu.stanford.nlp.parser.shiftreduce.ReorderingOracle.reorderIncorrectShiftTransition(java.util.List<edu.stanford.nlp.parser.shiftreduce.Transition>);1.0
edu.stanford.nlp.trees.TreeTest.testRemove();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinderTest.testFindTreeWithSmallestSpan();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserTest.testSeparators();edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser.initialStateFromGoldTagTree(edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testParentEquals();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testCoindex();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testMultiplePatterns();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserTest.testUnaryTransitions();edu.stanford.nlp.util.TreeShapedStack.peek();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testDominateUnaryChain();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.testNothingLeftTree();edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testAdjoinH();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.SemanticHeadFinderTest.testCopulaHeadSemanticHeadFinder();edu.stanford.nlp.trees.SemanticHeadFinderTest.runTesting(edu.stanford.nlp.trees.HeadFinder, java.lang.String[]);1.0
edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.testNormalDelete();edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizerTest.runTest(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.optimization.MinimizerTest.testRosenbrock();edu.stanford.nlp.optimization.DiffFunctionTest.gradientCheck(edu.stanford.nlp.optimization.DiffFunction);1.0
edu.stanford.nlp.optimization.DiffFunctionTest.testXSquaredPlusOne();edu.stanford.nlp.optimization.DiffFunctionTest.gradientCheck(edu.stanford.nlp.optimization.DiffFunction);1.0
edu.stanford.nlp.ling.LabelsTest.testWord();edu.stanford.nlp.ling.LabelsTest.internalValidation(java.lang.String, edu.stanford.nlp.ling.Label, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testAdjoinF();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testPrune();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testReplaceTree();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testReuse();edu.stanford.nlp.trees.tregex.TregexMatcher.find();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testDelete();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testOneResult();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testAdjoin();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testForeign();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testTwoResults();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testTest();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testOnlyMatchRoot();edu.stanford.nlp.trees.Tree.toString();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testLeftRightMostDescendant();edu.stanford.nlp.trees.tregex.TregexTest.runTest(java.lang.String, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testCategoryFunctions();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testAdjoinWithNamedNode();edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testCategoryDisjunction();edu.stanford.nlp.trees.tregex.TregexTest.runTest(edu.stanford.nlp.trees.tregex.TregexPattern, java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testComment();edu.stanford.nlp.objectbank.DelimitRegExIterator.hasNext();1.0
edu.stanford.nlp.naturalli.OpenIETest.testXCompSubj();edu.stanford.nlp.naturalli.OpenIETest.clauses(java.lang.String);1.0
edu.stanford.nlp.naturalli.OpenIETest.testNoClauses();edu.stanford.nlp.naturalli.OpenIETest.clauses(java.lang.String);1.0
edu.stanford.nlp.semgraph.semgrex.ssurgeon.SsurgeonTest.simpleTest();edu.stanford.nlp.semgraph.SemanticGraph.toCompactString();1.0
edu.stanford.nlp.semgraph.SemanticGraphUtilsTest.testCreateSemgrexPattern();edu.stanford.nlp.semgraph.SemanticGraphUtils.semgrexFromGraphOrderedNodes(edu.stanford.nlp.semgraph.SemanticGraph, java.util.Collection<edu.stanford.nlp.ling.IndexedWord>, java.util.Map<edu.stanford.nlp.ling.IndexedWord, java.lang.String>, java.util.function.Function<edu.stanford.nlp.ling.IndexedWord, java.lang.String>);1.0
edu.stanford.nlp.naturalli.OpenIETest.testXCompObj();edu.stanford.nlp.naturalli.OpenIETest.clauses(java.lang.String);1.0
edu.stanford.nlp.naturalli.OpenIETest.testCComp();edu.stanford.nlp.naturalli.OpenIETest.clauses(java.lang.String);1.0
edu.stanford.nlp.international.french.FrenchUnknownWordSignaturesTest.testIsAllCaps();edu.stanford.nlp.international.french.FrenchUnknownWordSignatures.isAllCaps(java.lang.String);1.0
edu.stanford.nlp.util.BeamTest.testContent();edu.stanford.nlp.util.Beam.iterator();1.0
edu.stanford.nlp.sequences.BestSequenceFinderTest.testBeamBestSequenceFinder();edu.stanford.nlp.sequences.BestSequenceFinderTest.runSequenceFinder(edu.stanford.nlp.sequences.BestSequenceFinderTest$TestSequenceModel, edu.stanford.nlp.sequences.BestSequenceFinder);1.0
edu.stanford.nlp.trees.ConstituentTest.testConstituents();edu.stanford.nlp.trees.Constituent.<init>();1.0
edu.stanford.nlp.trees.ConstituentTest.testConstituents();edu.stanford.nlp.trees.Constituent.equals(java.lang.Object);1.0
edu.stanford.nlp.trees.ConstituentTest.testConstituents();edu.stanford.nlp.trees.Constituent.hashCode();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testSerialization();edu.stanford.nlp.io.IOUtils.readObjectFromFile(java.io.File);1.0
edu.stanford.nlp.ling.tokensregex.PhraseTableTest.testFindMatches();edu.stanford.nlp.ling.tokensregex.PhraseTable.findMatches(java.lang.String, int, int, boolean);1.0
edu.stanford.nlp.ling.tokensregex.PhraseTableTest.testIterator();edu.stanford.nlp.util.CollectionUtils.diff(java.util.Collection<T>, java.util.Collection<T>);1.0
edu.stanford.nlp.ling.tokensregex.PhraseTableTest.testPhraseTable();edu.stanford.nlp.ling.tokensregex.PhraseTable.findAllMatches(java.lang.String);1.0
edu.stanford.nlp.process.MorphologyTest.testMorph();edu.stanford.nlp.ling.WordLemmaTag.lemma();1.0
edu.stanford.nlp.process.MorphologyTest.testDunno();edu.stanford.nlp.ling.WordTag.word();1.0
edu.stanford.nlp.process.MorphologyTest.testStem();edu.stanford.nlp.ling.WordLemmaTag.lemma();1.0
edu.stanford.nlp.process.MorphologyTest.testStemStatic();edu.stanford.nlp.ling.WordTag.word();1.0
edu.stanford.nlp.ie.pascal.ISODateInstanceTest.testRelativeDateCreation();edu.stanford.nlp.ie.pascal.ISODateInstance.getDateString();1.0
edu.stanford.nlp.util.ArraySetTest.testClear();edu.stanford.nlp.util.ArraySet.size();1.0
edu.stanford.nlp.util.ArraySetTest.testEquals();edu.stanford.nlp.util.ArraySet.iterator();1.0
edu.stanford.nlp.util.ArraySetTest.testEquals();edu.stanford.nlp.util.ArraySet.size();1.0
edu.stanford.nlp.util.ArraySetTest.testAdd();edu.stanford.nlp.util.ArraySet.iterator();1.0
edu.stanford.nlp.util.ArraySetTest.testAdd();edu.stanford.nlp.util.ArraySet.size();1.0
edu.stanford.nlp.util.ArraySetTest.testRemove();edu.stanford.nlp.util.ArraySet.iterator();1.0
edu.stanford.nlp.util.ArraySetTest.testRemove();edu.stanford.nlp.util.ArraySet.size();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testEnv();edu.stanford.nlp.ling.IndexedWord.word();1.0
edu.stanford.nlp.trees.ModCollinsHeadFinderTest.testModCollinsHeadFinder();edu.stanford.nlp.trees.ModCollinsHeadFinderTest.runTesting(edu.stanford.nlp.trees.HeadFinder, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testComplexJSON();edu.stanford.nlp.pipeline.JSONOutputter.JSONWriter.objectToJSON(java.util.function.Consumer<edu.stanford.nlp.pipeline.JSONOutputter$Writer>);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testCollectionJSON();edu.stanford.nlp.pipeline.JSONOutputter.JSONWriter.objectToJSON(java.util.function.Consumer<edu.stanford.nlp.pipeline.JSONOutputter$Writer>);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testSimpleJSON();edu.stanford.nlp.pipeline.JSONOutputter.JSONWriter.objectToJSON(java.util.function.Consumer<edu.stanford.nlp.pipeline.JSONOutputter$Writer>);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testNestedJSON();edu.stanford.nlp.pipeline.JSONOutputter.JSONWriter.objectToJSON(java.util.function.Consumer<edu.stanford.nlp.pipeline.JSONOutputter$Writer>);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.addAll(java.util.Collection<? extends E>);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.addToIndex(E);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.contains(java.lang.Object);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.get(int);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.indexOf(E);1.0
edu.stanford.nlp.util.HashIndexTest.testUnmodifiableViewEtc();edu.stanford.nlp.util.HashIndex.size();1.0
edu.stanford.nlp.ling.CategoryWordTagTest.testCopy();edu.stanford.nlp.ling.CategoryWordTag.category();1.0
edu.stanford.nlp.ling.CategoryWordTagTest.testCopy();edu.stanford.nlp.ling.CategoryWordTag.tag();1.0
edu.stanford.nlp.ling.CategoryWordTagTest.testCopy();edu.stanford.nlp.ling.CategoryWordTag.word();1.0
edu.stanford.nlp.ling.CategoryWordTagFactoryTest.testCopy();edu.stanford.nlp.ling.CategoryWordTagFactory.newLabel(edu.stanford.nlp.ling.Label);1.0
edu.stanford.nlp.pipeline.AnnotatorPoolTest.testSignature();edu.stanford.nlp.pipeline.AnnotatorPool.get(java.lang.String);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexTest.testMatchAll();edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher.findNextMatchingNode();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testMacro();edu.stanford.nlp.ling.IndexedWord.word();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testSiblingPatterns();edu.stanford.nlp.ling.IndexedWord.word();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.<init>();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.compile(java.lang.String);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.compile(java.lang.String, edu.stanford.nlp.semgraph.semgrex.Env);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.isNegated();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.isOptional();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.prettyPrint();1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.prettyPrint(java.io.PrintStream);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.prettyPrint(java.io.PrintWriter);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.prettyPrint(java.io.PrintWriter, int);1.0
edu.stanford.nlp.semgraph.semgrex.SemgrexPatternTest.testPrettyPrint();edu.stanford.nlp.semgraph.semgrex.SemgrexPattern.setEnv(edu.stanford.nlp.semgraph.semgrex.Env);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testEarlyEnd();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testOffsets();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testAttributes();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testSentenceSplitting();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testMissingCloseTags();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.testNestedTags();edu.stanford.nlp.pipeline.CleanXmlAnnotatorTest.checkResult(edu.stanford.nlp.pipeline.Annotation, java.lang.String[]);1.0
edu.stanford.nlp.classify.RVFDatasetTest.testSVMLightIntegerFormat();edu.stanford.nlp.util.CollectionUtils.toList(java.lang.Iterable<T>);1.0
edu.stanford.nlp.io.IOUtilsTest.testReadLines();edu.stanford.nlp.util.StringUtils.join(java.lang.Iterable<X>, java.lang.String);1.0
edu.stanford.nlp.util.ArrayUtilsTest.testGaps();edu.stanford.nlp.util.ArrayUtils.equalContents(int[], int[]);1.0
edu.stanford.nlp.ling.LabelsTest.testWordTag();edu.stanford.nlp.ling.LabelsTest.internalValidation(java.lang.String, edu.stanford.nlp.ling.Label, java.lang.String);1.0
edu.stanford.nlp.ling.LabelsTest.testWordTag();edu.stanford.nlp.ling.LabelsTest.validateHasTag(java.lang.String, edu.stanford.nlp.ling.HasTag, java.lang.String);1.0
edu.stanford.nlp.util.DeltaMapTest.testDeltaAccurate();edu.stanford.nlp.util.DeltaMap.containsKey(java.lang.Object);1.0
edu.stanford.nlp.util.DeltaMapTest.testDeltaAccurate();edu.stanford.nlp.util.DeltaMap.entrySet();1.0
edu.stanford.nlp.util.DeltaMapTest.testDeltaAccurate();edu.stanford.nlp.util.DeltaMap.get(java.lang.Object);1.0
edu.stanford.nlp.trees.international.negra.NegraPennLanguagePackTest.testBasicCategory();edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack.basicCategory(java.lang.String);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testBasicOperations();edu.stanford.nlp.util.TwoDimensionalMap.contains(K1, K2);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testBasicOperations();edu.stanford.nlp.util.TwoDimensionalMap.get(K1, K2);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testBasicOperations();edu.stanford.nlp.util.TwoDimensionalMap.isEmpty();1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testBasicOperations();edu.stanford.nlp.util.TwoDimensionalMap.size();1.0
edu.stanford.nlp.time.DurationTest.testDurationContainsTime();edu.stanford.nlp.time.SUTime.Range.contains(edu.stanford.nlp.time.SUTime$Time);1.0
edu.stanford.nlp.process.WordShapeClassifierTest.testChris3();edu.stanford.nlp.process.WordShapeClassifierTest.genericCheck(int, java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.process.WordShapeClassifierTest.testDigits();edu.stanford.nlp.process.WordShapeClassifierTest.genericCheck(int, java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.process.WordShapeClassifierTest.testChris1();edu.stanford.nlp.process.WordShapeClassifierTest.genericCheck(int, java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.process.WordShapeClassifierTest.testChris4();edu.stanford.nlp.process.WordShapeClassifierTest.genericCheck(int, java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.process.WordShapeClassifierTest.testChris2();edu.stanford.nlp.process.WordShapeClassifierTest.genericCheck(int, java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.util.IntervalTreeTest.testGetOverlapping();edu.stanford.nlp.util.IntervalTree.getOverlapping(T);1.0
edu.stanford.nlp.util.IntervalTreeTest.testGetOverlapping();edu.stanford.nlp.util.IntervalTree.height();1.0
edu.stanford.nlp.util.IntervalTreeTest.testGetOverlapping();edu.stanford.nlp.util.IntervalTree.size();1.0
edu.stanford.nlp.trees.TreeTest.testDominates();edu.stanford.nlp.trees.Tree.dominates(edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.parser.shiftreduce.OracleTest.testBuildParentMap();edu.stanford.nlp.parser.shiftreduce.OracleTest.recursiveTestBuildParentMap(edu.stanford.nlp.trees.Tree, java.util.Map<edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree>);1.0
edu.stanford.nlp.ling.LabelsTest.testStringLabel();edu.stanford.nlp.ling.LabelsTest.internalValidation(java.lang.String, edu.stanford.nlp.ling.Label, java.lang.String);1.0
edu.stanford.nlp.process.WhitespaceTokenizerTest.testWordTokenizer();edu.stanford.nlp.process.WhitespaceTokenizerTest.runTest(edu.stanford.nlp.process.TokenizerFactory<? extends edu.stanford.nlp.ling.HasWord>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testHasChildren();edu.stanford.nlp.semgraph.SemanticGraph.hasChildren(edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.util.StringUtilsTest.testLongestCommonSubstring();edu.stanford.nlp.util.StringUtils.longestCommonSubstring(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.ConcatenationIteratorTest.testIterator();edu.stanford.nlp.util.ConcatenationIterator.hasNext();1.0
edu.stanford.nlp.util.ConcatenationIteratorTest.testIterator();edu.stanford.nlp.util.ConcatenationIterator.next();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.f1(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precision(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMicro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recall(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyTrueNegatives();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMicro();1.0
edu.stanford.nlp.naturalli.UtilTest.guessNER();edu.stanford.nlp.naturalli.Util.guessNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>);1.0
edu.stanford.nlp.stats.CountersTest.testRetainAbove();edu.stanford.nlp.stats.Counters.retainAbove(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testFactory();edu.stanford.nlp.stats.IntCounter.keySet();1.0
edu.stanford.nlp.stats.CounterTestBase.testFactory();edu.stanford.nlp.stats.IntCounter.setCount(E, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testFactory();edu.stanford.nlp.stats.IntCounter.size();1.0
edu.stanford.nlp.stats.CounterTestBase.testFactory();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.naturalli.UtilTest.nerOverlap();edu.stanford.nlp.naturalli.Util.nerOverlap(java.util.List<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.ie.machinereading.structure.Span, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.stats.CountersTest.testTransformWithValuesAdd();edu.stanford.nlp.stats.Counters.transformWithValuesAdd(edu.stanford.nlp.stats.Counter<T1>, java.util.function.Function<T1, T2>);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.add(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.divideInPlace(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.dotProduct(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.mean(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testPearsonsCorrelationCoefficient();edu.stanford.nlp.stats.Counters.standardDeviation(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testHIndex();edu.stanford.nlp.stats.Counters.hIndex(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.f1(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precision(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMicro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recall(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracyNoRelation();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMicro();1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.argmax(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.argmin(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.keysAbove(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.keysAt(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.keysBelow(edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.max(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.mean(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CounterTestBase.testClassicCounterHistoricalMain();edu.stanford.nlp.stats.Counters.min(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOBResults();edu.stanford.nlp.sequences.IOBUtilsTest.runIOBResultsTest(java.lang.String[], java.lang.String[], double, double, double);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.f1(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precision(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.precisionMicro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recall(java.lang.String);1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMacro();1.0
edu.stanford.nlp.ie.KBPRelationExtractorTest.testAccuracySimple();edu.stanford.nlp.ie.KBPRelationExtractor.Accuracy.recallMicro();1.0
edu.stanford.nlp.naturalli.UtilTest.extractNERDifferingTypes();edu.stanford.nlp.naturalli.Util.extractNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.classify.WeightedRVFDatasetTest.testWeightingWorks();edu.stanford.nlp.classify.WeightedRVFDataset.getWeights();1.0
edu.stanford.nlp.stats.CountersTest.testLogNormalize();edu.stanford.nlp.stats.Counters.logSum(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.naturalli.UtilTest.extractNER();edu.stanford.nlp.naturalli.Util.extractNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.naturalli.UtilTest.extractNER();edu.stanford.nlp.naturalli.Util.guessNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>);1.0
edu.stanford.nlp.stats.CountersTest.testPointwiseMutualInformation();edu.stanford.nlp.stats.Counters.pointwiseMutualInformation(edu.stanford.nlp.stats.Counter<T1>, edu.stanford.nlp.stats.Counter<T2>, edu.stanford.nlp.stats.Counter<edu.stanford.nlp.util.Pair<T1, T2>>, edu.stanford.nlp.util.Pair<T1, T2>);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOResults();edu.stanford.nlp.sequences.IOBUtilsTest.runIOBResultsTest(java.lang.String[], java.lang.String[], double, double, double);1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testSetCount();edu.stanford.nlp.stats.TwoDimensionalCounter.getCount(K1, K2);1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testSetCount();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount();1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testSetCount();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount(K1);1.0
edu.stanford.nlp.stats.DistributionTest.testGetDistributionFromLogValues();edu.stanford.nlp.stats.Distribution.containsKey(E);1.0
edu.stanford.nlp.stats.DistributionTest.testGetDistributionFromLogValues();edu.stanford.nlp.stats.Distribution.getCount(E);1.0
edu.stanford.nlp.stats.DistributionTest.testGetDistributionFromLogValues();edu.stanford.nlp.stats.Distribution.keySet();1.0
edu.stanford.nlp.classify.RVFDatasetTest.testCombiningDatasets();null.hasNext();1.0
edu.stanford.nlp.classify.RVFDatasetTest.testCombiningDatasets();null.next();1.0
edu.stanford.nlp.stats.CountersTest.testEquals();edu.stanford.nlp.stats.Counters.equals(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testEquals();edu.stanford.nlp.stats.Counters.equals(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>, double);1.0
edu.stanford.nlp.stats.CountersTest.testSerializeStringCounter();null.getValue();1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOBESResults();edu.stanford.nlp.sequences.IOBUtilsTest.runIOBResultsTest(java.lang.String[], java.lang.String[], double, double, double);1.0
edu.stanford.nlp.stats.CountersTest.testJensenShannonDivergence();edu.stanford.nlp.stats.Counters.jensenShannonDivergence(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.naturalli.UtilTest.guessNERSpan();edu.stanford.nlp.naturalli.Util.guessNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.classify.WeightedRVFDatasetTest.testBackwardsCompatibility();edu.stanford.nlp.classify.WeightedRVFDataset.getWeights();1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testOrdinalNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedOrdinalString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.stats.CountersTest.testL2Norm();edu.stanford.nlp.stats.Counters.L2Norm(C);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOEResults();edu.stanford.nlp.sequences.IOBUtilsTest.runIOBResultsTest(java.lang.String[], java.lang.String[], double, double, double);1.0
edu.stanford.nlp.classify.WeightedRVFDatasetTest.testMixedCompatibility();edu.stanford.nlp.classify.WeightedRVFDataset.getWeights();1.0
edu.stanford.nlp.stats.CountersTest.testDivideInPlace();edu.stanford.nlp.stats.TwoDimensionalCounter.getCount(K1, K2);1.0
edu.stanford.nlp.stats.CountersTest.testDivideInPlace();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount();1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2Results();edu.stanford.nlp.sequences.IOBUtilsTest.runIOBResultsTest(java.lang.String[], java.lang.String[], double, double, double);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieSegment();edu.stanford.nlp.ling.tokensregex.matcher.Match.toString();1.0
edu.stanford.nlp.util.DeltaIndexTest.testContains();edu.stanford.nlp.util.DeltaIndex.contains(java.lang.Object);1.0
edu.stanford.nlp.math.ArrayMathTest.testPairwiseMultiply();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserTest.testInitialStateFromTagged();edu.stanford.nlp.trees.Tree.equals(java.lang.Object);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserTest.testInitialStateFromTagged();edu.stanford.nlp.trees.Tree.value();1.0
edu.stanford.nlp.parser.shiftreduce.BinaryTransitionTest.testRightTransition();edu.stanford.nlp.parser.shiftreduce.BinaryTransition.apply(edu.stanford.nlp.parser.shiftreduce.State);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftTransitionTest.testTransition();edu.stanford.nlp.parser.shiftreduce.ShiftTransition.apply(edu.stanford.nlp.parser.shiftreduce.State);1.0
edu.stanford.nlp.trees.PennTreeReaderTest.testRead();edu.stanford.nlp.trees.PennTreeReader.readTree();1.0
edu.stanford.nlp.parser.shiftreduce.BinaryTransitionTest.testLeftTransition();edu.stanford.nlp.parser.shiftreduce.BinaryTransition.apply(edu.stanford.nlp.parser.shiftreduce.State);1.0
edu.stanford.nlp.parser.shiftreduce.ShiftReduceUtilsTest.testBinarySide();edu.stanford.nlp.parser.shiftreduce.ShiftReduceUtils.getBinarySide(edu.stanford.nlp.trees.Tree);1.0
edu.stanford.nlp.trees.TreeTest.testPennPrint();edu.stanford.nlp.trees.Tree.pennString();1.0
edu.stanford.nlp.classify.GeneralDatasetTest.testCreateFolds();edu.stanford.nlp.classify.GeneralDataset.labelIndex();1.0
edu.stanford.nlp.classify.GeneralDatasetTest.testCreateFolds();edu.stanford.nlp.classify.GeneralDataset.size();1.0
edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTest.testGetSignature();edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModel.getSignature(java.lang.String, int);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testNonsense();edu.stanford.nlp.trees.tregex.TregexPattern.<init>();1.0
edu.stanford.nlp.trees.tregex.TregexTest.testNonsense();edu.stanford.nlp.trees.tregex.TregexPattern.compile(java.lang.String);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testNonsense();edu.stanford.nlp.trees.tregex.TregexPattern.setPatternString(java.lang.String);1.0
edu.stanford.nlp.util.ConfusionMatrixTest.testRealLabels();edu.stanford.nlp.util.ConfusionMatrix.printTable();1.0
edu.stanford.nlp.util.ConfusionMatrixTest.testBasic();edu.stanford.nlp.util.ConfusionMatrix.printTable();1.0
edu.stanford.nlp.util.ConfusionMatrixTest.testValueSort();edu.stanford.nlp.util.ConfusionMatrix.printTable();1.0
edu.stanford.nlp.util.ConfusionMatrixTest.testBulkAdd();edu.stanford.nlp.util.ConfusionMatrix.printTable();1.0
edu.stanford.nlp.sequences.BestSequenceFinderTest.testExactBestSequenceFinder();edu.stanford.nlp.sequences.BestSequenceFinderTest.runSequenceFinder(edu.stanford.nlp.sequences.BestSequenceFinderTest$TestSequenceModel, edu.stanford.nlp.sequences.BestSequenceFinder);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testContainingTags();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testNesting();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testInternalTags();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.fillMixedFieldsInstanceGiven();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Object, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.fillNonstaticFieldFromProperties();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Object, java.util.Properties);1.0
edu.stanford.nlp.util.ArgumentParserTest.testFillStaticField();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Class<?>, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.testFillStaticField();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Object, java.util.Properties);1.0
edu.stanford.nlp.util.ArgumentParserTest.testFillStaticFieldFromProperties();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Class<?>, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.testFillStaticFieldFromProperties();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Class<?>, java.util.Properties);1.0
edu.stanford.nlp.util.ArgumentParserTest.fillNonstaticField();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Object, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.fillMixedFieldsNoInstanceGiven();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Class<?>, java.lang.String[]);1.0
edu.stanford.nlp.util.ArgumentParserTest.checkOptionsOverrideProperties();edu.stanford.nlp.util.ArgumentParser.fillOptions(java.lang.Object, java.util.Properties, java.lang.String[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToFloatArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToFloatArr(byte[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToFloatArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToFloatArr(byte[], int, int);1.0
edu.stanford.nlp.util.TimingTest.testTiming();edu.stanford.nlp.util.Timing.report();1.0
edu.stanford.nlp.util.TimingTest.testTiming();edu.stanford.nlp.util.Timing.reportNano();1.0
edu.stanford.nlp.util.TimingTest.testTiming();edu.stanford.nlp.util.Timing.toSecondsString(long);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testPlainTextIterator();edu.stanford.nlp.process.DocumentPreprocessor.PlainTextIterator.hasNext();1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testPlainTextIterator();edu.stanford.nlp.process.DocumentPreprocessor.PlainTextIterator.next();1.0
edu.stanford.nlp.international.arabic.process.ArabicTokenizerTest.testArabicTokenizer();edu.stanford.nlp.ling.SentenceUtils.listToString(java.util.List<T>);1.0
edu.stanford.nlp.process.DocumentPreprocessorTest.testWhitespaceTokenization();edu.stanford.nlp.process.DocumentPreprocessorTest.runTest(java.lang.String, java.lang.String[], java.lang.String[], boolean);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testEmoji();edu.stanford.nlp.process.PTBTokenizerTest.runAgainstOrig(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[]);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testEmoji();edu.stanford.nlp.process.PTBTokenizerTest.runOnTwoArraysWithOffsets(edu.stanford.nlp.process.TokenizerFactory<T>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.trees.tregex.TregexTest.testNoResults();edu.stanford.nlp.trees.tregex.TregexMatcher.find();1.0
edu.stanford.nlp.process.WhitespaceTokenizerTest.testCoreLabelTokenizer();edu.stanford.nlp.process.WhitespaceTokenizerTest.runTest(edu.stanford.nlp.process.TokenizerFactory<? extends edu.stanford.nlp.ling.HasWord>, java.lang.String[], java.lang.String[][]);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testDegree();edu.stanford.nlp.graph.DirectedMultiGraph.getInDegree(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testDegree();edu.stanford.nlp.graph.DirectedMultiGraph.getOutDegree(V);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testToSentenceOutOfOrder();edu.stanford.nlp.ie.util.RelationTriple.asSentence();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testToSentenceInOrder();edu.stanford.nlp.ie.util.RelationTriple.asSentence();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testToSentenceNoIndices();edu.stanford.nlp.ie.util.RelationTriple.asSentence();1.0
edu.stanford.nlp.util.PriorityQueueTest.testFixedPrioritiesPriorityQueue();edu.stanford.nlp.util.PriorityQueueTest.runBasicTests(java.lang.String);1.0
edu.stanford.nlp.util.PriorityQueueTest.testFixedPrioritiesPriorityQueue();edu.stanford.nlp.util.PriorityQueueTest.runNotRelaxingTests(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testLineIterableWithEol();edu.stanford.nlp.io.IOUtilsTest.checkLineIterable(boolean);1.0
edu.stanford.nlp.trees.international.pennchinese.ChineseUtilsTest.testNormalize();edu.stanford.nlp.trees.international.pennchinese.ChineseUtils.normalize(java.lang.String, int, int, int);1.0
edu.stanford.nlp.ie.pascal.ISODateInstanceTest.testIsCompatible();edu.stanford.nlp.ie.pascal.ISODateInstance.isCompatible(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifierTest.testUncased();edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifierTest.checkSentences(java.util.List<java.util.List<edu.stanford.nlp.ling.CoreLabel>>, edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier, java.lang.String[]);1.0
edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifierTest.testCased();edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifierTest.checkSentences(java.util.List<java.util.List<edu.stanford.nlp.ling.CoreLabel>>, edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier, java.lang.String[]);1.0
edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifierTest.testNEROverlaps();edu.stanford.nlp.util.Generics.newHashSet();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testAStringArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.aStringArrToByteArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testAStringArrToByteArr4();edu.stanford.nlp.util.ConvertByteArray.aStringArrToByteArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.ling.LabelsTest.testTaggedWord();edu.stanford.nlp.ling.LabelsTest.internalValidation(java.lang.String, edu.stanford.nlp.ling.Label, java.lang.String);1.0
edu.stanford.nlp.ling.LabelsTest.testTaggedWord();edu.stanford.nlp.ling.LabelsTest.validateHasTag(java.lang.String, edu.stanford.nlp.ling.HasTag, java.lang.String);1.0
edu.stanford.nlp.simple.DocumentTest.testText();edu.stanford.nlp.simple.Document.text();1.0
edu.stanford.nlp.simple.DocumentTest.testDocid();edu.stanford.nlp.simple.Document.docid();1.0
edu.stanford.nlp.util.IntervalTreeTest.testIteratorRandom();edu.stanford.nlp.util.IntervalTree.TreeNodeIterator.hasNext();1.0
edu.stanford.nlp.util.IntervalTreeTest.testIteratorRandom();edu.stanford.nlp.util.IntervalTree.TreeNodeIterator.next();1.0
edu.stanford.nlp.util.IntervalTreeTest.testIteratorOrdered();edu.stanford.nlp.util.IntervalTree.TreeNodeIterator.hasNext();1.0
edu.stanford.nlp.util.IntervalTreeTest.testIteratorOrdered();edu.stanford.nlp.util.IntervalTree.TreeNodeIterator.next();1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieFindNonOverlapping();edu.stanford.nlp.ling.tokensregex.matcher.Match.toString();1.0
edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testExtraDependencies();edu.stanford.nlp.objectbank.DelimitRegExIterator.hasNext();1.0
edu.stanford.nlp.ling.IndexedWordTest.testIndexedWordComparisons();edu.stanford.nlp.ling.IndexedWord.backingLabel();1.0
edu.stanford.nlp.ling.IndexedWordTest.testIndexedWordComparisons();edu.stanford.nlp.ling.IndexedWord.compareTo(edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.ling.IndexedWordTest.testIndexedWordComparisons();edu.stanford.nlp.ling.IndexedWord.setWord(java.lang.String);1.0
edu.stanford.nlp.ling.IndexedWordTest.testIndexedWordComparisons();edu.stanford.nlp.ling.IndexedWord.word();1.0
edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testReadingAndWriting();edu.stanford.nlp.trees.ud.CoNLLUDocumentReaderWriterTest.testSingleReadAndWrite(java.lang.String);1.0
edu.stanford.nlp.util.IntervalTest.testIntervalContains();edu.stanford.nlp.util.Interval.contains(edu.stanford.nlp.util.Interval<E>);1.0
edu.stanford.nlp.util.IntervalTest.testIntervalOverlaps();edu.stanford.nlp.util.Interval.overlaps(edu.stanford.nlp.util.Interval<E>);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToDoubleArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToDoubleArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToDoubleArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToDoubleArr(byte[]);1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testIncrement();edu.stanford.nlp.stats.TwoDimensionalCounter.getCount(K1, K2);1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testIncrement();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount();1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testIncrement();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount(K1);1.0
edu.stanford.nlp.stats.TwoDimensionalIntCounterTest.testTraditionalMain();edu.stanford.nlp.stats.TwoDimensionalIntCounter.getCount(K1, K2);1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testSameSemanticsForDifferentWordOrder();edu.stanford.nlp.ie.util.RelationTriple.toString();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testGlosses();edu.stanford.nlp.ie.util.RelationTriple.objectGloss();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testGlosses();edu.stanford.nlp.ie.util.RelationTriple.relationGloss();1.0
edu.stanford.nlp.naturalli.RelationTripleSegmenterTest.testGlosses();edu.stanford.nlp.ie.util.RelationTriple.subjectGloss();1.0
edu.stanford.nlp.util.EditDistanceTest.testEmpty();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testNumberNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedMoneyString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testNumberNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedNumberString(java.lang.String, java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.util.EditDistanceTest.testBig();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.EditDistanceTest.testTranspose();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testMoneyNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedDateString(java.lang.String, edu.stanford.nlp.time.Timex);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testMoneyNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedMoneyString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.util.EditDistanceTest.testDelete();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.EditDistanceTest.testInsert();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.EditDistanceTest.testModify();edu.stanford.nlp.util.EditDistance.score(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testPercentNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedOrdinalString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testPercentNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedPercentString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.util.StringUtilsTest.testArgsToProperties();edu.stanford.nlp.util.StringUtils.argsToProperties(java.lang.String[]);1.0
edu.stanford.nlp.util.StringUtilsTest.testArgsToProperties();edu.stanford.nlp.util.StringUtils.argsToProperties(java.lang.String[], java.util.Map<java.lang.String, java.lang.Integer>);1.0
edu.stanford.nlp.util.MetaClassTest.testConsistencyWithJava();edu.stanford.nlp.util.MetaClass.createInstance(java.lang.Object[]);1.0
edu.stanford.nlp.pipeline.AnnotationTest.testFromList();edu.stanford.nlp.pipeline.Annotation.toString();1.0
edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonTest.testAuxiliaryTreeErrors();edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon.parseOperation(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testLineIterableWithoutEol();edu.stanford.nlp.io.IOUtilsTest.checkLineIterable(boolean);1.0
edu.stanford.nlp.process.AmericanizeTest.testAmericanize();edu.stanford.nlp.process.Americanize.americanize(java.lang.String);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement();edu.stanford.nlp.stats.IntCounter.containsKey(E);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement();edu.stanford.nlp.stats.IntCounter.incrementCount(E);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.trees.TreebankLanguagePackTest.testBasicCategory();edu.stanford.nlp.trees.AbstractTreebankLanguagePack.basicCategory(java.lang.String);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieFindAll();edu.stanford.nlp.ling.tokensregex.matcher.Match.toString();1.0
edu.stanford.nlp.util.IntervalTest.testIntervalRelations();edu.stanford.nlp.util.Interval.getRelation(edu.stanford.nlp.util.Interval<E>);1.0
edu.stanford.nlp.util.IntervalTest.testIntervalRelations();edu.stanford.nlp.util.Interval.getRelationFlags(edu.stanford.nlp.util.Interval<E>);1.0
edu.stanford.nlp.util.ArrayUtilsTest.testgetSubListIndex();edu.stanford.nlp.util.ArrayUtils.getSubListIndex(java.lang.Object[], java.lang.Object[]);1.0
edu.stanford.nlp.pipeline.RelationExtractorAnnotatorTest.testVerbose();edu.stanford.nlp.pipeline.RelationExtractorAnnotator.getVerbose(java.util.Properties);1.0
edu.stanford.nlp.util.IterablesTest.testMerge();edu.stanford.nlp.util.Pair.<init>(T1, T2);1.0
edu.stanford.nlp.pipeline.RelationExtractorAnnotatorTest.testModelName();edu.stanford.nlp.pipeline.RelationExtractorAnnotator.getModelName(java.util.Properties);1.0
edu.stanford.nlp.util.SetsTest.testCross();edu.stanford.nlp.util.Sets.cross(java.util.Set<E>, java.util.Set<F>);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieBasic();edu.stanford.nlp.ling.tokensregex.matcher.TrieMap.containsKey(java.lang.Object);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieBasic();edu.stanford.nlp.ling.tokensregex.matcher.TrieMap.get(K[]);1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieBasic();edu.stanford.nlp.ling.tokensregex.matcher.TrieMap.keySet();1.0
edu.stanford.nlp.ling.tokensregex.matcher.TrieMapTest.testTrieBasic();edu.stanford.nlp.ling.tokensregex.matcher.TrieMap.size();1.0
edu.stanford.nlp.util.concurrent.SynchronizedInternerTest.testGlobal();edu.stanford.nlp.util.concurrent.SynchronizedInterner.<init>(edu.stanford.nlp.util.Interner<T>, java.lang.Object);1.0
edu.stanford.nlp.util.concurrent.SynchronizedInternerTest.testGlobal();edu.stanford.nlp.util.concurrent.SynchronizedInterner.getGlobal();1.0
edu.stanford.nlp.util.concurrent.SynchronizedInternerTest.testGlobal();edu.stanford.nlp.util.concurrent.SynchronizedInterner.globalIntern(T);1.0
edu.stanford.nlp.util.concurrent.SynchronizedInternerTest.testGlobal();edu.stanford.nlp.util.concurrent.SynchronizedInterner.intern(T);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testIteratorRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getAllEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testIteratorRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.util.LazyTest.testCachedGC();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testCachedGC();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.util.LazyTest.testOfCalledOnlyOnce();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testOfCalledOnlyOnce();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testLoadCollection();edu.stanford.nlp.util.CollectionUtils.loadCollection(java.io.File, java.lang.Class<T>, java.util.Collection<T>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testNoHanging();edu.stanford.nlp.util.ArrayCoreMap.<init>();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testNoHanging();edu.stanford.nlp.util.ArrayCoreMap.<init>(int);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testNoHanging();edu.stanford.nlp.util.ArrayCoreMap.hashCode();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testNoHanging();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testNoHanging();edu.stanford.nlp.util.ArrayCoreMap.toString();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoops();edu.stanford.nlp.util.ArrayCoreMap.<init>();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoops();edu.stanford.nlp.util.ArrayCoreMap.<init>(int);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoops();edu.stanford.nlp.util.ArrayCoreMap.hashCode();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoops();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoops();edu.stanford.nlp.util.ArrayCoreMap.toString();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoopEquals();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoopEquals();edu.stanford.nlp.util.ArrayCoreMap.hashCode();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testObjectLoopEquals();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.process.PTBTokenizerTest.testUntok();edu.stanford.nlp.process.PTBTokenizer.ptb2Text(java.lang.String);1.0
edu.stanford.nlp.stats.CounterTestBase.testComparators();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.stats.CounterTestBase.testEntrySet();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.stats.CounterTestBase.testEntrySet();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.util.LazyTest.testOf();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testOf();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.util.LazyTest.testCached();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testCached();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.util.LazyTest.testFrom();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testFrom();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.util.LazyTest.testCachedCalledOnlyOnce();edu.stanford.nlp.util.Lazy.get();1.0
edu.stanford.nlp.util.LazyTest.testCachedCalledOnlyOnce();edu.stanford.nlp.util.Lazy.getIfDefined();1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testSerialization();edu.stanford.nlp.tagger.maxent.TTags.getIndex(java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testSerialization();edu.stanford.nlp.tagger.maxent.TTags.getSize();1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testSerialization();edu.stanford.nlp.tagger.maxent.TTags.getTag(int);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testSerialization();edu.stanford.nlp.tagger.maxent.TTags.isClosed(java.lang.String);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testGetSiblings();edu.stanford.nlp.semgraph.SemanticGraphTest.verifySet(java.util.Collection<edu.stanford.nlp.ling.IndexedWord>, int[]);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testCommonAncestor();edu.stanford.nlp.semgraph.SemanticGraph.commonAncestor(edu.stanford.nlp.ling.IndexedWord, edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testGetCommonAncestor();edu.stanford.nlp.semgraph.SemanticGraph.getCommonAncestor(edu.stanford.nlp.ling.IndexedWord, edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testIsAncestor();edu.stanford.nlp.semgraph.SemanticGraph.isAncestor(edu.stanford.nlp.ling.IndexedWord, edu.stanford.nlp.ling.IndexedWord);1.0
edu.stanford.nlp.semgraph.SemanticGraphTest.testGetPathToRoot();edu.stanford.nlp.semgraph.SemanticGraphTest.verifyPath(java.util.List<edu.stanford.nlp.ling.IndexedWord>, int[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOBESIOB1();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOBESIOB1();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2IOBES();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2IOBES();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IOB2();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IOB2();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IO();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IO();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1NoPrefix();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1NoPrefix();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IOB1();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB1IOB1();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2BILOU();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2BILOU();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testNoPrefixIO();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testNoPrefixIO();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2IOB1();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testIOB2IOB1();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testBILOUIOBES();edu.stanford.nlp.sequences.IOBUtilsTest.checkAnswers(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.sequences.IOBUtilsTest.testBILOUIOBES();edu.stanford.nlp.sequences.IOBUtilsTest.loadCoreLabelList(java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.util.MetaClassTest.testCastEnum();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastFromString();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastStream();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastRegression();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastMap();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastArray();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastCollection();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastStringArray();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.MetaClassTest.testCastSimple();edu.stanford.nlp.util.MetaClass.cast(java.lang.String, java.lang.reflect.Type);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.allValues();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.containsKey(java.lang.Object);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.entrySet();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.get(java.lang.Object);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.isEmpty();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.keySet();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.size();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testBasicOperations();edu.stanford.nlp.util.CollectionValuedMap.values();1.0
edu.stanford.nlp.naturalli.UtilTest.extractNERNoNER();edu.stanford.nlp.naturalli.Util.extractNER(java.util.List<edu.stanford.nlp.ling.CoreLabel>, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.dcoref.RulesTest.testIsAcronym();edu.stanford.nlp.dcoref.Rules.isAcronym(java.util.List<edu.stanford.nlp.ling.CoreLabel>, java.util.List<edu.stanford.nlp.ling.CoreLabel>);1.0
edu.stanford.nlp.util.ArrayUtilsTest.testDelta();edu.stanford.nlp.util.ArrayUtils.equalContents(int[], int[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToChar();edu.stanford.nlp.util.ConvertByteArray.byteArrToChar(byte[], int);1.0
edu.stanford.nlp.tagger.io.TSVTaggedFileReaderTest.testReadNormal();edu.stanford.nlp.tagger.io.TSVTaggedFileReader.hasNext();1.0
edu.stanford.nlp.tagger.io.TSVTaggedFileReaderTest.testReadBackwards();edu.stanford.nlp.tagger.io.TSVTaggedFileReader.hasNext();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testLongArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.longArrToByteArr(byte[], int, long[], int, int);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testIterables();edu.stanford.nlp.graph.DirectedMultiGraphTest.checkIterator(java.lang.Iterable<E>, E[]);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testLoops();edu.stanford.nlp.graph.DirectedMultiGraphTest.checkIterator(java.lang.Iterable<E>, E[]);1.0
edu.stanford.nlp.neural.NeuralUtilsTest.testCosine();edu.stanford.nlp.neural.NeuralUtils.cosine(org.ejml.simple.SimpleMatrix, org.ejml.simple.SimpleMatrix);1.0
edu.stanford.nlp.neural.NeuralUtilsTest.testCosine();edu.stanford.nlp.neural.NeuralUtils.dot(org.ejml.simple.SimpleMatrix, org.ejml.simple.SimpleMatrix);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testBooleanArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.booleanArrToByteArr(boolean[]);1.0
edu.stanford.nlp.io.IOUtilsTest.testIterFilesRecursive();edu.stanford.nlp.io.IOUtilsTest.toSet(java.lang.Iterable<E>);1.0
edu.stanford.nlp.util.ComparatorsTest.testArrayComparator();edu.stanford.nlp.util.ArrayUtils.compareArrays(T[], T[]);1.0
edu.stanford.nlp.naturalli.OperatorTest.testValuesOrderedDesc();edu.stanford.nlp.naturalli.Operator.values();1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testTreeMapIterator();edu.stanford.nlp.util.TwoDimensionalMap.size();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCopyConstructor();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCopyConstructor();edu.stanford.nlp.util.ArrayCoreMap.size();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCoreLabelSetWordBehavior();edu.stanford.nlp.util.ArrayCoreMap.<init>(edu.stanford.nlp.util.ArrayCoreMap);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCoreLabelSetWordBehavior();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCoreLabelSetWordBehavior();edu.stanford.nlp.util.ArrayCoreMap.hashCode();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCoreLabelSetWordBehavior();edu.stanford.nlp.util.ArrayCoreMap.remove(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCoreLabelSetWordBehavior();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.process.MorphologyTest.testDash();edu.stanford.nlp.process.Morphology.<init>();1.0
edu.stanford.nlp.process.MorphologyTest.testDash();edu.stanford.nlp.process.Morphology.stem(java.lang.String);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testAddAll();edu.stanford.nlp.util.TwoDimensionalMap.addAll(edu.stanford.nlp.util.TwoDimensionalMap<? extends K1, ? extends K2, ? extends V2>, java.util.function.Function<V2, V>);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testAddAll();edu.stanford.nlp.util.TwoDimensionalMap.get(K1, K2);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testAddAll();edu.stanford.nlp.util.TwoDimensionalMap.size();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToShortArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToShortArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToShortArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToShortArr(byte[]);1.0
edu.stanford.nlp.util.IterableIteratorTest.testBasic();edu.stanford.nlp.util.IterableIterator.hasNext();1.0
edu.stanford.nlp.util.IterableIteratorTest.testBasic();edu.stanford.nlp.util.IterableIterator.next();1.0
edu.stanford.nlp.util.CoreMapsTest.testMaps();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testAddRemove();edu.stanford.nlp.util.CollectionValuedMap.toString();1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testMergingOperations();edu.stanford.nlp.util.CollectionValuedMap.add(K, V);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testMergingOperations();edu.stanford.nlp.util.CollectionValuedMap.addAll(java.util.Map<K, V>);1.0
edu.stanford.nlp.util.CollectionValuedMapTest.testMergingOperations();edu.stanford.nlp.util.CollectionValuedMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToIntArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToIntArr(byte[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToDouble();edu.stanford.nlp.util.ConvertByteArray.byteArrToDouble(byte[], int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToLong();edu.stanford.nlp.util.ConvertByteArray.byteArrToLong(byte[], int);1.0
edu.stanford.nlp.naturalli.PolarityTest.equals();edu.stanford.nlp.naturalli.Polarity.project(edu.stanford.nlp.naturalli.NaturalLogicRelation, edu.stanford.nlp.naturalli.Monotonicity, edu.stanford.nlp.naturalli.MonotonicityType);1.0
edu.stanford.nlp.naturalli.PolarityTest.equals();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.equalsString();edu.stanford.nlp.naturalli.Polarity.equals(java.lang.Object);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testMaxIndex();edu.stanford.nlp.util.CollectionUtils.maxIndex(java.util.List<T>);1.0
edu.stanford.nlp.tagger.maxent.ExtractorTest.testGetParenthesizedArg();edu.stanford.nlp.tagger.maxent.Extractor.getParenthesizedArg(java.lang.String, int);1.0
edu.stanford.nlp.tagger.maxent.ExtractorTest.testGetParenthesizedArg();edu.stanford.nlp.tagger.maxent.Extractor.getParenthesizedNum(java.lang.String, int);1.0
edu.stanford.nlp.util.StringUtilsTest.testCSV();edu.stanford.nlp.util.StringUtils.argsToProperties(java.lang.String[], java.util.Map<java.lang.String, java.lang.Integer>);1.0
edu.stanford.nlp.util.StringUtilsTest.testCSV();edu.stanford.nlp.util.StringUtils.splitOnCharWithQuoting(java.lang.String, char, char, char);1.0
edu.stanford.nlp.util.ArrayMapTest.testEntrySet();edu.stanford.nlp.util.ArrayMap.isEmpty();1.0
edu.stanford.nlp.util.ArrayMapTest.testEntrySet();edu.stanford.nlp.util.ArrayMap.size();1.0
edu.stanford.nlp.util.ArrayMapTest.testEquals();edu.stanford.nlp.util.ArrayMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayMapTest.testEquals();edu.stanford.nlp.util.ArrayMap.size();1.0
edu.stanford.nlp.util.ArrayMapTest.testPutDuplicateValues();edu.stanford.nlp.util.ArrayMap.get(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayMapTest.testPutDuplicateValues();edu.stanford.nlp.util.ArrayMap.size();1.0
edu.stanford.nlp.util.ArrayMapTest.testValues();edu.stanford.nlp.util.ArrayMap.Entry.getValue();1.0
edu.stanford.nlp.util.ArrayMapTest.testPutAll();edu.stanford.nlp.util.ArrayMap.isEmpty();1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceDirTargetNotExists();edu.stanford.nlp.io.IOUtils.slurpFile(java.io.File);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceDirTargetNotExists();edu.stanford.nlp.io.IOUtils.slurpFile(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceDirTargetNotExists();edu.stanford.nlp.io.IOUtils.writeStringToFile(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceDirTargetIsDir();edu.stanford.nlp.io.IOUtils.slurpFile(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceDirTargetIsDir();edu.stanford.nlp.io.IOUtils.writeStringToFile(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceFileTargetNotExists();edu.stanford.nlp.io.IOUtils.slurpFile(java.io.File);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceFileTargetNotExists();edu.stanford.nlp.io.IOUtils.writeStringToFile(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceFileTargetExists();edu.stanford.nlp.io.IOUtils.slurpFile(java.io.File);1.0
edu.stanford.nlp.io.IOUtilsTest.testTail();edu.stanford.nlp.io.IOUtils.tail(java.io.File, int);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceFileTargetIsDir();edu.stanford.nlp.io.IOUtils.slurpFile(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpSourceFileTargetIsDir();edu.stanford.nlp.io.IOUtils.writeStringToFile(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpRecursive();edu.stanford.nlp.io.IOUtils.slurpFile(java.lang.String);1.0
edu.stanford.nlp.io.IOUtilsTest.testCpRecursive();edu.stanford.nlp.io.IOUtils.writeStringToFile(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToBooleanArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToBooleanArr(byte[], int, boolean[], int, int);1.0
edu.stanford.nlp.stats.CounterTestBase.testReturnValue();edu.stanford.nlp.stats.IntCounter.defaultReturnValue();1.0
edu.stanford.nlp.stats.CounterTestBase.testReturnValue();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.objectbank.LineIteratorTest.testLineIterator();edu.stanford.nlp.objectbank.LineIterator.next();1.0
edu.stanford.nlp.time.SUTimeTest.parseDateTimeStandardInstantFormat();edu.stanford.nlp.time.SUTime.GroundedTime.getJodaTimeInstant();1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.someDeletionRelations();edu.stanford.nlp.naturalli.NaturalLogicRelation.forDependencyDeletion(java.lang.String);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.conjOrPeculiarities();edu.stanford.nlp.naturalli.NaturalLogicRelation.forDependencyInsertion(java.lang.String);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.conjOrPeculiarities();edu.stanford.nlp.naturalli.NaturalLogicRelation.forDependencyInsertion(java.lang.String, boolean);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.someInsertionRelations();edu.stanford.nlp.naturalli.NaturalLogicRelation.forDependencyInsertion(java.lang.String);1.0
edu.stanford.nlp.ie.ClassifierCombinerTest.testCombination();edu.stanford.nlp.ie.ClassifierCombinerTest.runTest(java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[]);1.0
edu.stanford.nlp.wordseg.ChineseStringUtilsTest.testMultithreadedCombineSegmentedSentence();edu.stanford.nlp.sequences.SeqClassifierFlags.<init>();1.0
edu.stanford.nlp.dcoref.RulesTest.testMentionMatchesSpeakerAnnotation();edu.stanford.nlp.dcoref.Rules.antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention, edu.stanford.nlp.dcoref.Mention);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testToShortString();edu.stanford.nlp.util.ArrayCoreMap.toShortString(char, java.lang.String[]);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testToShortString();edu.stanford.nlp.util.ArrayCoreMap.toShortString(java.lang.String[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteCharToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeCharToByteArr(byte[], int, char);1.0
edu.stanford.nlp.util.CoreMapTest.testCoreMap();edu.stanford.nlp.util.ArrayCoreMap.containsKey(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.CoreMapTest.testCoreMap();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.CoreMapTest.testCoreMap();edu.stanford.nlp.util.ArrayCoreMap.keySet();1.0
edu.stanford.nlp.util.CoreMapTest.testCoreMap();edu.stanford.nlp.util.ArrayCoreMap.remove(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.CoreMapTest.testCoreMap();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testKeySet();null.hasNext();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testKeySet();null.next();1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testPreservesString();edu.stanford.nlp.tagger.maxent.TTags.getTag(int);1.0
edu.stanford.nlp.util.IterableIteratorTest.testSpliteratorInSequence();edu.stanford.nlp.util.IterableIterator.spliterator();1.0
edu.stanford.nlp.util.IterableIteratorTest.testSpliteratorInParallel();edu.stanford.nlp.util.IterableIterator.spliterator();1.0
edu.stanford.nlp.stats.CounterTestBase.testClear();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.stats.CounterTestBase.testLogIncrement();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement2();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement2();edu.stanford.nlp.stats.IntCounter.incrementCount(E, double);1.0
edu.stanford.nlp.stats.CounterTestBase.testIncrement2();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.stats.CounterTestBase.testSetCount();edu.stanford.nlp.stats.IntCounter.getCount(java.lang.Object);1.0
edu.stanford.nlp.stats.CounterTestBase.testSetCount();edu.stanford.nlp.stats.IntCounter.totalCount();1.0
edu.stanford.nlp.naturalli.PolarityTest.multiplicativeTruth();edu.stanford.nlp.naturalli.Polarity.maintainsTruth(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.multiplicativeTruth();edu.stanford.nlp.naturalli.Polarity.negatesTruth(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.tagger.io.TSVTaggedFileReaderTest.testError();edu.stanford.nlp.tagger.io.TSVTaggedFileReader.<init>(edu.stanford.nlp.tagger.io.TaggedFileRecord);1.0
edu.stanford.nlp.tagger.io.TSVTaggedFileReaderTest.testError();edu.stanford.nlp.tagger.io.TSVTaggedFileReader.primeNext();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcaatRemove();null.<init>(edu.stanford.nlp.util.CollectionUtilsTest);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcaatRemove();null.hasNext();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcaatRemove();null.next();1.0
edu.stanford.nlp.util.ComparatorsTest.testNullSafeComparator();edu.stanford.nlp.util.Comparators.nullSafeCompare(T, T);1.0
edu.stanford.nlp.parser.shiftreduce.ReorderingOracleTest.testReorderIncorrectShift();edu.stanford.nlp.parser.shiftreduce.ReorderingOracle.reorderIncorrectShiftTransition(java.util.List<edu.stanford.nlp.parser.shiftreduce.Transition>);1.0
edu.stanford.nlp.math.ArrayMathTest.testExpLogInplace();edu.stanford.nlp.math.ArrayMath.norm(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUStringArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToUStringArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUStringArr4();edu.stanford.nlp.util.ConvertByteArray.byteArrToUStringArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.io.IOUtilsTest.testReadWriteStreamFromString();edu.stanford.nlp.io.IOUtils.readStreamFromString(java.lang.String);1.0
edu.stanford.nlp.util.StringUtilsTest.testEditDistance();edu.stanford.nlp.util.StringUtils.editDistance(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testEmpty();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testTagInText();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testNotFound();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testFound();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testTwoTags();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.testSingleTags();edu.stanford.nlp.objectbank.XMLBeginEndIteratorTest.compareResults(edu.stanford.nlp.objectbank.XMLBeginEndIterator<java.lang.String>, java.lang.String[]);1.0
edu.stanford.nlp.international.spanish.SpanishUnknownWordSignaturesTest.testHasConditionalSuffix();edu.stanford.nlp.international.spanish.SpanishUnknownWordSignatures.hasConditionalSuffix(java.lang.String);1.0
edu.stanford.nlp.stats.CountersTest.testDotProduct();edu.stanford.nlp.stats.Counters.dotProduct(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.stats.CountersTest.testDotProduct();edu.stanford.nlp.stats.Counters.optimizedDotProduct(edu.stanford.nlp.stats.Counter<E>, edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.process.TransformXMLTest.testTransformXML1();edu.stanford.nlp.process.TransformXML.transformXML(java.lang.String[], java.util.function.Function<java.lang.String, T>, java.io.InputStream, java.io.Writer);1.0
edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcherTest.testExctWsMatching();edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher.findTargetStringOffsets(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcherTest.testLnrmMatching();edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher.findTargetStringOffsets(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.concurrent.MulticoreWrapperTest.testUnsynchronized();edu.stanford.nlp.util.concurrent.MulticoreWrapper.peek();1.0
edu.stanford.nlp.util.concurrent.MulticoreWrapperTest.testSynchronization();edu.stanford.nlp.util.concurrent.MulticoreWrapper.poll();1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsCorefWithParse();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsCoref();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsOrderPreserving();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsRegexNERAfterNER();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsBasic();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.pipeline.StanfordCoreNLPTest.testPrereqAnnotatorsCorefBeforeOpenIE();edu.stanford.nlp.pipeline.StanfordCoreNLP.ensurePrerequisiteAnnotators(java.lang.String[], java.util.Properties);1.0
edu.stanford.nlp.util.StringUtilsTest.testStringIsNullOrEmpty();edu.stanford.nlp.util.StringUtils.isNullOrEmpty(java.lang.String);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove2();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove2();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove2();edu.stanford.nlp.graph.DirectedMultiGraph.removeVertices(java.util.Collection<V>);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testCopyConstructor();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallContains();edu.stanford.nlp.graph.DirectedMultiGraph.containsVertex(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallContains();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testGetAllVertices();edu.stanford.nlp.graph.DirectedMultiGraph.getAllVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallRemoveVertex();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallRemoveVertex();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallRemoveVertex();edu.stanford.nlp.graph.DirectedMultiGraph.isEdge(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testIsNeighbor();edu.stanford.nlp.graph.DirectedMultiGraph.isNeighbor(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testNeighbors();edu.stanford.nlp.graph.DirectedMultiGraph.getChildren(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testNeighbors();edu.stanford.nlp.graph.DirectedMultiGraph.getNeighbors(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testNeighbors();edu.stanford.nlp.graph.DirectedMultiGraph.getParents(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testSmallAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.isEdge(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove3();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove3();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove3();edu.stanford.nlp.graph.DirectedMultiGraph.isEmpty();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove3();edu.stanford.nlp.graph.DirectedMultiGraph.removeVertices(java.util.Collection<V>);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.isEdge(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.removeEdge(V, V, E);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.removeVertex(V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAddRemove();edu.stanford.nlp.graph.DirectedMultiGraph.removeVertices(java.util.Collection<V>);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAdd();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testAdd();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.math.ArrayMathTest.testInnerProduct();edu.stanford.nlp.math.ArrayMath.innerProduct(double[], double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testCharArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.charArrToByteArr(char[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testCharArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.charArrToByteArr(char[], int, int);1.0
edu.stanford.nlp.international.spanish.SpanishUnknownWordSignaturesTest.testHasImperfectErIrSuffix();edu.stanford.nlp.international.spanish.SpanishUnknownWordSignatures.hasImperfectErIrSuffix(java.lang.String);1.0
edu.stanford.nlp.util.HashIndexTest.testCopyConstructor();edu.stanford.nlp.util.HashIndex.addAll(java.util.Collection<? extends E>);1.0
edu.stanford.nlp.math.ArrayMathTest.testExpLog();edu.stanford.nlp.math.ArrayMath.norm(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testNormalize();edu.stanford.nlp.math.ArrayMath.sum(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testArgmin();edu.stanford.nlp.math.ArrayMath.argmin(double[]);1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testBasicIterator();edu.stanford.nlp.util.TwoDimensionalMap.size();1.0
edu.stanford.nlp.util.TwoDimensionalMapTest.testMapFactory();edu.stanford.nlp.util.TwoDimensionalMap.size();1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testIterator();null.hasNext();1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testIterator();null.next();1.0
edu.stanford.nlp.math.ArrayMathTest.testPairwiseSubtract();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToIntArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToIntArr(byte[], int, int[], int, int);1.0
edu.stanford.nlp.international.french.FrenchUnknownWordSignaturesTest.testIsPunc();edu.stanford.nlp.international.french.FrenchUnknownWordSignatures.isPunc(java.lang.String);1.0
edu.stanford.nlp.util.FunctionsTest.testCompose();edu.stanford.nlp.util.Functions.ComposedFunction.apply(T1);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testIntArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.intArrToByteArr(int[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testIntArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.intArrToByteArr(int[], int, int);1.0
edu.stanford.nlp.ie.pascal.ISODateInstanceTest.testIsAfter();edu.stanford.nlp.ie.pascal.ISODateInstance.isAfter(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.StringUtilsTest.testTr();edu.stanford.nlp.util.StringUtils.tr(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.fixedIndex();edu.stanford.nlp.naturalli.NaturalLogicRelation.byFixedIndex(int);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.spotTestJoinTable();edu.stanford.nlp.naturalli.NaturalLogicRelation.join(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.util.ArrayUtilsTest.testAsSet();edu.stanford.nlp.util.ArrayUtils.asSet(T[]);1.0
edu.stanford.nlp.util.CoreMapTest.testEquality();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.CoreMapTest.testEquality();edu.stanford.nlp.util.ArrayCoreMap.hashCode();1.0
edu.stanford.nlp.util.XMLUtilsTest.testStripTags();edu.stanford.nlp.util.XMLUtils.stripTags(java.io.Reader, java.util.List<java.lang.Integer>, boolean);1.0
edu.stanford.nlp.math.SloppyMathTest.testArccos();edu.stanford.nlp.math.SloppyMath.acos(double);1.0
edu.stanford.nlp.util.StringUtilsTest.testExpandEnvironmentVariables();edu.stanford.nlp.util.StringUtils.expandEnvironmentVariables(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);1.0
edu.stanford.nlp.util.ReflectionLoadingTest.testNoArgs();edu.stanford.nlp.util.ReflectionLoading.loadByReflection(java.lang.String, java.lang.Object[]);1.0
edu.stanford.nlp.util.MetaClassTest.testInheritance();edu.stanford.nlp.util.MetaClass.createInstance(java.lang.Object[]);1.0
edu.stanford.nlp.util.ReflectionLoadingTest.testOneArg();edu.stanford.nlp.util.ReflectionLoading.loadByReflection(java.lang.String, java.lang.Object[]);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIsSubList();edu.stanford.nlp.util.CollectionUtils.isSubList(java.util.List<T>, java.util.List<? super T>);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteShortToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeShortToByteArr(byte[], int, short);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testRemove();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testRemove();edu.stanford.nlp.graph.DirectedMultiGraph.removeEdges(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testRemove();edu.stanford.nlp.graph.DirectedMultiGraph.removeVertex(V);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testRemove();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testRemove();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testRemove();edu.stanford.nlp.util.ArrayCoreMap.remove(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testRemove();edu.stanford.nlp.util.ArrayCoreMap.size();1.0
edu.stanford.nlp.util.CoreMapTest.testToShorterString();edu.stanford.nlp.util.ArrayCoreMap.toShorterString(java.lang.String[]);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testGetAndSet();edu.stanford.nlp.util.ArrayCoreMap.get(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testGetAndSet();edu.stanford.nlp.util.ArrayCoreMap.size();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testSimpleEquals();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testSimpleEquals();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testCreate();edu.stanford.nlp.util.ArrayCoreMap.size();1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testEqualsReversedInsertOrder();edu.stanford.nlp.util.ArrayCoreMap.equals(java.lang.Object);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testEqualsReversedInsertOrder();edu.stanford.nlp.util.ArrayCoreMap.set(java.lang.Class<? extends edu.stanford.nlp.util.TypesafeMap.edu.stanford.nlp.util.TypesafeMap$Key<VALUE>>, VALUE);1.0
edu.stanford.nlp.util.ArrayCoreMapTest.testEqualsReversedInsertOrder();edu.stanford.nlp.util.ArrayCoreMap.size();1.0
edu.stanford.nlp.util.DeltaIndexTest.testSize();edu.stanford.nlp.util.DeltaIndex.size();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteAStringToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeAStringToByteArr(byte[], int, java.lang.String, int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testAStringArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.aStringArrToByteArr(java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUString2();edu.stanford.nlp.util.ConvertByteArray.byteArrToUString(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUStringArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToUStringArr(byte[], int, int);1.0
edu.stanford.nlp.util.DeltaIndexTest.testIndex();edu.stanford.nlp.util.DeltaIndex.indexOf(E);1.0
edu.stanford.nlp.util.HashIndexTest.testIndexOf();edu.stanford.nlp.util.HashIndex.indexOf(E);1.0
edu.stanford.nlp.util.HashIndexTest.testIndexOf();edu.stanford.nlp.util.HashIndex.size();1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testPreservesIndex();edu.stanford.nlp.tagger.maxent.TTags.getIndex(java.lang.String);1.0
edu.stanford.nlp.patterns.surface.SurfacePatternTest.testSubsumesArray();edu.stanford.nlp.patterns.surface.SurfacePattern.subsumesArray(java.lang.Object[], java.lang.Object[]);1.0
edu.stanford.nlp.util.ComparatorsTest.testListComparator();edu.stanford.nlp.util.Comparators.compareLists(java.util.List<? extends X>, java.util.List<? extends X>);1.0
edu.stanford.nlp.machinereading.structure.SpanTest.testUnion();edu.stanford.nlp.ie.machinereading.structure.Span.union(edu.stanford.nlp.ie.machinereading.structure.Span, edu.stanford.nlp.ie.machinereading.structure.Span);1.0
edu.stanford.nlp.pipeline.JSONOutputterTest.testSanitizeJSONString();edu.stanford.nlp.util.StringUtils.escapeJsonString(java.lang.String);1.0
edu.stanford.nlp.util.StringUtilsTest.testEscapeJsonString();edu.stanford.nlp.util.StringUtils.escapeJsonString(java.lang.String);1.0
edu.stanford.nlp.parser.shiftreduce.ReorderingOracleTest.testReorderIncorrectBinaryTransition();edu.stanford.nlp.parser.shiftreduce.ReorderingOracle.reorderIncorrectBinaryTransition(java.util.List<edu.stanford.nlp.parser.shiftreduce.Transition>);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testClosed();edu.stanford.nlp.tagger.maxent.TTags.isClosed(java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testCanCount();edu.stanford.nlp.tagger.maxent.TTags.getSize();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToIntArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToIntArr(byte[], int, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testParseDouble();edu.stanford.nlp.math.SloppyMath.parseDouble(boolean, long, int);1.0
edu.stanford.nlp.math.ArrayMathTest.testNorm_inf();edu.stanford.nlp.math.ArrayMath.max(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testArgmax();edu.stanford.nlp.math.ArrayMath.argmax(double[]);1.0
edu.stanford.nlp.objectbank.DelimitRegExIteratorTest.testFunctionality();edu.stanford.nlp.objectbank.DelimitRegExIterator.hasNext();1.0
edu.stanford.nlp.util.DeltaIndexTest.testGet();edu.stanford.nlp.util.DeltaIndex.get(int);1.0
edu.stanford.nlp.util.HashIndexTest.testGet();edu.stanford.nlp.util.HashIndex.get(int);1.0
edu.stanford.nlp.util.HashIndexTest.testGet();edu.stanford.nlp.util.HashIndex.size();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testToList();edu.stanford.nlp.util.CollectionUtils.toList(java.lang.Iterable<T>);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testToSet();edu.stanford.nlp.util.CollectionUtils.toSet(java.lang.Iterable<T>);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testObjects();null.get(int);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testConnectedComponents();edu.stanford.nlp.graph.DirectedMultiGraph.getConnectedComponents();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testEdgesNodes();edu.stanford.nlp.graph.DirectedMultiGraph.isEdge(V, V);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testEdgesNodes();edu.stanford.nlp.graph.DirectedMultiGraph.isNeighbor(V, V);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testShortArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.shortArrToByteArr(byte[], int, short[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testFloatArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.floatArrToByteArr(byte[], int, float[], int, int);1.0
edu.stanford.nlp.math.ArrayMathTest.testSafeSumAndMean();edu.stanford.nlp.math.ArrayMathTest.helpTestSafeSumAndMean(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testFloatArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.floatArrToByteArr(float[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testHasNaN();edu.stanford.nlp.math.ArrayMath.hasNaN(double[]);1.0
edu.stanford.nlp.naturalli.PolarityTest.antimultiplicativeProject();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.additive_antimultiplicativeProject();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.noneProject();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.multiplicative_antimultiplicativeProject();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.additiveProject();edu.stanford.nlp.naturalli.Polarity.projectLexicalRelation(edu.stanford.nlp.naturalli.NaturalLogicRelation);1.0
edu.stanford.nlp.naturalli.PolarityTest.upwardDownward();edu.stanford.nlp.naturalli.Polarity.isDownwards();1.0
edu.stanford.nlp.naturalli.PolarityTest.upwardDownward();edu.stanford.nlp.naturalli.Polarity.isUpwards();1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterInfinite();edu.stanford.nlp.math.ArrayMath.countInfinite(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterInfinite();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterNaNAndInfinite();edu.stanford.nlp.math.ArrayMath.countInfinite(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterNaNAndInfinite();edu.stanford.nlp.math.ArrayMath.countNaN(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterNaNAndInfinite();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.util.StringUtilsTest.testGetBaseName();edu.stanford.nlp.util.StringUtils.getBaseName(java.lang.String);1.0
edu.stanford.nlp.util.StringUtilsTest.testGetBaseName();edu.stanford.nlp.util.StringUtils.getBaseName(java.lang.String, java.lang.String);1.0
edu.stanford.nlp.util.MapsTest.testAddAllWithFunction();edu.stanford.nlp.util.Maps.addAll(java.util.Map<K, V1>, java.util.Map<K, V2>, java.util.function.Function<V2, V1>);1.0
edu.stanford.nlp.util.BeamTest.testSize();edu.stanford.nlp.util.Beam.size();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatEmptyIter();null.hasNext();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatEmptyIter();null.next();1.0
edu.stanford.nlp.stats.CountersTest.testMin();edu.stanford.nlp.stats.Counters.min(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatMultiIter();null.hasNext();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatMultiIter();null.next();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatSingleIter();null.hasNext();1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatSingleIter();null.next();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testUStringArrToByteArr4();edu.stanford.nlp.util.ConvertByteArray.uStringArrToByteArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteIntToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeIntToByteArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testUStringArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.uStringArrToByteArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testUStringArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.uStringArrToByteArr(java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteFloatToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeFloatToByteArr(byte[], int, float);1.0
edu.stanford.nlp.util.TreeShapedStackTest.testBasicOperations();edu.stanford.nlp.util.TreeShapedStack.<init>(edu.stanford.nlp.util.TreeShapedStack<T>, T, int);1.0
edu.stanford.nlp.util.TreeShapedStackTest.testBasicOperations();edu.stanford.nlp.util.TreeShapedStack.peek();1.0
edu.stanford.nlp.util.TreeShapedStackTest.testBasicOperations();edu.stanford.nlp.util.TreeShapedStack.pop();1.0
edu.stanford.nlp.util.TreeShapedStackTest.testBasicOperations();edu.stanford.nlp.util.TreeShapedStack.push(T);1.0
edu.stanford.nlp.util.TreeShapedStackTest.testEquals();edu.stanford.nlp.util.TreeShapedStack.equals(java.lang.Object);1.0
edu.stanford.nlp.util.TreeShapedStackTest.testEquals();edu.stanford.nlp.util.TreeShapedStack.push(T);1.0
edu.stanford.nlp.util.ArrayMapTest.testClear();edu.stanford.nlp.util.ArrayMap.isEmpty();1.0
edu.stanford.nlp.util.ArrayMapTest.testClear();edu.stanford.nlp.util.ArrayMap.size();1.0
edu.stanford.nlp.process.LexerUtilsTest.testIndexOfRegex();edu.stanford.nlp.process.LexerUtils.indexOfRegex(java.util.regex.Pattern, java.lang.String);1.0
edu.stanford.nlp.util.AcronymMatcherTest.testBasic();edu.stanford.nlp.util.AcronymMatcher.isAcronym(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.util.AcronymMatcherTest.testFilterStopWords();edu.stanford.nlp.util.AcronymMatcher.isAcronym(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.util.AcronymMatcherTest.testStripCorp();edu.stanford.nlp.util.AcronymMatcher.isAcronym(java.lang.String, java.lang.String[]);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testToArray();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.contains(java.lang.Object);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testToArray();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.objectsList();1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testIndexOf();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.indexOf(E);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testIndexOf();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.size();1.0
edu.stanford.nlp.stats.TwoDimensionalCounterTest.testTotalCount();edu.stanford.nlp.stats.TwoDimensionalCounter.totalCount();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAString1();edu.stanford.nlp.util.ConvertByteArray.byteArrToAString(byte[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUStringArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToUStringArr(byte[]);1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testForm();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testForm();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testDelZeroDegreeNodes();edu.stanford.nlp.graph.DirectedMultiGraph.getNumEdges();1.0
edu.stanford.nlp.graph.DirectedMultiGraphTest.testDelZeroDegreeNodes();edu.stanford.nlp.graph.DirectedMultiGraph.getNumVertices();1.0
edu.stanford.nlp.util.SetsTest.testIntersection();edu.stanford.nlp.util.Sets.intersection(java.util.Set<E>, java.util.Set<E>);1.0
edu.stanford.nlp.util.SetsTest.testPowerset();edu.stanford.nlp.util.Sets.powerSet(java.util.Set<E>);1.0
edu.stanford.nlp.util.SetsTest.testDiff();edu.stanford.nlp.util.Sets.diff(java.util.Set<E>, java.util.Set<E>);1.0
edu.stanford.nlp.util.SetsTest.testUnion();edu.stanford.nlp.util.Sets.union(java.util.Set<E>, java.util.Set<E>);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterNaN();edu.stanford.nlp.math.ArrayMath.countNaN(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testFliterNaN();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.optimization.GoldenSectionLineSearchTest.testEasy();edu.stanford.nlp.optimization.GoldenSectionLineSearch.minimize(java.util.function.DoubleUnaryOperator);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testFloatArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.floatArrToByteArr(float[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToBooleanArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToBooleanArr(byte[]);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testGet();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.get(int);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testGet();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.size();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testShortArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.shortArrToByteArr(short[]);1.0
edu.stanford.nlp.math.SloppyMathTest.testIntPow();edu.stanford.nlp.math.SloppyMath.intPow(double, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testIntPow();edu.stanford.nlp.math.SloppyMath.intPow(float, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testIntPow();edu.stanford.nlp.math.SloppyMath.intPow(int, int);1.0
edu.stanford.nlp.util.ArrayUtilsTest.testRemoveAt();edu.stanford.nlp.util.ArrayUtils.removeAt(java.lang.Object[], int);1.0
edu.stanford.nlp.util.StringUtilsTest.testDecodeArray();edu.stanford.nlp.util.StringUtils.decodeArray(java.lang.String);1.0
edu.stanford.nlp.math.ArrayMathTest.test2dAdd();edu.stanford.nlp.math.ArrayMath.addInPlace(double[][], double[][]);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testTimeNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedPercentString(java.lang.String, java.lang.Number);1.0
edu.stanford.nlp.ie.QuantifiableEntityNormalizerTest.testTimeNormalization();edu.stanford.nlp.ie.QuantifiableEntityNormalizer.normalizedTimeString(java.lang.String, edu.stanford.nlp.time.Timex);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToCharArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToCharArr(byte[], int, char[], int, int);1.0
edu.stanford.nlp.util.StringUtilsTest.testRegexGroups();edu.stanford.nlp.util.StringUtils.regexGroups(java.util.regex.Pattern, java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteUStringToByteArr2();edu.stanford.nlp.util.ConvertByteArray.writeUStringToByteArr(byte[], int, java.lang.String, int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToCharArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToCharArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToCharArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToCharArr(byte[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testPow();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToShort();edu.stanford.nlp.util.ConvertByteArray.byteArrToShort(byte[], int);1.0
edu.stanford.nlp.math.ArrayMathTest.testAddInPlace();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.util.XMLUtilsTest.testXMLTag();edu.stanford.nlp.util.XMLUtils.findSpace(java.lang.String, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testAStringArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.aStringArrToByteArr(java.lang.String[]);1.0
edu.stanford.nlp.tagger.maxent.ExtractorFramesRareTest.testAllNumeric();edu.stanford.nlp.tagger.maxent.RareExtractor.allNumeric(java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.ExtractorFramesRareTest.testAllNumeric();edu.stanford.nlp.tagger.maxent.RareExtractor.containsNumber(java.lang.String);1.0
edu.stanford.nlp.math.ArrayMathTest.testJensenShannon();edu.stanford.nlp.math.ArrayMath.jensenShannonDivergence(double[], double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testSumAndMean();edu.stanford.nlp.math.ArrayMath.mean(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testKLDivergence();edu.stanford.nlp.math.ArrayMath.klDivergence(double[], double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testSum();edu.stanford.nlp.math.ArrayMath.sum(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testUStringArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.uStringArrToByteArr(java.lang.String[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testCountNaN();edu.stanford.nlp.math.ArrayMath.countNaN(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToLongArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToLongArr(byte[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToFloat();edu.stanford.nlp.util.ConvertByteArray.byteArrToFloat(byte[], int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAStringArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToAStringArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToLongArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToLongArr(byte[], int, long[], int, int);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testContainsAny();edu.stanford.nlp.util.CollectionUtils.containsAny(java.util.Collection<T>, java.util.Collection<T>);1.0
edu.stanford.nlp.neural.NeuralUtilsTest.testIsZero();edu.stanford.nlp.neural.NeuralUtils.isZero(org.ejml.simple.SimpleMatrix);1.0
edu.stanford.nlp.stats.CountersTest.testArgmin();edu.stanford.nlp.stats.Counters.argmin(edu.stanford.nlp.stats.Counter<E>);1.0
edu.stanford.nlp.util.HashIndexTest.testIterator();edu.stanford.nlp.util.HashIndex.iterator();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testDoubleArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.doubleArrToByteArr(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testDoubleArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.doubleArrToByteArr(double[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testShortArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.shortArrToByteArr(short[], int, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testRound1();edu.stanford.nlp.math.SloppyMath.round(double);1.0
edu.stanford.nlp.math.SloppyMathTest.testRound2();edu.stanford.nlp.math.SloppyMath.round(double, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testStringAToByteArr1();edu.stanford.nlp.util.ConvertByteArray.stringUToByteArr(java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteDoubleToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeDoubleToByteArr(byte[], int, double);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToLongArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToLongArr(byte[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testLongArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.longArrToByteArr(long[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testLongArrToByteArr1();edu.stanford.nlp.util.ConvertByteArray.longArrToByteArr(long[]);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testIteratorConcatEmpty();null.hasNext();1.0
edu.stanford.nlp.math.ArrayMathTest.testLogSum();edu.stanford.nlp.math.ArrayMath.logSum(double[]);1.0
edu.stanford.nlp.util.HashIndexTest.testToArray();edu.stanford.nlp.util.HashIndex.objectsList();1.0
edu.stanford.nlp.util.ArrayUtilsTest.testEqualContentsInt();edu.stanford.nlp.util.ArrayUtils.equalContents(int[], int[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteLongToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeLongToByteArr(byte[], int, long);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAStringArr1();edu.stanford.nlp.util.ConvertByteArray.byteArrToAStringArr(byte[]);1.0
edu.stanford.nlp.math.SloppyMathTest.testIsDangerous();edu.stanford.nlp.math.SloppyMath.isDangerous(double);1.0
edu.stanford.nlp.math.SloppyMathTest.testIsVeryDangerous();edu.stanford.nlp.math.SloppyMath.isDangerous(double);1.0
edu.stanford.nlp.math.ArrayMathTest.testMultiplyInPlace();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.SloppyMathTest.testPythonMod();edu.stanford.nlp.math.SloppyMath.pythonMod(int, int);1.0
edu.stanford.nlp.math.ArrayMathTest.testPowInPlace();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testGetIndex();edu.stanford.nlp.util.CollectionUtils.getIndex(java.util.List<T>, T, int);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testGetNGrams();edu.stanford.nlp.util.CollectionUtils.getNGrams(java.util.List<T>, int, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testMin();edu.stanford.nlp.math.SloppyMath.min(int, int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAStringArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToAStringArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAStringArr4();edu.stanford.nlp.util.ConvertByteArray.byteArrToAStringArr(byte[], int, java.lang.String[], int, int);1.0
edu.stanford.nlp.util.HashIndexTest.testSize();edu.stanford.nlp.util.HashIndex.size();1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testBooleanArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.booleanArrToByteArr(byte[], int, boolean[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToAString2();edu.stanford.nlp.util.ConvertByteArray.byteArrToAString(byte[], int, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testMax();edu.stanford.nlp.math.SloppyMath.max(int, int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteUStringToByteArr1();edu.stanford.nlp.util.ConvertByteArray.writeUStringToByteArr(byte[], int, java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testDoubleArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.doubleArrToByteArr(byte[], int, double[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToFloatArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToFloatArr(byte[], int, float[], int, int);1.0
edu.stanford.nlp.math.SloppyMathTest.testParseInt();edu.stanford.nlp.math.SloppyMath.parseInt(java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToDoubleArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToDoubleArr(byte[], int, double[], int, int);1.0
edu.stanford.nlp.math.ArrayMathTest.testCountInfinite();edu.stanford.nlp.math.ArrayMath.countInfinite(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToBooleanArr2();edu.stanford.nlp.util.ConvertByteArray.byteArrToBooleanArr(byte[], int, int);1.0
edu.stanford.nlp.util.StringUtilsTest.testSplitOnChar();edu.stanford.nlp.util.StringUtils.splitOnChar(java.lang.String, char);1.0
edu.stanford.nlp.util.StringUtilsTest.testGetCharacterNgrams();edu.stanford.nlp.util.StringUtilsTest.testCharacterNgram(java.lang.String, int, int, java.lang.String[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToBoolean();edu.stanford.nlp.util.ConvertByteArray.byteArrToBoolean(byte[], int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testStringAToByteArr2();edu.stanford.nlp.util.ConvertByteArray.stringAToByteArr(java.lang.String);1.0
edu.stanford.nlp.process.TSVUtilsTest.testParseArrayTrivial();edu.stanford.nlp.process.TSVUtils.parseArray(java.lang.String);1.0
edu.stanford.nlp.process.TSVUtilsTest.testRealSentenceDoubleEscaped();edu.stanford.nlp.process.TSVUtils.parseArray(java.lang.String);1.0
edu.stanford.nlp.process.TSVUtilsTest.testParseArrayEscape();edu.stanford.nlp.process.TSVUtils.parseArray(java.lang.String);1.0
edu.stanford.nlp.process.TSVUtilsTest.testRealSentence();edu.stanford.nlp.process.TSVUtils.parseArray(java.lang.String);1.0
edu.stanford.nlp.process.TSVUtilsTest.testParseArrayQuote();edu.stanford.nlp.process.TSVUtils.parseArray(java.lang.String);1.0
edu.stanford.nlp.util.CollectionUtilsTest.testSorted();edu.stanford.nlp.util.CollectionUtils.sorted(java.lang.Iterable<T>);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testBooleanArrToByteArr2();edu.stanford.nlp.util.ConvertByteArray.booleanArrToByteArr(boolean[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToUString1();edu.stanford.nlp.util.ConvertByteArray.byteArrToUString(byte[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testPairwiseAdd();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testNumRows();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testAdd();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.ArrayMathTest.testMultiply();edu.stanford.nlp.math.ArrayMath.numRows(double[]);1.0
edu.stanford.nlp.math.SloppyMathTest.testLogAdd();edu.stanford.nlp.math.SloppyMath.logAdd(double, double);1.0
edu.stanford.nlp.util.StringUtilsTest.testValueSplit();edu.stanford.nlp.util.StringUtils.valueSplit(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testHoldsLotsOfStuff();edu.stanford.nlp.tagger.maxent.TTags.add(java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testUniqueness();edu.stanford.nlp.tagger.maxent.TTags.add(java.lang.String);1.0
edu.stanford.nlp.tagger.maxent.TTagsTest.testSameness();edu.stanford.nlp.tagger.maxent.TTags.add(java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTreeTest.testUnescape();edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree.unescape(java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testIntArrToByteArr3();edu.stanford.nlp.util.ConvertByteArray.intArrToByteArr(byte[], int, int[], int, int);1.0
edu.stanford.nlp.util.concurrent.ConcurrentHashIndexTest.testSize();edu.stanford.nlp.util.concurrent.ConcurrentHashIndex.size();1.0
edu.stanford.nlp.util.StringUtilsTest.testNormalize();edu.stanford.nlp.util.StringUtils.normalize(java.lang.String);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToShortArr3();edu.stanford.nlp.util.ConvertByteArray.byteArrToShortArr(byte[], int, short[], int, int);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testWriteBooleanToByteArr();edu.stanford.nlp.util.ConvertByteArray.writeBooleanToByteArr(byte[], int, boolean);1.0
edu.stanford.nlp.math.ArrayMathTest.testHasInfinite();edu.stanford.nlp.math.ArrayMath.hasInfinite(double[]);1.0
edu.stanford.nlp.util.ConvertByteArrayTest.testByteArrToInt();edu.stanford.nlp.util.ConvertByteArray.byteArrToInt(byte[], int);1.0
edu.stanford.nlp.international.french.FrenchUnknownWordSignaturesTest.testHasPunc();edu.stanford.nlp.international.french.FrenchUnknownWordSignatures.hasPunc(java.lang.String);1.0
edu.stanford.nlp.naturalli.NaturalLogicRelationTest.entailmentState();edu.stanford.nlp.naturalli.NaturalLogicRelation.forDependencyInsertion(java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTreeTest.testNamePattern();edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTreeTest.runNamePatternFalse(java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTreeTest.testNamePattern();edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTreeTest.runNamePatternTrue(java.lang.String, java.lang.String, java.lang.String);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.testNodePattern();edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.runPatternTest(java.util.regex.Pattern, java.lang.String[], java.lang.String[], int, int);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.testVariablePattern();edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.runPatternTest(java.util.regex.Pattern, java.lang.String[], java.lang.String[], int, int);1.0
edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.testRegexPattern();edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNodeTest.runPatternTest(java.util.regex.Pattern, java.lang.String[], java.lang.String[], int, int);1.0
edu.stanford.nlp.util.DeltaMapTest.testOriginalPreserved();edu.stanford.nlp.util.DeltaMap.get(java.lang.Object);1.0
