{
  "tests": [
    {
      "cls": "org.apache.commons.collections4.trie.PatriciaTrieTest",
      "test": "testPrefixMapRemoval()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryInSubtree(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.remove()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.fixup()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.hasNext()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.remove()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, K, int, int)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K, int, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.next()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(K)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K, int, int)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.PrefixRangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.\u003cinit\u003e(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 0
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()",
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.trie.PatriciaTrieTest",
      "test": "testPrefixMapSizes2()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryInSubtree(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 5,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.fixup()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.iterator()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.next()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K, int, int)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(K)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.inRange(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 5,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K, int, int)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.PrefixRangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.\u003cinit\u003e(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.castKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String, int, int, java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 0
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.trie.PatriciaTrieTest",
      "test": "testPrefixMapSizes()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryInSubtree(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 5,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getValue()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.fixup()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.hasNext()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.iterator()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.next()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.get(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getEntry(java.lang.Object)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.next()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.clear()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(K)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.inRange(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 5,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K, int, int)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.PrefixRangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.get(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.\u003cinit\u003e(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.castKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String, int, int, java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 0
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.get(java.lang.Object)"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.trie.PatriciaTrieTest",
      "test": "testPrefixMap()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryInSubtree(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getValue()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.fixup()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, K, int, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.get(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getEntry(java.lang.Object)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(K, int, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.next()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(K)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.EntryIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.inRange(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(K, int, int)": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.put(K, V)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.PrefixRangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.lastKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.firstKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.get(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lastEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.\u003cinit\u003e(K, int, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.remove(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.castKey(java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isPrefix(java.lang.String, int, int, java.lang.String)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 0
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(K)",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.lastKey()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.get(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeMap.firstKey()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()",
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getValue()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.get(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.size()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.remove(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.SingletonIterator.hasNext()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.containsKey(java.lang.Object)",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet.iterator()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(java.lang.Object)"
      ],
      "groundTruth": []
    }
  ]
}