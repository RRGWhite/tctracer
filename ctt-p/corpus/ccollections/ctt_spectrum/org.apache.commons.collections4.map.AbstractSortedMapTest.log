{
  "tests": [
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testLastKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.inFromRange(K, boolean)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.isFromInclusive()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lastEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()",
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeFullMap()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testComparator()",
      "hitSet": {},
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testFirstKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()",
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeFullMap()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testLastKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.inFromRange(K, boolean)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.isFromInclusive()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()",
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeFullMap()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testComparator()",
      "hitSet": {},
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testFirstKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.inToRange(K, boolean)": 1,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.isToInclusive()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()",
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeFullMap()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testLastKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lastKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 6,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.lastKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lastEntry()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()",
        "org.apache.commons.collections4.trie.UnmodifiableTrie.lastKey()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testLastKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(K)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeFullMap()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.lastKey()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testComparator()",
      "hitSet": {},
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testFirstKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(java.lang.Object, java.lang.Object)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.inToRange(K, boolean)": 1,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.isToInclusive()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeFullMap()",
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.firstKey()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testComparator()",
      "hitSet": {},
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.map.AbstractSortedMapTest",
      "test": "testFirstKey()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.next()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.getKey()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowNullValue()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 6,
        "org.apache.commons.collections4.map.AbstractMapTest.isAllowDuplicateValues()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleValues()": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.map.AbstractMapTest.getSampleKeys()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.addSampleMappings(java.util.Map\u003c? super K, ? super V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.findNext(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.firstKey()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.nextEntry()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(K, V)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003c?, ?\u003e)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstKey()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 5,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeFullMap()",
        "org.apache.commons.collections4.trie.UnmodifiableTrie.firstKey()"
      ],
      "groundTruth": []
    }
  ]
}