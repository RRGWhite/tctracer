{
  "tests": [
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSerializeDeserializeThenCompare()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestTailMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSerializeDeserializeThenCompare()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.compare(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.getKeyAnalyzer()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(K, K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.subMap(K, K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestSubMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 3,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 4,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 3
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setKeyValue(K, V)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.lengthInBits(java.lang.String)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.setValue(V)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getFromKey()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie\u003cK, V\u003e.RangeMap)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.lengthInBits(K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(K)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.bitIndex(K, K)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.createEntrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isEmpty()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.entrySet()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.isBitSet(K, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e, org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isExternalNode()": 4,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.bitIndex(java.lang.String, int, int, java.lang.String, int, int)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 2,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.mask(int)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.getToKey()": 1,
        "org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.isInternalNode()": 3,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.getNearestEntryForKey(K, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.compareKeys(K, K)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementModCount()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.incrementSize()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.decrementSize()": 3,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.isBitSet(java.lang.String, int, int)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet.EntryIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSerializeDeserializeThenCompare()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestViewMap.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, boolean, K, boolean)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap.\u003cinit\u003e(K, K)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeMap.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(K)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.headMap(K)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractSortedMapTest.TestHeadMap.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.size()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapKeySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.values()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.values()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.values()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.values()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.values()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapValues.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.size()": 0,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 0,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.isTestSerialization()": 0
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 1,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 3,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 2,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 2
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.map.AbstractMapTest.TestMapEntrySet.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectEqualsSelf()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsContract()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.size()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.hashCode()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrie.hashCode()",
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSimpleSerialization()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 5,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 5,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(java.io.ObjectInputStream)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(java.io.ObjectOutputStream)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 3,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testObjectHashCodeEqualsSelfHashCode()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.hashCode()": 0,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 3,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrie.hashCode()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalFullCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.getCompatibilityVersion()": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.AbstractObjectTest.getCanonicalFullCollectionName(java.lang.Object)"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testSerializeDeserializeThenCompare()",
      "hitSet": {
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstEntry()": 3,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.size()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.EntryIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 4,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.hasNext()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieIterator.\u003cinit\u003e(org.apache.commons.collections4.trie.AbstractPatriciaTrie)": 2,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(java.io.ObjectInputStream)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry\u003cK, V\u003e)": 2,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(java.io.ObjectOutputStream)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.entrySet()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet.iterator()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.AbstractObjectTest.isEqualsCheckable()"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testCanonicalEmptyCollectionExists()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.getCompatibilityVersion()": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.AbstractObjectTest.getCanonicalEmptyCollectionName(java.lang.Object)"
      ],
      "groundTruth": []
    },
    {
      "cls": "org.apache.commons.collections4.AbstractObjectTest",
      "test": "testEqualsNull()",
      "hitSet": {
        "org.apache.commons.collections4.trie.UnmodifiableTrieTest.makeObject()": 0,
        "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.PatriciaTrie.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 1,
        "org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry.\u003cinit\u003e(K, V, int)": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.\u003cinit\u003e(org.apache.commons.collections4.trie.KeyAnalyzer\u003c? super K\u003e)": 1,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.\u003cinit\u003e(org.apache.commons.collections4.Trie\u003cK, ? extends V\u003e)": 2,
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)": 0,
        "org.apache.commons.collections4.trie.KeyAnalyzer.\u003cinit\u003e()": 1,
        "org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.\u003cinit\u003e(K, V)": 1
      },
      "callsBeforeAssert": [
        "org.apache.commons.collections4.trie.UnmodifiableTrie.equals(java.lang.Object)"
      ],
      "groundTruth": []
    }
  ]
}